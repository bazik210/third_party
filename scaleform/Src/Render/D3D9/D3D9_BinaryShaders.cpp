namespace Scaleform { namespace Render { namespace D3D9 { 

#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTG.hlsl.h /Vn pBinary_FTexTG
//    D3D9/FTexTG.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    dcl_texcoord v0.xy
    dcl_2d s0
    texld oC0, v0, s0

// approximately 1 instruction slot used (1 texture, 0 arithmetic)
#endif

const BYTE pBinary_FTexTG[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   8,  15, 128,   0,   0, 
    228, 144,   0,   8, 228, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGBatch.hlsl.h /Vn
//    pBinary_FTexTGBatch D3D9/FTexTGBatch.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    dcl_texcoord v0.xy
    dcl_2d s0
    texld oC0, v0, s0

// approximately 1 instruction slot used (1 texture, 0 arithmetic)
#endif

const BYTE pBinary_FTexTGBatch[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   8,  15, 128,   0,   0, 
    228, 144,   0,   8, 228, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGBatchCxform.hlsl.h /Vn
//    pBinary_FTexTGBatchCxform D3D9/FTexTGBatchCxform.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    dcl_texcoord3 v0
    dcl_texcoord4 v1
    dcl_texcoord v2.xy
    dcl_2d s0
    texld r0, v2, s0
    mov r1, v1
    mad oC0, r0, r1, v0

// approximately 3 instruction slots used (1 texture, 2 arithmetic)
#endif

const BYTE pBinary_FTexTGBatchCxform[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  31,   0,   0,   2, 
      5,   0,   3, 128,   0,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   4, 128,   1,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   2,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   2,   0, 
    228, 144,   0,   8, 228, 160, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   1,   0, 228, 144, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   0,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGBatchCxformEAlpha.hlsl.h /Vn
//    pBinary_FTexTGBatchCxformEAlpha D3D9/FTexTGBatchCxformEAlpha.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    dcl_color1 v0.w
    dcl_texcoord3 v1
    dcl_texcoord4 v2
    dcl_texcoord v3.xy
    dcl_2d s0
    texld r0, v3, s0
    mov r1, v2
    mad r0, r0, r1, v1
    mul oC0.w, r0.w, v0.w
    mov oC0.xyz, r0

// approximately 5 instruction slots used (1 texture, 4 arithmetic)
#endif

const BYTE pBinary_FTexTGBatchCxformEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  31,   0,   0,   2, 
     10,   0,   1, 128,   0,   0, 
      8, 144,  31,   0,   0,   2, 
      5,   0,   3, 128,   1,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   4, 128,   2,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   3,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   3,   0, 
    228, 144,   0,   8, 228, 160, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   2,   0, 228, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   1,   0, 
    228, 144,   5,   0,   0,   3, 
      0,   8,   8, 128,   0,   0, 
    255, 128,   0,   0, 255, 144, 
      1,   0,   0,   2,   0,   8, 
      7, 128,   0,   0, 228, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGBatchCxformEAlphaMul.hlsl.h
//    /Vn pBinary_FTexTGBatchCxformEAlphaMul
//    D3D9/FTexTGBatchCxformEAlphaMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color1 v0.w
    dcl_texcoord3 v1
    dcl_texcoord4 v2
    dcl_texcoord v3.xy
    dcl_2d s0
    texld r0, v3, s0
    mov r1, v2
    mad r0, r0, r1, v1
    mul r0.w, r0.w, v0.w
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 6 instruction slots used (1 texture, 5 arithmetic)
#endif

const BYTE pBinary_FTexTGBatchCxformEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      0,   0,  15, 160,   0,   0, 
    128, 191,   0,   0, 128,  63, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
     10,   0,   1, 128,   0,   0, 
      8, 144,  31,   0,   0,   2, 
      5,   0,   3, 128,   1,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   4, 128,   2,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   3,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   3,   0, 
    228, 144,   0,   8, 228, 160, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   2,   0, 228, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   1,   0, 
    228, 144,   5,   0,   0,   3, 
      0,   0,   8, 128,   0,   0, 
    255, 128,   0,   0, 255, 144, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0,   0, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   0,   0,  85, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGBatchCxformMul.hlsl.h /Vn
//    pBinary_FTexTGBatchCxformMul D3D9/FTexTGBatchCxformMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_texcoord3 v0
    dcl_texcoord4 v1
    dcl_texcoord v2.xy
    dcl_2d s0
    texld r0, v2, s0
    mov r1, v1
    mad r0, r0, r1, v0
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 5 instruction slots used (1 texture, 4 arithmetic)
#endif

const BYTE pBinary_FTexTGBatchCxformMul[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      0,   0,  15, 160,   0,   0, 
    128, 191,   0,   0, 128,  63, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   3, 128,   0,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   4, 128,   1,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   2,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   2,   0, 
    228, 144,   0,   8, 228, 160, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   1,   0, 228, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   0,   0, 
    228, 144,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   0,   0, 
     85, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGBatchEAlpha.hlsl.h /Vn
//    pBinary_FTexTGBatchEAlpha D3D9/FTexTGBatchEAlpha.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    dcl_color1 v0.w
    dcl_texcoord v1.xy
    dcl_2d s0
    texld r0, v1, s0
    mul oC0.w, r0.w, v0.w
    mov oC0.xyz, r0

// approximately 3 instruction slots used (1 texture, 2 arithmetic)
#endif

const BYTE pBinary_FTexTGBatchEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  31,   0,   0,   2, 
     10,   0,   1, 128,   0,   0, 
      8, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   1,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   1,   0, 
    228, 144,   0,   8, 228, 160, 
      5,   0,   0,   3,   0,   8, 
      8, 128,   0,   0, 255, 128, 
      0,   0, 255, 144,   1,   0, 
      0,   2,   0,   8,   7, 128, 
      0,   0, 228, 128, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGBatchEAlphaMul.hlsl.h /Vn
//    pBinary_FTexTGBatchEAlphaMul D3D9/FTexTGBatchEAlphaMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color1 v0.w
    dcl_texcoord v1.xy
    dcl_2d s0
    texld r0, v1, s0
    mul r0.w, r0.w, v0.w
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 4 instruction slots used (1 texture, 3 arithmetic)
#endif

const BYTE pBinary_FTexTGBatchEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      0,   0,  15, 160,   0,   0, 
    128, 191,   0,   0, 128,  63, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
     10,   0,   1, 128,   0,   0, 
      8, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   1,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   1,   0, 
    228, 144,   0,   8, 228, 160, 
      5,   0,   0,   3,   0,   0, 
      8, 128,   0,   0, 255, 128, 
      0,   0, 255, 144,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   0,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      0,   0,  85, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGBatchMul.hlsl.h /Vn
//    pBinary_FTexTGBatchMul D3D9/FTexTGBatchMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    texld r0, v0, s0
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 3 instruction slots used (1 texture, 2 arithmetic)
#endif

const BYTE pBinary_FTexTGBatchMul[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      0,   0,  15, 160,   0,   0, 
    128, 191,   0,   0, 128,  63, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 144,   0,   8, 228, 160, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0,   0, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   0,   0,  85, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGCxform.hlsl.h /Vn
//    pBinary_FTexTGCxform D3D9/FTexTGCxform.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   tex0         s0       1
//

    ps_3_0
    dcl_texcoord v0.xy
    dcl_2d s0
    texld r0, v0, s0
    mov r1, c1
    mad oC0, r0, r1, c0

// approximately 3 instruction slots used (1 texture, 2 arithmetic)
#endif

const BYTE pBinary_FTexTGCxform[] =
{
      0,   3, 255, 255, 254, 255, 
     50,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 147,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    140,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 118,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 124,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 116, 101, 
    120,  48,   0, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 144,   0,   8, 
    228, 160,   1,   0,   0,   2, 
      1,   0,  15, 128,   1,   0, 
    228, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      0,   0, 228, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGCxformEAlpha.hlsl.h /Vn
//    pBinary_FTexTGCxformEAlpha D3D9/FTexTGCxformEAlpha.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   tex0         s0       1
//

    ps_3_0
    dcl_color1 v0.w
    dcl_texcoord v1.xy
    dcl_2d s0
    texld r0, v1, s0
    mov r1, c1
    mad r0, r0, r1, c0
    mul oC0.w, r0.w, v0.w
    mov oC0.xyz, r0

// approximately 5 instruction slots used (1 texture, 4 arithmetic)
#endif

const BYTE pBinary_FTexTGCxformEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     50,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 147,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    140,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 118,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 124,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 116, 101, 
    120,  48,   0, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      0,   0,   8, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 228, 144,   0,   8, 
    228, 160,   1,   0,   0,   2, 
      1,   0,  15, 128,   1,   0, 
    228, 160,   4,   0,   0,   4, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      0,   0, 228, 160,   5,   0, 
      0,   3,   0,   8,   8, 128, 
      0,   0, 255, 128,   0,   0, 
    255, 144,   1,   0,   0,   2, 
      0,   8,   7, 128,   0,   0, 
    228, 128, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGCxformEAlphaMul.hlsl.h /Vn
//    pBinary_FTexTGCxformEAlphaMul D3D9/FTexTGCxformEAlphaMul.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   tex0         s0       1
//

    ps_3_0
    def c2, -1, 1, 0, 0
    dcl_color1 v0.w
    dcl_texcoord v1.xy
    dcl_2d s0
    texld r0, v1, s0
    mov r1, c1
    mad r0, r0, r1, c0
    mul r0.w, r0.w, v0.w
    add r1, r0, c2.x
    mad oC0, r0.w, r1, c2.y

// approximately 6 instruction slots used (1 texture, 5 arithmetic)
#endif

const BYTE pBinary_FTexTGCxformEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     50,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 147,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    140,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 118,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 124,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 116, 101, 
    120,  48,   0, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  81,   0, 
      0,   5,   2,   0,  15, 160, 
      0,   0, 128, 191,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      0,   0,   8, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 228, 144,   0,   8, 
    228, 160,   1,   0,   0,   2, 
      1,   0,  15, 128,   1,   0, 
    228, 160,   4,   0,   0,   4, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      0,   0, 228, 160,   5,   0, 
      0,   3,   0,   0,   8, 128, 
      0,   0, 255, 128,   0,   0, 
    255, 144,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   2,   0,   0, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   2,   0, 
     85, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGCxformMul.hlsl.h /Vn
//    pBinary_FTexTGCxformMul D3D9/FTexTGCxformMul.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   tex0         s0       1
//

    ps_3_0
    def c2, -1, 1, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    texld r0, v0, s0
    mov r1, c1
    mad r0, r0, r1, c0
    add r1, r0, c2.x
    mad oC0, r0.w, r1, c2.y

// approximately 5 instruction slots used (1 texture, 4 arithmetic)
#endif

const BYTE pBinary_FTexTGCxformMul[] =
{
      0,   3, 255, 255, 254, 255, 
     50,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 147,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    140,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 118,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 124,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 116, 101, 
    120,  48,   0, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  81,   0, 
      0,   5,   2,   0,  15, 160, 
      0,   0, 128, 191,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 144,   0,   8, 
    228, 160,   1,   0,   0,   2, 
      1,   0,  15, 128,   1,   0, 
    228, 160,   4,   0,   0,   4, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      0,   0, 228, 160,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   2,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      2,   0,  85, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGEAlpha.hlsl.h /Vn
//    pBinary_FTexTGEAlpha D3D9/FTexTGEAlpha.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    dcl_color1 v0.w
    dcl_texcoord v1.xy
    dcl_2d s0
    texld r0, v1, s0
    mul oC0.w, r0.w, v0.w
    mov oC0.xyz, r0

// approximately 3 instruction slots used (1 texture, 2 arithmetic)
#endif

const BYTE pBinary_FTexTGEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  31,   0,   0,   2, 
     10,   0,   1, 128,   0,   0, 
      8, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   1,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   1,   0, 
    228, 144,   0,   8, 228, 160, 
      5,   0,   0,   3,   0,   8, 
      8, 128,   0,   0, 255, 128, 
      0,   0, 255, 144,   1,   0, 
      0,   2,   0,   8,   7, 128, 
      0,   0, 228, 128, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGEAlphaMul.hlsl.h /Vn
//    pBinary_FTexTGEAlphaMul D3D9/FTexTGEAlphaMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color1 v0.w
    dcl_texcoord v1.xy
    dcl_2d s0
    texld r0, v1, s0
    mul r0.w, r0.w, v0.w
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 4 instruction slots used (1 texture, 3 arithmetic)
#endif

const BYTE pBinary_FTexTGEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      0,   0,  15, 160,   0,   0, 
    128, 191,   0,   0, 128,  63, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
     10,   0,   1, 128,   0,   0, 
      8, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   1,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   1,   0, 
    228, 144,   0,   8, 228, 160, 
      5,   0,   0,   3,   0,   0, 
      8, 128,   0,   0, 255, 128, 
      0,   0, 255, 144,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   0,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      0,   0,  85, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGMul.hlsl.h /Vn
//    pBinary_FTexTGMul D3D9/FTexTGMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    texld r0, v0, s0
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 3 instruction slots used (1 texture, 2 arithmetic)
#endif

const BYTE pBinary_FTexTGMul[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      0,   0,  15, 160,   0,   0, 
    128, 191,   0,   0, 128,  63, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 144,   0,   8, 228, 160, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0,   0, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   0,   0,  85, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FVertex.hlsl.h /Vn pBinary_FVertex
//    D3D9/FVertex.hlsl
//
    ps_3_0
    dcl_color_pp v0
    mov_pp oC0, v0

// approximately 1 instruction slot used
#endif

const BYTE pBinary_FVertex[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   1,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
      1,   0,   0,   2,   0,   8, 
     47, 128,   0,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FVertexBatch.hlsl.h /Vn
//    pBinary_FVertexBatch D3D9/FVertexBatch.hlsl
//
    ps_3_0
    dcl_color_pp v0
    mov_pp oC0, v0

// approximately 1 instruction slot used
#endif

const BYTE pBinary_FVertexBatch[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   1,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
      1,   0,   0,   2,   0,   8, 
     47, 128,   0,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FVertexBatchCxform.hlsl.h /Vn
//    pBinary_FVertexBatchCxform D3D9/FVertexBatchCxform.hlsl
//
    ps_3_0
    dcl_color_pp v0
    dcl_texcoord3 v1
    dcl_texcoord4 v2
    mov_pp r0, v0
    mov r1, v2
    mad oC0, r0, r1, v1

// approximately 3 instruction slots used
#endif

const BYTE pBinary_FVertexBatchCxform[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   1,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   2,   0,  15, 144, 
      1,   0,   0,   2,   0,   0, 
     47, 128,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   2,   0, 228, 144, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   1,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FVertexBatchCxformEAlpha.hlsl.h /Vn
//    pBinary_FVertexBatchCxformEAlpha D3D9/FVertexBatchCxformEAlpha.hlsl
//
    ps_3_0
    dcl_color_pp v0
    dcl_color1 v1.w
    dcl_texcoord3 v2
    dcl_texcoord4 v3
    mov_pp r0, v0
    mov r1, v3
    mad r0, r0, r1, v2
    mul oC0.w, r0.w, v1.w
    mov oC0.xyz, r0

// approximately 5 instruction slots used
#endif

const BYTE pBinary_FVertexBatchCxformEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   1,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,   8, 144, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   3,   0,  15, 144, 
      1,   0,   0,   2,   0,   0, 
     47, 128,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   3,   0, 228, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   2,   0, 
    228, 144,   5,   0,   0,   3, 
      0,   8,   8, 128,   0,   0, 
    255, 128,   1,   0, 255, 144, 
      1,   0,   0,   2,   0,   8, 
      7, 128,   0,   0, 228, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FVertexBatchCxformEAlphaMul.hlsl.h
//    /Vn pBinary_FVertexBatchCxformEAlphaMul
//    D3D9/FVertexBatchCxformEAlphaMul.hlsl
//
    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color_pp v0
    dcl_color1 v1.w
    dcl_texcoord3 v2
    dcl_texcoord4 v3
    mov_pp r0, v0
    mov r1, v3
    mad r0, r0, r1, v2
    mul r0.w, r0.w, v1.w
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 6 instruction slots used
#endif

const BYTE pBinary_FVertexBatchCxformEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   1,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,   0,   0, 
     15, 160,   0,   0, 128, 191, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,   8, 144, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   3,   0,  15, 144, 
      1,   0,   0,   2,   0,   0, 
     47, 128,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   3,   0, 228, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   2,   0, 
    228, 144,   5,   0,   0,   3, 
      0,   0,   8, 128,   0,   0, 
    255, 128,   1,   0, 255, 144, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0,   0, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   0,   0,  85, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FVertexBatchCxformMul.hlsl.h /Vn
//    pBinary_FVertexBatchCxformMul D3D9/FVertexBatchCxformMul.hlsl
//
    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color_pp v0
    dcl_texcoord3 v1
    dcl_texcoord4 v2
    mov_pp r0, v0
    mov r1, v2
    mad r0, r0, r1, v1
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 5 instruction slots used
#endif

const BYTE pBinary_FVertexBatchCxformMul[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   1,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,   0,   0, 
     15, 160,   0,   0, 128, 191, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   2,   0,  15, 144, 
      1,   0,   0,   2,   0,   0, 
     47, 128,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   2,   0, 228, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   1,   0, 
    228, 144,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   0,   0, 
     85, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FVertexBatchEAlpha.hlsl.h /Vn
//    pBinary_FVertexBatchEAlpha D3D9/FVertexBatchEAlpha.hlsl
//
    ps_3_0
    dcl_color_pp v0
    dcl_color1 v1.w
    mov_pp r0.w, v0.w
    mul oC0.w, r0.w, v1.w
    mov_pp oC0.xyz, v0

// approximately 3 instruction slots used
#endif

const BYTE pBinary_FVertexBatchEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   1,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,   8, 144, 
      1,   0,   0,   2,   0,   0, 
     40, 128,   0,   0, 255, 144, 
      5,   0,   0,   3,   0,   8, 
      8, 128,   0,   0, 255, 128, 
      1,   0, 255, 144,   1,   0, 
      0,   2,   0,   8,  39, 128, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FVertexBatchEAlphaMul.hlsl.h /Vn
//    pBinary_FVertexBatchEAlphaMul D3D9/FVertexBatchEAlphaMul.hlsl
//
    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color_pp v0
    dcl_color1 v1.w
    mov_pp r0.xyz, v0
    mov_pp r1.w, v0.w
    mul r0.w, r1.w, v1.w
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 5 instruction slots used
#endif

const BYTE pBinary_FVertexBatchEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   1,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,   0,   0, 
     15, 160,   0,   0, 128, 191, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,   8, 144, 
      1,   0,   0,   2,   0,   0, 
     39, 128,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     40, 128,   0,   0, 255, 144, 
      5,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      1,   0, 255, 144,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   0,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      0,   0,  85, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FVertexBatchMul.hlsl.h /Vn
//    pBinary_FVertexBatchMul D3D9/FVertexBatchMul.hlsl
//
    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color_pp v0
    add r0, c0.x, v0
    mad oC0, v0.w, r0, c0.y

// approximately 2 instruction slots used
#endif

const BYTE pBinary_FVertexBatchMul[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   1,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,   0,   0, 
     15, 160,   0,   0, 128, 191, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
      2,   0,   0,   3,   0,   0, 
     15, 128,   0,   0,   0, 160, 
      0,   0, 228, 144,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 144,   0,   0, 
    228, 128,   0,   0,  85, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FVertexCxform.hlsl.h /Vn
//    pBinary_FVertexCxform D3D9/FVertexCxform.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//

    ps_3_0
    dcl_color_pp v0
    mov r0, c1
    mad oC0, v0, r0, c0

// approximately 2 instruction slots used
#endif

const BYTE pBinary_FVertexCxform[] =
{
      0,   3, 255, 255, 254, 255, 
     40,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 105,   0, 
      0,   0,   0,   3, 255, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     98,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  76,   0, 
      0,   0,   0,   0,   0,   0, 
     92,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
     76,   0,   0,   0,   0,   0, 
      0,   0,  99, 120,  97, 100, 
    100,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,  99, 120, 109, 117, 
    108,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0, 171, 171, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
      1,   0,   0,   2,   0,   0, 
     15, 128,   1,   0, 228, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 228, 144, 
      0,   0, 228, 128,   0,   0, 
    228, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FVertexCxformEAlpha.hlsl.h /Vn
//    pBinary_FVertexCxformEAlpha D3D9/FVertexCxformEAlpha.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//

    ps_3_0
    dcl_color_pp v0
    dcl_color1 v1.w
    mov r0, c1
    mad r0, v0, r0, c0
    mul oC0.w, r0.w, v1.w
    mov oC0.xyz, r0

// approximately 4 instruction slots used
#endif

const BYTE pBinary_FVertexCxformEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     40,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 105,   0, 
      0,   0,   0,   3, 255, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     98,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  76,   0, 
      0,   0,   0,   0,   0,   0, 
     92,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
     76,   0,   0,   0,   0,   0, 
      0,   0,  99, 120,  97, 100, 
    100,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,  99, 120, 109, 117, 
    108,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0, 171, 171, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,   8, 144, 
      1,   0,   0,   2,   0,   0, 
     15, 128,   1,   0, 228, 160, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 144, 
      0,   0, 228, 128,   0,   0, 
    228, 160,   5,   0,   0,   3, 
      0,   8,   8, 128,   0,   0, 
    255, 128,   1,   0, 255, 144, 
      1,   0,   0,   2,   0,   8, 
      7, 128,   0,   0, 228, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FVertexCxformEAlphaMul.hlsl.h /Vn
//    pBinary_FVertexCxformEAlphaMul D3D9/FVertexCxformEAlphaMul.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//

    ps_3_0
    def c2, -1, 1, 0, 0
    dcl_color_pp v0
    dcl_color1 v1.w
    mov r0, c1
    mad r0, v0, r0, c0
    mul r0.w, r0.w, v1.w
    add r1, r0, c2.x
    mad oC0, r0.w, r1, c2.y

// approximately 5 instruction slots used
#endif

const BYTE pBinary_FVertexCxformEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     40,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 105,   0, 
      0,   0,   0,   3, 255, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     98,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  76,   0, 
      0,   0,   0,   0,   0,   0, 
     92,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
     76,   0,   0,   0,   0,   0, 
      0,   0,  99, 120,  97, 100, 
    100,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,  99, 120, 109, 117, 
    108,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0, 171, 171, 
     81,   0,   0,   5,   2,   0, 
     15, 160,   0,   0, 128, 191, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,   8, 144, 
      1,   0,   0,   2,   0,   0, 
     15, 128,   1,   0, 228, 160, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 144, 
      0,   0, 228, 128,   0,   0, 
    228, 160,   5,   0,   0,   3, 
      0,   0,   8, 128,   0,   0, 
    255, 128,   1,   0, 255, 144, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      2,   0,   0, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   2,   0,  85, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FVertexCxformMul.hlsl.h /Vn
//    pBinary_FVertexCxformMul D3D9/FVertexCxformMul.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//

    ps_3_0
    def c2, -1, 1, 0, 0
    dcl_color_pp v0
    mov r0, c1
    mad r0, v0, r0, c0
    add r1, r0, c2.x
    mad oC0, r0.w, r1, c2.y

// approximately 4 instruction slots used
#endif

const BYTE pBinary_FVertexCxformMul[] =
{
      0,   3, 255, 255, 254, 255, 
     40,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 105,   0, 
      0,   0,   0,   3, 255, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     98,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  76,   0, 
      0,   0,   0,   0,   0,   0, 
     92,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
     76,   0,   0,   0,   0,   0, 
      0,   0,  99, 120,  97, 100, 
    100,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,  99, 120, 109, 117, 
    108,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0, 171, 171, 
     81,   0,   0,   5,   2,   0, 
     15, 160,   0,   0, 128, 191, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
      1,   0,   0,   2,   0,   0, 
     15, 128,   1,   0, 228, 160, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 144, 
      0,   0, 228, 128,   0,   0, 
    228, 160,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   2,   0,   0, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   2,   0, 
     85, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FVertexEAlpha.hlsl.h /Vn
//    pBinary_FVertexEAlpha D3D9/FVertexEAlpha.hlsl
//
    ps_3_0
    dcl_color_pp v0
    dcl_color1 v1.w
    mov_pp r0.w, v0.w
    mul oC0.w, r0.w, v1.w
    mov_pp oC0.xyz, v0

// approximately 3 instruction slots used
#endif

const BYTE pBinary_FVertexEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   1,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,   8, 144, 
      1,   0,   0,   2,   0,   0, 
     40, 128,   0,   0, 255, 144, 
      5,   0,   0,   3,   0,   8, 
      8, 128,   0,   0, 255, 128, 
      1,   0, 255, 144,   1,   0, 
      0,   2,   0,   8,  39, 128, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FVertexEAlphaMul.hlsl.h /Vn
//    pBinary_FVertexEAlphaMul D3D9/FVertexEAlphaMul.hlsl
//
    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color_pp v0
    dcl_color1 v1.w
    mov_pp r0.xyz, v0
    mov_pp r1.w, v0.w
    mul r0.w, r1.w, v1.w
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 5 instruction slots used
#endif

const BYTE pBinary_FVertexEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   1,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,   0,   0, 
     15, 160,   0,   0, 128, 191, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,   8, 144, 
      1,   0,   0,   2,   0,   0, 
     39, 128,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     40, 128,   0,   0, 255, 144, 
      5,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      1,   0, 255, 144,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   0,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      0,   0,  85, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FVertexMul.hlsl.h /Vn
//    pBinary_FVertexMul D3D9/FVertexMul.hlsl
//
    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color_pp v0
    add r0, c0.x, v0
    mad oC0, v0.w, r0, c0.y

// approximately 2 instruction slots used
#endif

const BYTE pBinary_FVertexMul[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   1,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,   0,   0, 
     15, 160,   0,   0, 128, 191, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
      2,   0,   0,   3,   0,   0, 
     15, 128,   0,   0,   0, 160, 
      0,   0, 228, 144,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 144,   0,   0, 
    228, 128,   0,   0,  85, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGTexTG.hlsl.h /Vn
//    pBinary_FTexTGTexTG D3D9/FTexTGTexTG.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//   sampler2D tex1;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//   tex1         s1       1
//

    ps_3_0
    dcl_color1 v0.x
    dcl_texcoord v1.xy
    dcl_texcoord1 v2.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v1, s0
    texld r1, v2, s1
    add r0, r0, -r1
    mad oC0, v0.x, r0, r1

// approximately 4 instruction slots used (2 texture, 2 arithmetic)
#endif

const BYTE pBinary_FTexTGTexTG[] =
{
      0,   3, 255, 255, 254, 255, 
     44,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 123,   0, 
      0,   0,   0,   3, 255, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    116,   0,   0,   0,  68,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  76,   0, 
      0,   0,   0,   0,   0,   0, 
     92,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    100,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  48, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  49, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      0,   0,   1, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 228, 144,   0,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   2,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 129,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0,   0, 144,   0,   0, 
    228, 128,   1,   0, 228, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGTexTGBatch.hlsl.h /Vn
//    pBinary_FTexTGTexTGBatch D3D9/FTexTGTexTGBatch.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//   sampler2D tex1;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//   tex1         s1       1
//

    ps_3_0
    dcl_color1 v0.x
    dcl_texcoord v1.xy
    dcl_texcoord1 v2.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v1, s0
    texld r1, v2, s1
    add r0, r0, -r1
    mad oC0, v0.x, r0, r1

// approximately 4 instruction slots used (2 texture, 2 arithmetic)
#endif

const BYTE pBinary_FTexTGTexTGBatch[] =
{
      0,   3, 255, 255, 254, 255, 
     44,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 123,   0, 
      0,   0,   0,   3, 255, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    116,   0,   0,   0,  68,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  76,   0, 
      0,   0,   0,   0,   0,   0, 
     92,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    100,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  48, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  49, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      0,   0,   1, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 228, 144,   0,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   2,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 129,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0,   0, 144,   0,   0, 
    228, 128,   1,   0, 228, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGTexTGBatchCxform.hlsl.h /Vn
//    pBinary_FTexTGTexTGBatchCxform D3D9/FTexTGTexTGBatchCxform.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//   sampler2D tex1;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//   tex1         s1       1
//

    ps_3_0
    dcl_color1 v0.x
    dcl_texcoord3 v1
    dcl_texcoord4 v2
    dcl_texcoord v3.xy
    dcl_texcoord1 v4.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v3, s0
    texld r1, v4, s1
    lrp r2, v0.x, r0, r1
    mov r0, v2
    mad oC0, r2, r0, v1

// approximately 5 instruction slots used (2 texture, 3 arithmetic)
#endif

const BYTE pBinary_FTexTGTexTGBatchCxform[] =
{
      0,   3, 255, 255, 254, 255, 
     44,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 123,   0, 
      0,   0,   0,   3, 255, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    116,   0,   0,   0,  68,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  76,   0, 
      0,   0,   0,   0,   0,   0, 
     92,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    100,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  48, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  49, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      0,   0,   1, 144,  31,   0, 
      0,   2,   5,   0,   3, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   4, 128, 
      2,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      3,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      4,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      3,   0, 228, 144,   0,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   4,   0, 
    228, 144,   1,   8, 228, 160, 
     18,   0,   0,   4,   2,   0, 
     15, 128,   0,   0,   0, 144, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   1,   0,   0,   2, 
      0,   0,  15, 128,   2,   0, 
    228, 144,   4,   0,   0,   4, 
      0,   8,  15, 128,   2,   0, 
    228, 128,   0,   0, 228, 128, 
      1,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGTexTGBatchCxformEAlpha.hlsl.h
//    /Vn pBinary_FTexTGTexTGBatchCxformEAlpha
//    D3D9/FTexTGTexTGBatchCxformEAlpha.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//   sampler2D tex1;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//   tex1         s1       1
//

    ps_3_0
    dcl_color1 v0.xw
    dcl_texcoord3 v1
    dcl_texcoord4 v2
    dcl_texcoord v3.xy
    dcl_texcoord1 v4.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v3, s0
    texld r1, v4, s1
    lrp r2, v0.x, r0, r1
    mov r0, v2
    mad r0, r2, r0, v1
    mul oC0.w, r0.w, v0.w
    mov oC0.xyz, r0

// approximately 7 instruction slots used (2 texture, 5 arithmetic)
#endif

const BYTE pBinary_FTexTGTexTGBatchCxformEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     44,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 123,   0, 
      0,   0,   0,   3, 255, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    116,   0,   0,   0,  68,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  76,   0, 
      0,   0,   0,   0,   0,   0, 
     92,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    100,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  48, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  49, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      0,   0,   9, 144,  31,   0, 
      0,   2,   5,   0,   3, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   4, 128, 
      2,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      3,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      4,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      3,   0, 228, 144,   0,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   4,   0, 
    228, 144,   1,   8, 228, 160, 
     18,   0,   0,   4,   2,   0, 
     15, 128,   0,   0,   0, 144, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   1,   0,   0,   2, 
      0,   0,  15, 128,   2,   0, 
    228, 144,   4,   0,   0,   4, 
      0,   0,  15, 128,   2,   0, 
    228, 128,   0,   0, 228, 128, 
      1,   0, 228, 144,   5,   0, 
      0,   3,   0,   8,   8, 128, 
      0,   0, 255, 128,   0,   0, 
    255, 144,   1,   0,   0,   2, 
      0,   8,   7, 128,   0,   0, 
    228, 128, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh
//    D3D9/FTexTGTexTGBatchCxformEAlphaMul.hlsl.h /Vn
//    pBinary_FTexTGTexTGBatchCxformEAlphaMul
//    D3D9/FTexTGTexTGBatchCxformEAlphaMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//   sampler2D tex1;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//   tex1         s1       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color1 v0.xw
    dcl_texcoord3 v1
    dcl_texcoord4 v2
    dcl_texcoord v3.xy
    dcl_texcoord1 v4.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v3, s0
    texld r1, v4, s1
    lrp r2, v0.x, r0, r1
    mov r0, v2
    mad r0, r2, r0, v1
    mul r0.w, r0.w, v0.w
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 8 instruction slots used (2 texture, 6 arithmetic)
#endif

const BYTE pBinary_FTexTGTexTGBatchCxformEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     44,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 123,   0, 
      0,   0,   0,   3, 255, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    116,   0,   0,   0,  68,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  76,   0, 
      0,   0,   0,   0,   0,   0, 
     92,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    100,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  48, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  49, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128, 191,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      0,   0,   9, 144,  31,   0, 
      0,   2,   5,   0,   3, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   4, 128, 
      2,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      3,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      4,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      3,   0, 228, 144,   0,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   4,   0, 
    228, 144,   1,   8, 228, 160, 
     18,   0,   0,   4,   2,   0, 
     15, 128,   0,   0,   0, 144, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   1,   0,   0,   2, 
      0,   0,  15, 128,   2,   0, 
    228, 144,   4,   0,   0,   4, 
      0,   0,  15, 128,   2,   0, 
    228, 128,   0,   0, 228, 128, 
      1,   0, 228, 144,   5,   0, 
      0,   3,   0,   0,   8, 128, 
      0,   0, 255, 128,   0,   0, 
    255, 144,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   0,   0, 
     85, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGTexTGBatchCxformMul.hlsl.h
//    /Vn pBinary_FTexTGTexTGBatchCxformMul
//    D3D9/FTexTGTexTGBatchCxformMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//   sampler2D tex1;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//   tex1         s1       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color1 v0.x
    dcl_texcoord3 v1
    dcl_texcoord4 v2
    dcl_texcoord v3.xy
    dcl_texcoord1 v4.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v3, s0
    texld r1, v4, s1
    lrp r2, v0.x, r0, r1
    mov r0, v2
    mad r0, r2, r0, v1
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 7 instruction slots used (2 texture, 5 arithmetic)
#endif

const BYTE pBinary_FTexTGTexTGBatchCxformMul[] =
{
      0,   3, 255, 255, 254, 255, 
     44,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 123,   0, 
      0,   0,   0,   3, 255, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    116,   0,   0,   0,  68,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  76,   0, 
      0,   0,   0,   0,   0,   0, 
     92,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    100,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  48, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  49, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128, 191,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      0,   0,   1, 144,  31,   0, 
      0,   2,   5,   0,   3, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   4, 128, 
      2,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      3,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      4,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      3,   0, 228, 144,   0,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   4,   0, 
    228, 144,   1,   8, 228, 160, 
     18,   0,   0,   4,   2,   0, 
     15, 128,   0,   0,   0, 144, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   1,   0,   0,   2, 
      0,   0,  15, 128,   2,   0, 
    228, 144,   4,   0,   0,   4, 
      0,   0,  15, 128,   2,   0, 
    228, 128,   0,   0, 228, 128, 
      1,   0, 228, 144,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   0,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      0,   0,  85, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGTexTGBatchEAlpha.hlsl.h /Vn
//    pBinary_FTexTGTexTGBatchEAlpha D3D9/FTexTGTexTGBatchEAlpha.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//   sampler2D tex1;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//   tex1         s1       1
//

    ps_3_0
    dcl_color1 v0.xw
    dcl_texcoord v1.xy
    dcl_texcoord1 v2.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v1, s0
    texld r1, v2, s1
    lrp r2, v0.x, r0, r1
    mul oC0.w, r2.w, v0.w
    mov oC0.xyz, r2

// approximately 5 instruction slots used (2 texture, 3 arithmetic)
#endif

const BYTE pBinary_FTexTGTexTGBatchEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     44,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 123,   0, 
      0,   0,   0,   3, 255, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    116,   0,   0,   0,  68,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  76,   0, 
      0,   0,   0,   0,   0,   0, 
     92,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    100,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  48, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  49, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      0,   0,   9, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 228, 144,   0,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   2,   0, 
    228, 144,   1,   8, 228, 160, 
     18,   0,   0,   4,   2,   0, 
     15, 128,   0,   0,   0, 144, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   5,   0,   0,   3, 
      0,   8,   8, 128,   2,   0, 
    255, 128,   0,   0, 255, 144, 
      1,   0,   0,   2,   0,   8, 
      7, 128,   2,   0, 228, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGTexTGBatchEAlphaMul.hlsl.h
//    /Vn pBinary_FTexTGTexTGBatchEAlphaMul
//    D3D9/FTexTGTexTGBatchEAlphaMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//   sampler2D tex1;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//   tex1         s1       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color1 v0.xw
    dcl_texcoord v1.xy
    dcl_texcoord1 v2.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v1, s0
    texld r1, v2, s1
    lrp r2, v0.x, r0, r1
    mul r2.w, r2.w, v0.w
    add r0, r2, c0.x
    mad oC0, r2.w, r0, c0.y

// approximately 6 instruction slots used (2 texture, 4 arithmetic)
#endif

const BYTE pBinary_FTexTGTexTGBatchEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     44,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 123,   0, 
      0,   0,   0,   3, 255, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    116,   0,   0,   0,  68,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  76,   0, 
      0,   0,   0,   0,   0,   0, 
     92,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    100,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  48, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  49, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128, 191,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      0,   0,   9, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 228, 144,   0,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   2,   0, 
    228, 144,   1,   8, 228, 160, 
     18,   0,   0,   4,   2,   0, 
     15, 128,   0,   0,   0, 144, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   5,   0,   0,   3, 
      2,   0,   8, 128,   2,   0, 
    255, 128,   0,   0, 255, 144, 
      2,   0,   0,   3,   0,   0, 
     15, 128,   2,   0, 228, 128, 
      0,   0,   0, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      2,   0, 255, 128,   0,   0, 
    228, 128,   0,   0,  85, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGTexTGBatchMul.hlsl.h /Vn
//    pBinary_FTexTGTexTGBatchMul D3D9/FTexTGTexTGBatchMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//   sampler2D tex1;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//   tex1         s1       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color1 v0.x
    dcl_texcoord v1.xy
    dcl_texcoord1 v2.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v1, s0
    texld r1, v2, s1
    lrp r2, v0.x, r0, r1
    add r0, r2, c0.x
    mad oC0, r2.w, r0, c0.y

// approximately 5 instruction slots used (2 texture, 3 arithmetic)
#endif

const BYTE pBinary_FTexTGTexTGBatchMul[] =
{
      0,   3, 255, 255, 254, 255, 
     44,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 123,   0, 
      0,   0,   0,   3, 255, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    116,   0,   0,   0,  68,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  76,   0, 
      0,   0,   0,   0,   0,   0, 
     92,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    100,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  48, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  49, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128, 191,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      0,   0,   1, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 228, 144,   0,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   2,   0, 
    228, 144,   1,   8, 228, 160, 
     18,   0,   0,   4,   2,   0, 
     15, 128,   0,   0,   0, 144, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   2,   0,   0,   3, 
      0,   0,  15, 128,   2,   0, 
    228, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   2,   0, 255, 128, 
      0,   0, 228, 128,   0,   0, 
     85, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGTexTGCxform.hlsl.h /Vn
//    pBinary_FTexTGTexTGCxform D3D9/FTexTGTexTGCxform.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   sampler2D tex0;
//   sampler2D tex1;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   tex0         s0       1
//   tex1         s1       1
//

    ps_3_0
    dcl_color1 v0.x
    dcl_texcoord v1.xy
    dcl_texcoord1 v2.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v1, s0
    texld r1, v2, s1
    lrp r2, v0.x, r0, r1
    mov r0, c1
    mad oC0, r2, r0, c0

// approximately 5 instruction slots used (2 texture, 3 arithmetic)
#endif

const BYTE pBinary_FTexTGTexTGCxform[] =
{
      0,   3, 255, 255, 254, 255, 
     61,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 191,   0, 
      0,   0,   0,   3, 255, 255, 
      4,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    184,   0,   0,   0, 108,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 116,   0, 
      0,   0,   0,   0,   0,   0, 
    132,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    116,   0,   0,   0,   0,   0, 
      0,   0, 138,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 160,   0, 
      0,   0,   3,   0,   1,   0, 
      1,   0,   6,   0, 168,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120,  97, 100, 100,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120, 109, 117, 108,   0, 
    116, 101, 120,  48,   0, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  49,   0, 171, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,   1, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 144, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,   3, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   0,   8,  15, 160, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   1,   8,  15, 160, 
     66,   0,   0,   3,   0,   0, 
     15, 128,   1,   0, 228, 144, 
      0,   8, 228, 160,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      2,   0, 228, 144,   1,   8, 
    228, 160,  18,   0,   0,   4, 
      2,   0,  15, 128,   0,   0, 
      0, 144,   0,   0, 228, 128, 
      1,   0, 228, 128,   1,   0, 
      0,   2,   0,   0,  15, 128, 
      1,   0, 228, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      2,   0, 228, 128,   0,   0, 
    228, 128,   0,   0, 228, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGTexTGCxformEAlpha.hlsl.h /Vn
//    pBinary_FTexTGTexTGCxformEAlpha D3D9/FTexTGTexTGCxformEAlpha.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   sampler2D tex0;
//   sampler2D tex1;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   tex0         s0       1
//   tex1         s1       1
//

    ps_3_0
    dcl_color1 v0.xw
    dcl_texcoord v1.xy
    dcl_texcoord1 v2.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v1, s0
    texld r1, v2, s1
    lrp r2, v0.x, r0, r1
    mov r0, c1
    mad r0, r2, r0, c0
    mul oC0.w, r0.w, v0.w
    mov oC0.xyz, r0

// approximately 7 instruction slots used (2 texture, 5 arithmetic)
#endif

const BYTE pBinary_FTexTGTexTGCxformEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     61,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 191,   0, 
      0,   0,   0,   3, 255, 255, 
      4,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    184,   0,   0,   0, 108,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 116,   0, 
      0,   0,   0,   0,   0,   0, 
    132,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    116,   0,   0,   0,   0,   0, 
      0,   0, 138,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 160,   0, 
      0,   0,   3,   0,   1,   0, 
      1,   0,   6,   0, 168,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120,  97, 100, 100,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120, 109, 117, 108,   0, 
    116, 101, 120,  48,   0, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  49,   0, 171, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,   9, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 144, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,   3, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   0,   8,  15, 160, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   1,   8,  15, 160, 
     66,   0,   0,   3,   0,   0, 
     15, 128,   1,   0, 228, 144, 
      0,   8, 228, 160,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      2,   0, 228, 144,   1,   8, 
    228, 160,  18,   0,   0,   4, 
      2,   0,  15, 128,   0,   0, 
      0, 144,   0,   0, 228, 128, 
      1,   0, 228, 128,   1,   0, 
      0,   2,   0,   0,  15, 128, 
      1,   0, 228, 160,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      2,   0, 228, 128,   0,   0, 
    228, 128,   0,   0, 228, 160, 
      5,   0,   0,   3,   0,   8, 
      8, 128,   0,   0, 255, 128, 
      0,   0, 255, 144,   1,   0, 
      0,   2,   0,   8,   7, 128, 
      0,   0, 228, 128, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGTexTGCxformEAlphaMul.hlsl.h
//    /Vn pBinary_FTexTGTexTGCxformEAlphaMul
//    D3D9/FTexTGTexTGCxformEAlphaMul.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   sampler2D tex0;
//   sampler2D tex1;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   tex0         s0       1
//   tex1         s1       1
//

    ps_3_0
    def c2, -1, 1, 0, 0
    dcl_color1 v0.xw
    dcl_texcoord v1.xy
    dcl_texcoord1 v2.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v1, s0
    texld r1, v2, s1
    lrp r2, v0.x, r0, r1
    mov r0, c1
    mad r0, r2, r0, c0
    mul r0.w, r0.w, v0.w
    add r1, r0, c2.x
    mad oC0, r0.w, r1, c2.y

// approximately 8 instruction slots used (2 texture, 6 arithmetic)
#endif

const BYTE pBinary_FTexTGTexTGCxformEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     61,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 191,   0, 
      0,   0,   0,   3, 255, 255, 
      4,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    184,   0,   0,   0, 108,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 116,   0, 
      0,   0,   0,   0,   0,   0, 
    132,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    116,   0,   0,   0,   0,   0, 
      0,   0, 138,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 160,   0, 
      0,   0,   3,   0,   1,   0, 
      1,   0,   6,   0, 168,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120,  97, 100, 100,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120, 109, 117, 108,   0, 
    116, 101, 120,  48,   0, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  49,   0, 171, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,   2,   0, 
     15, 160,   0,   0, 128, 191, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,   9, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 144, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,   3, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   0,   8,  15, 160, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   1,   8,  15, 160, 
     66,   0,   0,   3,   0,   0, 
     15, 128,   1,   0, 228, 144, 
      0,   8, 228, 160,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      2,   0, 228, 144,   1,   8, 
    228, 160,  18,   0,   0,   4, 
      2,   0,  15, 128,   0,   0, 
      0, 144,   0,   0, 228, 128, 
      1,   0, 228, 128,   1,   0, 
      0,   2,   0,   0,  15, 128, 
      1,   0, 228, 160,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      2,   0, 228, 128,   0,   0, 
    228, 128,   0,   0, 228, 160, 
      5,   0,   0,   3,   0,   0, 
      8, 128,   0,   0, 255, 128, 
      0,   0, 255, 144,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   2,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      2,   0,  85, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGTexTGCxformMul.hlsl.h /Vn
//    pBinary_FTexTGTexTGCxformMul D3D9/FTexTGTexTGCxformMul.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   sampler2D tex0;
//   sampler2D tex1;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   tex0         s0       1
//   tex1         s1       1
//

    ps_3_0
    def c2, -1, 1, 0, 0
    dcl_color1 v0.x
    dcl_texcoord v1.xy
    dcl_texcoord1 v2.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v1, s0
    texld r1, v2, s1
    lrp r2, v0.x, r0, r1
    mov r0, c1
    mad r0, r2, r0, c0
    add r1, r0, c2.x
    mad oC0, r0.w, r1, c2.y

// approximately 7 instruction slots used (2 texture, 5 arithmetic)
#endif

const BYTE pBinary_FTexTGTexTGCxformMul[] =
{
      0,   3, 255, 255, 254, 255, 
     61,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 191,   0, 
      0,   0,   0,   3, 255, 255, 
      4,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    184,   0,   0,   0, 108,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 116,   0, 
      0,   0,   0,   0,   0,   0, 
    132,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    116,   0,   0,   0,   0,   0, 
      0,   0, 138,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 160,   0, 
      0,   0,   3,   0,   1,   0, 
      1,   0,   6,   0, 168,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120,  97, 100, 100,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120, 109, 117, 108,   0, 
    116, 101, 120,  48,   0, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  49,   0, 171, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,   2,   0, 
     15, 160,   0,   0, 128, 191, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,   1, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 144, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,   3, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   0,   8,  15, 160, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   1,   8,  15, 160, 
     66,   0,   0,   3,   0,   0, 
     15, 128,   1,   0, 228, 144, 
      0,   8, 228, 160,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      2,   0, 228, 144,   1,   8, 
    228, 160,  18,   0,   0,   4, 
      2,   0,  15, 128,   0,   0, 
      0, 144,   0,   0, 228, 128, 
      1,   0, 228, 128,   1,   0, 
      0,   2,   0,   0,  15, 128, 
      1,   0, 228, 160,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      2,   0, 228, 128,   0,   0, 
    228, 128,   0,   0, 228, 160, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      2,   0,   0, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   2,   0,  85, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGTexTGEAlpha.hlsl.h /Vn
//    pBinary_FTexTGTexTGEAlpha D3D9/FTexTGTexTGEAlpha.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//   sampler2D tex1;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//   tex1         s1       1
//

    ps_3_0
    dcl_color1 v0.xw
    dcl_texcoord v1.xy
    dcl_texcoord1 v2.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v1, s0
    texld r1, v2, s1
    lrp r2, v0.x, r0, r1
    mul oC0.w, r2.w, v0.w
    mov oC0.xyz, r2

// approximately 5 instruction slots used (2 texture, 3 arithmetic)
#endif

const BYTE pBinary_FTexTGTexTGEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     44,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 123,   0, 
      0,   0,   0,   3, 255, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    116,   0,   0,   0,  68,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  76,   0, 
      0,   0,   0,   0,   0,   0, 
     92,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    100,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  48, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  49, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      0,   0,   9, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 228, 144,   0,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   2,   0, 
    228, 144,   1,   8, 228, 160, 
     18,   0,   0,   4,   2,   0, 
     15, 128,   0,   0,   0, 144, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   5,   0,   0,   3, 
      0,   8,   8, 128,   2,   0, 
    255, 128,   0,   0, 255, 144, 
      1,   0,   0,   2,   0,   8, 
      7, 128,   2,   0, 228, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGTexTGEAlphaMul.hlsl.h /Vn
//    pBinary_FTexTGTexTGEAlphaMul D3D9/FTexTGTexTGEAlphaMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//   sampler2D tex1;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//   tex1         s1       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color1 v0.xw
    dcl_texcoord v1.xy
    dcl_texcoord1 v2.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v1, s0
    texld r1, v2, s1
    lrp r2, v0.x, r0, r1
    mul r2.w, r2.w, v0.w
    add r0, r2, c0.x
    mad oC0, r2.w, r0, c0.y

// approximately 6 instruction slots used (2 texture, 4 arithmetic)
#endif

const BYTE pBinary_FTexTGTexTGEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     44,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 123,   0, 
      0,   0,   0,   3, 255, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    116,   0,   0,   0,  68,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  76,   0, 
      0,   0,   0,   0,   0,   0, 
     92,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    100,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  48, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  49, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128, 191,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      0,   0,   9, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 228, 144,   0,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   2,   0, 
    228, 144,   1,   8, 228, 160, 
     18,   0,   0,   4,   2,   0, 
     15, 128,   0,   0,   0, 144, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   5,   0,   0,   3, 
      2,   0,   8, 128,   2,   0, 
    255, 128,   0,   0, 255, 144, 
      2,   0,   0,   3,   0,   0, 
     15, 128,   2,   0, 228, 128, 
      0,   0,   0, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      2,   0, 255, 128,   0,   0, 
    228, 128,   0,   0,  85, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGTexTGMul.hlsl.h /Vn
//    pBinary_FTexTGTexTGMul D3D9/FTexTGTexTGMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//   sampler2D tex1;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//   tex1         s1       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color1 v0.x
    dcl_texcoord v1.xy
    dcl_texcoord1 v2.xy
    dcl_2d s0
    dcl_2d s1
    texld r0, v1, s0
    texld r1, v2, s1
    lrp r2, v0.x, r0, r1
    add r0, r2, c0.x
    mad oC0, r2.w, r0, c0.y

// approximately 5 instruction slots used (2 texture, 3 arithmetic)
#endif

const BYTE pBinary_FTexTGTexTGMul[] =
{
      0,   3, 255, 255, 254, 255, 
     44,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 123,   0, 
      0,   0,   0,   3, 255, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    116,   0,   0,   0,  68,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  76,   0, 
      0,   0,   0,   0,   0,   0, 
     92,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    100,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  48, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  49, 
      0, 171, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  81,   0, 
      0,   5,   0,   0,  15, 160, 
      0,   0, 128, 191,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      0,   0,   1, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   5,   0,   1, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 228, 144,   0,   8, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   2,   0, 
    228, 144,   1,   8, 228, 160, 
     18,   0,   0,   4,   2,   0, 
     15, 128,   0,   0,   0, 144, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   2,   0,   0,   3, 
      0,   0,  15, 128,   2,   0, 
    228, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   2,   0, 255, 128, 
      0,   0, 228, 128,   0,   0, 
     85, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGVertex.hlsl.h /Vn
//    pBinary_FTexTGVertex D3D9/FTexTGVertex.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    dcl_color_pp v0
    dcl_color1 v1.x
    dcl_texcoord v2.xy
    dcl_2d s0
    texld r0, v2, s0
    add r0, r0, -v0
    mov_pp r1, v0
    mad oC0, v1.x, r0, r1

// approximately 4 instruction slots used (1 texture, 3 arithmetic)
#endif

const BYTE pBinary_FTexTGVertex[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  31,   0,   0,   2, 
     10,   0,   0, 128,   0,   0, 
     47, 144,  31,   0,   0,   2, 
     10,   0,   1, 128,   1,   0, 
      1, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   2,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   2,   0, 
    228, 144,   0,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0, 228, 145,   1,   0, 
      0,   2,   1,   0,  47, 128, 
      0,   0, 228, 144,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      1,   0,   0, 144,   0,   0, 
    228, 128,   1,   0, 228, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGVertexBatch.hlsl.h /Vn
//    pBinary_FTexTGVertexBatch D3D9/FTexTGVertexBatch.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    dcl_color_pp v0
    dcl_color1 v1.x
    dcl_texcoord v2.xy
    dcl_2d s0
    texld r0, v2, s0
    add r0, r0, -v0
    mov_pp r1, v0
    mad oC0, v1.x, r0, r1

// approximately 4 instruction slots used (1 texture, 3 arithmetic)
#endif

const BYTE pBinary_FTexTGVertexBatch[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  31,   0,   0,   2, 
     10,   0,   0, 128,   0,   0, 
     47, 144,  31,   0,   0,   2, 
     10,   0,   1, 128,   1,   0, 
      1, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   2,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   2,   0, 
    228, 144,   0,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0, 228, 145,   1,   0, 
      0,   2,   1,   0,  47, 128, 
      0,   0, 228, 144,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      1,   0,   0, 144,   0,   0, 
    228, 128,   1,   0, 228, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGVertexBatchCxform.hlsl.h /Vn
//    pBinary_FTexTGVertexBatchCxform D3D9/FTexTGVertexBatchCxform.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    dcl_color_pp v0
    dcl_color1 v1.x
    dcl_texcoord3 v2
    dcl_texcoord4 v3
    dcl_texcoord v4.xy
    dcl_2d s0
    texld r0, v4, s0
    add r0, r0, -v0
    mov_pp r1, v0
    mad r0, v1.x, r0, r1
    mov r1, v3
    mad oC0, r0, r1, v2

// approximately 6 instruction slots used (1 texture, 5 arithmetic)
#endif

const BYTE pBinary_FTexTGVertexBatchCxform[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  31,   0,   0,   2, 
     10,   0,   0, 128,   0,   0, 
     47, 144,  31,   0,   0,   2, 
     10,   0,   1, 128,   1,   0, 
      1, 144,  31,   0,   0,   2, 
      5,   0,   3, 128,   2,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   4, 128,   3,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   4,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   4,   0, 
    228, 144,   0,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0, 228, 145,   1,   0, 
      0,   2,   1,   0,  47, 128, 
      0,   0, 228, 144,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      1,   0,   0, 144,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   3,   0, 228, 144, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   2,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh
//    D3D9/FTexTGVertexBatchCxformEAlpha.hlsl.h /Vn
//    pBinary_FTexTGVertexBatchCxformEAlpha
//    D3D9/FTexTGVertexBatchCxformEAlpha.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    dcl_color_pp v0
    dcl_color1 v1.xw
    dcl_texcoord3 v2
    dcl_texcoord4 v3
    dcl_texcoord v4.xy
    dcl_2d s0
    texld r0, v4, s0
    add r0, r0, -v0
    mov_pp r1, v0
    mad r0, v1.x, r0, r1
    mov r1, v3
    mad r0, r0, r1, v2
    mul oC0.w, r0.w, v1.w
    mov oC0.xyz, r0

// approximately 8 instruction slots used (1 texture, 7 arithmetic)
#endif

const BYTE pBinary_FTexTGVertexBatchCxformEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  31,   0,   0,   2, 
     10,   0,   0, 128,   0,   0, 
     47, 144,  31,   0,   0,   2, 
     10,   0,   1, 128,   1,   0, 
      9, 144,  31,   0,   0,   2, 
      5,   0,   3, 128,   2,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   4, 128,   3,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   4,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   4,   0, 
    228, 144,   0,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0, 228, 145,   1,   0, 
      0,   2,   1,   0,  47, 128, 
      0,   0, 228, 144,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      1,   0,   0, 144,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   3,   0, 228, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   2,   0, 
    228, 144,   5,   0,   0,   3, 
      0,   8,   8, 128,   0,   0, 
    255, 128,   1,   0, 255, 144, 
      1,   0,   0,   2,   0,   8, 
      7, 128,   0,   0, 228, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh
//    D3D9/FTexTGVertexBatchCxformEAlphaMul.hlsl.h /Vn
//    pBinary_FTexTGVertexBatchCxformEAlphaMul
//    D3D9/FTexTGVertexBatchCxformEAlphaMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color_pp v0
    dcl_color1 v1.xw
    dcl_texcoord3 v2
    dcl_texcoord4 v3
    dcl_texcoord v4.xy
    dcl_2d s0
    texld r0, v4, s0
    add r0, r0, -v0
    mov_pp r1, v0
    mad r0, v1.x, r0, r1
    mov r1, v3
    mad r0, r0, r1, v2
    mul r0.w, r0.w, v1.w
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 9 instruction slots used (1 texture, 8 arithmetic)
#endif

const BYTE pBinary_FTexTGVertexBatchCxformEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      0,   0,  15, 160,   0,   0, 
    128, 191,   0,   0, 128,  63, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
     10,   0,   0, 128,   0,   0, 
     47, 144,  31,   0,   0,   2, 
     10,   0,   1, 128,   1,   0, 
      9, 144,  31,   0,   0,   2, 
      5,   0,   3, 128,   2,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   4, 128,   3,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   4,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   4,   0, 
    228, 144,   0,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0, 228, 145,   1,   0, 
      0,   2,   1,   0,  47, 128, 
      0,   0, 228, 144,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      1,   0,   0, 144,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   3,   0, 228, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   2,   0, 
    228, 144,   5,   0,   0,   3, 
      0,   0,   8, 128,   0,   0, 
    255, 128,   1,   0, 255, 144, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0,   0, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   0,   0,  85, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGVertexBatchCxformMul.hlsl.h
//    /Vn pBinary_FTexTGVertexBatchCxformMul
//    D3D9/FTexTGVertexBatchCxformMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color_pp v0
    dcl_color1 v1.x
    dcl_texcoord3 v2
    dcl_texcoord4 v3
    dcl_texcoord v4.xy
    dcl_2d s0
    texld r0, v4, s0
    add r0, r0, -v0
    mov_pp r1, v0
    mad r0, v1.x, r0, r1
    mov r1, v3
    mad r0, r0, r1, v2
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 8 instruction slots used (1 texture, 7 arithmetic)
#endif

const BYTE pBinary_FTexTGVertexBatchCxformMul[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      0,   0,  15, 160,   0,   0, 
    128, 191,   0,   0, 128,  63, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
     10,   0,   0, 128,   0,   0, 
     47, 144,  31,   0,   0,   2, 
     10,   0,   1, 128,   1,   0, 
      1, 144,  31,   0,   0,   2, 
      5,   0,   3, 128,   2,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   4, 128,   3,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   4,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   4,   0, 
    228, 144,   0,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0, 228, 145,   1,   0, 
      0,   2,   1,   0,  47, 128, 
      0,   0, 228, 144,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      1,   0,   0, 144,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   3,   0, 228, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   2,   0, 
    228, 144,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   0,   0, 
     85, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGVertexBatchEAlpha.hlsl.h /Vn
//    pBinary_FTexTGVertexBatchEAlpha D3D9/FTexTGVertexBatchEAlpha.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    dcl_color_pp v0
    dcl_color1 v1.xw
    dcl_texcoord v2.xy
    dcl_2d s0
    texld r0, v2, s0
    add r0, r0, -v0
    mov_pp r1, v0
    mad r0, v1.x, r0, r1
    mul oC0.w, r0.w, v1.w
    mov oC0.xyz, r0

// approximately 6 instruction slots used (1 texture, 5 arithmetic)
#endif

const BYTE pBinary_FTexTGVertexBatchEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  31,   0,   0,   2, 
     10,   0,   0, 128,   0,   0, 
     47, 144,  31,   0,   0,   2, 
     10,   0,   1, 128,   1,   0, 
      9, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   2,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   2,   0, 
    228, 144,   0,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0, 228, 145,   1,   0, 
      0,   2,   1,   0,  47, 128, 
      0,   0, 228, 144,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      1,   0,   0, 144,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      5,   0,   0,   3,   0,   8, 
      8, 128,   0,   0, 255, 128, 
      1,   0, 255, 144,   1,   0, 
      0,   2,   0,   8,   7, 128, 
      0,   0, 228, 128, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGVertexBatchEAlphaMul.hlsl.h
//    /Vn pBinary_FTexTGVertexBatchEAlphaMul
//    D3D9/FTexTGVertexBatchEAlphaMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color_pp v0
    dcl_color1 v1.xw
    dcl_texcoord v2.xy
    dcl_2d s0
    texld r0, v2, s0
    add r0, r0, -v0
    mov_pp r1, v0
    mad r0, v1.x, r0, r1
    mul r0.w, r0.w, v1.w
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 7 instruction slots used (1 texture, 6 arithmetic)
#endif

const BYTE pBinary_FTexTGVertexBatchEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      0,   0,  15, 160,   0,   0, 
    128, 191,   0,   0, 128,  63, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
     10,   0,   0, 128,   0,   0, 
     47, 144,  31,   0,   0,   2, 
     10,   0,   1, 128,   1,   0, 
      9, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   2,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   2,   0, 
    228, 144,   0,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0, 228, 145,   1,   0, 
      0,   2,   1,   0,  47, 128, 
      0,   0, 228, 144,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      1,   0,   0, 144,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      5,   0,   0,   3,   0,   0, 
      8, 128,   0,   0, 255, 128, 
      1,   0, 255, 144,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   0,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      0,   0,  85, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGVertexBatchMul.hlsl.h /Vn
//    pBinary_FTexTGVertexBatchMul D3D9/FTexTGVertexBatchMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color_pp v0
    dcl_color1 v1.x
    dcl_texcoord v2.xy
    dcl_2d s0
    texld r0, v2, s0
    add r0, r0, -v0
    mov_pp r1, v0
    mad r0, v1.x, r0, r1
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 6 instruction slots used (1 texture, 5 arithmetic)
#endif

const BYTE pBinary_FTexTGVertexBatchMul[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      0,   0,  15, 160,   0,   0, 
    128, 191,   0,   0, 128,  63, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
     10,   0,   0, 128,   0,   0, 
     47, 144,  31,   0,   0,   2, 
     10,   0,   1, 128,   1,   0, 
      1, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   2,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   2,   0, 
    228, 144,   0,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0, 228, 145,   1,   0, 
      0,   2,   1,   0,  47, 128, 
      0,   0, 228, 144,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      1,   0,   0, 144,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0,   0, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   0,   0,  85, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGVertexCxform.hlsl.h /Vn
//    pBinary_FTexTGVertexCxform D3D9/FTexTGVertexCxform.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   tex0         s0       1
//

    ps_3_0
    dcl_color_pp v0
    dcl_color1 v1.x
    dcl_texcoord v2.xy
    dcl_2d s0
    texld r0, v2, s0
    add r0, r0, -v0
    mov_pp r1, v0
    mad r0, v1.x, r0, r1
    mov r1, c1
    mad oC0, r0, r1, c0

// approximately 6 instruction slots used (1 texture, 5 arithmetic)
#endif

const BYTE pBinary_FTexTGVertexCxform[] =
{
      0,   3, 255, 255, 254, 255, 
     50,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 147,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    140,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 118,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 124,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 116, 101, 
    120,  48,   0, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  47, 144,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      1,   0,   1, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      2,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   0,   0, 228, 145, 
      1,   0,   0,   2,   1,   0, 
     47, 128,   0,   0, 228, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   1,   0,   0, 144, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   1,   0,   0,   2, 
      1,   0,  15, 128,   1,   0, 
    228, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      0,   0, 228, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGVertexCxformEAlpha.hlsl.h /Vn
//    pBinary_FTexTGVertexCxformEAlpha D3D9/FTexTGVertexCxformEAlpha.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   tex0         s0       1
//

    ps_3_0
    dcl_color_pp v0
    dcl_color1 v1.xw
    dcl_texcoord v2.xy
    dcl_2d s0
    texld r0, v2, s0
    add r0, r0, -v0
    mov_pp r1, v0
    mad r0, v1.x, r0, r1
    mov r1, c1
    mad r0, r0, r1, c0
    mul oC0.w, r0.w, v1.w
    mov oC0.xyz, r0

// approximately 8 instruction slots used (1 texture, 7 arithmetic)
#endif

const BYTE pBinary_FTexTGVertexCxformEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     50,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 147,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    140,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 118,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 124,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 116, 101, 
    120,  48,   0, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  47, 144,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      1,   0,   9, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      2,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   0,   0, 228, 145, 
      1,   0,   0,   2,   1,   0, 
     47, 128,   0,   0, 228, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   1,   0,   0, 144, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   1,   0,   0,   2, 
      1,   0,  15, 128,   1,   0, 
    228, 160,   4,   0,   0,   4, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      0,   0, 228, 160,   5,   0, 
      0,   3,   0,   8,   8, 128, 
      0,   0, 255, 128,   1,   0, 
    255, 144,   1,   0,   0,   2, 
      0,   8,   7, 128,   0,   0, 
    228, 128, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGVertexCxformEAlphaMul.hlsl.h
//    /Vn pBinary_FTexTGVertexCxformEAlphaMul
//    D3D9/FTexTGVertexCxformEAlphaMul.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   tex0         s0       1
//

    ps_3_0
    def c2, -1, 1, 0, 0
    dcl_color_pp v0
    dcl_color1 v1.xw
    dcl_texcoord v2.xy
    dcl_2d s0
    texld r0, v2, s0
    add r0, r0, -v0
    mov_pp r1, v0
    mad r0, v1.x, r0, r1
    mov r1, c1
    mad r0, r0, r1, c0
    mul r0.w, r0.w, v1.w
    add r1, r0, c2.x
    mad oC0, r0.w, r1, c2.y

// approximately 9 instruction slots used (1 texture, 8 arithmetic)
#endif

const BYTE pBinary_FTexTGVertexCxformEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     50,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 147,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    140,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 118,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 124,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 116, 101, 
    120,  48,   0, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  81,   0, 
      0,   5,   2,   0,  15, 160, 
      0,   0, 128, 191,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  47, 144,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      1,   0,   9, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      2,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   0,   0, 228, 145, 
      1,   0,   0,   2,   1,   0, 
     47, 128,   0,   0, 228, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   1,   0,   0, 144, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   1,   0,   0,   2, 
      1,   0,  15, 128,   1,   0, 
    228, 160,   4,   0,   0,   4, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      0,   0, 228, 160,   5,   0, 
      0,   3,   0,   0,   8, 128, 
      0,   0, 255, 128,   1,   0, 
    255, 144,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   2,   0,   0, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   2,   0, 
     85, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGVertexCxformMul.hlsl.h /Vn
//    pBinary_FTexTGVertexCxformMul D3D9/FTexTGVertexCxformMul.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   tex0         s0       1
//

    ps_3_0
    def c2, -1, 1, 0, 0
    dcl_color_pp v0
    dcl_color1 v1.x
    dcl_texcoord v2.xy
    dcl_2d s0
    texld r0, v2, s0
    add r0, r0, -v0
    mov_pp r1, v0
    mad r0, v1.x, r0, r1
    mov r1, c1
    mad r0, r0, r1, c0
    add r1, r0, c2.x
    mad oC0, r0.w, r1, c2.y

// approximately 8 instruction slots used (1 texture, 7 arithmetic)
#endif

const BYTE pBinary_FTexTGVertexCxformMul[] =
{
      0,   3, 255, 255, 254, 255, 
     50,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 147,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    140,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 118,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 124,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 116, 101, 
    120,  48,   0, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  81,   0, 
      0,   5,   2,   0,  15, 160, 
      0,   0, 128, 191,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  47, 144,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      1,   0,   1, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      2,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      2,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   0,   0, 228, 145, 
      1,   0,   0,   2,   1,   0, 
     47, 128,   0,   0, 228, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   1,   0,   0, 144, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   1,   0,   0,   2, 
      1,   0,  15, 128,   1,   0, 
    228, 160,   4,   0,   0,   4, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      0,   0, 228, 160,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   2,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      2,   0,  85, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGVertexEAlpha.hlsl.h /Vn
//    pBinary_FTexTGVertexEAlpha D3D9/FTexTGVertexEAlpha.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    dcl_color_pp v0
    dcl_color1 v1.xw
    dcl_texcoord v2.xy
    dcl_2d s0
    texld r0, v2, s0
    add r0, r0, -v0
    mov_pp r1, v0
    mad r0, v1.x, r0, r1
    mul oC0.w, r0.w, v1.w
    mov oC0.xyz, r0

// approximately 6 instruction slots used (1 texture, 5 arithmetic)
#endif

const BYTE pBinary_FTexTGVertexEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  31,   0,   0,   2, 
     10,   0,   0, 128,   0,   0, 
     47, 144,  31,   0,   0,   2, 
     10,   0,   1, 128,   1,   0, 
      9, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   2,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   2,   0, 
    228, 144,   0,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0, 228, 145,   1,   0, 
      0,   2,   1,   0,  47, 128, 
      0,   0, 228, 144,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      1,   0,   0, 144,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      5,   0,   0,   3,   0,   8, 
      8, 128,   0,   0, 255, 128, 
      1,   0, 255, 144,   1,   0, 
      0,   2,   0,   8,   7, 128, 
      0,   0, 228, 128, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGVertexEAlphaMul.hlsl.h /Vn
//    pBinary_FTexTGVertexEAlphaMul D3D9/FTexTGVertexEAlphaMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color_pp v0
    dcl_color1 v1.xw
    dcl_texcoord v2.xy
    dcl_2d s0
    texld r0, v2, s0
    add r0, r0, -v0
    mov_pp r1, v0
    mad r0, v1.x, r0, r1
    mul r0.w, r0.w, v1.w
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 7 instruction slots used (1 texture, 6 arithmetic)
#endif

const BYTE pBinary_FTexTGVertexEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      0,   0,  15, 160,   0,   0, 
    128, 191,   0,   0, 128,  63, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
     10,   0,   0, 128,   0,   0, 
     47, 144,  31,   0,   0,   2, 
     10,   0,   1, 128,   1,   0, 
      9, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   2,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   2,   0, 
    228, 144,   0,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0, 228, 145,   1,   0, 
      0,   2,   1,   0,  47, 128, 
      0,   0, 228, 144,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      1,   0,   0, 144,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      5,   0,   0,   3,   0,   0, 
      8, 128,   0,   0, 255, 128, 
      1,   0, 255, 144,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   0,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      0,   0,  85, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGVertexMul.hlsl.h /Vn
//    pBinary_FTexTGVertexMul D3D9/FTexTGVertexMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color_pp v0
    dcl_color1 v1.x
    dcl_texcoord v2.xy
    dcl_2d s0
    texld r0, v2, s0
    add r0, r0, -v0
    mov_pp r1, v0
    mad r0, v1.x, r0, r1
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 6 instruction slots used (1 texture, 5 arithmetic)
#endif

const BYTE pBinary_FTexTGVertexMul[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      0,   0,  15, 160,   0,   0, 
    128, 191,   0,   0, 128,  63, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
     10,   0,   0, 128,   0,   0, 
     47, 144,  31,   0,   0,   2, 
     10,   0,   1, 128,   1,   0, 
      1, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   2,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   2,   0, 
    228, 144,   0,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0, 228, 145,   1,   0, 
      0,   2,   1,   0,  47, 128, 
      0,   0, 228, 144,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      1,   0,   0, 144,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0,   0, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   0,   0,  85, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FVertexVertex.hlsl.h /Vn
//    pBinary_FVertexVertex D3D9/FVertexVertex.hlsl
//
    ps_3_0
    dcl_color_pp v0
    mov_pp oC0, v0

// approximately 1 instruction slot used
#endif

const BYTE pBinary_FVertexVertex[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   1,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
      1,   0,   0,   2,   0,   8, 
     47, 128,   0,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FVertexVertexBatch.hlsl.h /Vn
//    pBinary_FVertexVertexBatch D3D9/FVertexVertexBatch.hlsl
//
    ps_3_0
    dcl_color_pp v0
    mov_pp oC0, v0

// approximately 1 instruction slot used
#endif

const BYTE pBinary_FVertexVertexBatch[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   1,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
      1,   0,   0,   2,   0,   8, 
     47, 128,   0,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FVertexVertexBatchCxform.hlsl.h /Vn
//    pBinary_FVertexVertexBatchCxform D3D9/FVertexVertexBatchCxform.hlsl
//
    ps_3_0
    dcl_color_pp v0
    dcl_texcoord3 v1
    dcl_texcoord4 v2
    mov_pp r0, v0
    mov r1, v2
    mad oC0, r0, r1, v1

// approximately 3 instruction slots used
#endif

const BYTE pBinary_FVertexVertexBatchCxform[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   1,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   2,   0,  15, 144, 
      1,   0,   0,   2,   0,   0, 
     47, 128,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   2,   0, 228, 144, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   1,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh
//    D3D9/FVertexVertexBatchCxformEAlpha.hlsl.h /Vn
//    pBinary_FVertexVertexBatchCxformEAlpha
//    D3D9/FVertexVertexBatchCxformEAlpha.hlsl
//
    ps_3_0
    dcl_color_pp v0
    dcl_color1 v1.w
    dcl_texcoord3 v2
    dcl_texcoord4 v3
    mov_pp r0, v0
    mov r1, v3
    mad r0, r0, r1, v2
    mul oC0.w, r0.w, v1.w
    mov oC0.xyz, r0

// approximately 5 instruction slots used
#endif

const BYTE pBinary_FVertexVertexBatchCxformEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   1,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,   8, 144, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   3,   0,  15, 144, 
      1,   0,   0,   2,   0,   0, 
     47, 128,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   3,   0, 228, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   2,   0, 
    228, 144,   5,   0,   0,   3, 
      0,   8,   8, 128,   0,   0, 
    255, 128,   1,   0, 255, 144, 
      1,   0,   0,   2,   0,   8, 
      7, 128,   0,   0, 228, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh
//    D3D9/FVertexVertexBatchCxformEAlphaMul.hlsl.h /Vn
//    pBinary_FVertexVertexBatchCxformEAlphaMul
//    D3D9/FVertexVertexBatchCxformEAlphaMul.hlsl
//
    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color_pp v0
    dcl_color1 v1.w
    dcl_texcoord3 v2
    dcl_texcoord4 v3
    mov_pp r0, v0
    mov r1, v3
    mad r0, r0, r1, v2
    mul r0.w, r0.w, v1.w
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 6 instruction slots used
#endif

const BYTE pBinary_FVertexVertexBatchCxformEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   1,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,   0,   0, 
     15, 160,   0,   0, 128, 191, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,   8, 144, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   3,   0,  15, 144, 
      1,   0,   0,   2,   0,   0, 
     47, 128,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   3,   0, 228, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   2,   0, 
    228, 144,   5,   0,   0,   3, 
      0,   0,   8, 128,   0,   0, 
    255, 128,   1,   0, 255, 144, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0,   0, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   0,   0,  85, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FVertexVertexBatchCxformMul.hlsl.h
//    /Vn pBinary_FVertexVertexBatchCxformMul
//    D3D9/FVertexVertexBatchCxformMul.hlsl
//
    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color_pp v0
    dcl_texcoord3 v1
    dcl_texcoord4 v2
    mov_pp r0, v0
    mov r1, v2
    mad r0, r0, r1, v1
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 5 instruction slots used
#endif

const BYTE pBinary_FVertexVertexBatchCxformMul[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   1,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,   0,   0, 
     15, 160,   0,   0, 128, 191, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   2,   0,  15, 144, 
      1,   0,   0,   2,   0,   0, 
     47, 128,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   2,   0, 228, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   1,   0, 
    228, 144,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   0,   0, 
     85, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FVertexVertexBatchEAlpha.hlsl.h /Vn
//    pBinary_FVertexVertexBatchEAlpha D3D9/FVertexVertexBatchEAlpha.hlsl
//
    ps_3_0
    dcl_color_pp v0
    dcl_color1 v1.w
    mov_pp r0.w, v0.w
    mul oC0.w, r0.w, v1.w
    mov_pp oC0.xyz, v0

// approximately 3 instruction slots used
#endif

const BYTE pBinary_FVertexVertexBatchEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   1,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,   8, 144, 
      1,   0,   0,   2,   0,   0, 
     40, 128,   0,   0, 255, 144, 
      5,   0,   0,   3,   0,   8, 
      8, 128,   0,   0, 255, 128, 
      1,   0, 255, 144,   1,   0, 
      0,   2,   0,   8,  39, 128, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FVertexVertexBatchEAlphaMul.hlsl.h
//    /Vn pBinary_FVertexVertexBatchEAlphaMul
//    D3D9/FVertexVertexBatchEAlphaMul.hlsl
//
    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color_pp v0
    dcl_color1 v1.w
    mov_pp r0.xyz, v0
    mov_pp r1.w, v0.w
    mul r0.w, r1.w, v1.w
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 5 instruction slots used
#endif

const BYTE pBinary_FVertexVertexBatchEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   1,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,   0,   0, 
     15, 160,   0,   0, 128, 191, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,   8, 144, 
      1,   0,   0,   2,   0,   0, 
     39, 128,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     40, 128,   0,   0, 255, 144, 
      5,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      1,   0, 255, 144,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   0,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      0,   0,  85, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FVertexVertexBatchMul.hlsl.h /Vn
//    pBinary_FVertexVertexBatchMul D3D9/FVertexVertexBatchMul.hlsl
//
    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color_pp v0
    add r0, c0.x, v0
    mad oC0, v0.w, r0, c0.y

// approximately 2 instruction slots used
#endif

const BYTE pBinary_FVertexVertexBatchMul[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   1,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,   0,   0, 
     15, 160,   0,   0, 128, 191, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
      2,   0,   0,   3,   0,   0, 
     15, 128,   0,   0,   0, 160, 
      0,   0, 228, 144,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 144,   0,   0, 
    228, 128,   0,   0,  85, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FVertexVertexCxform.hlsl.h /Vn
//    pBinary_FVertexVertexCxform D3D9/FVertexVertexCxform.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//

    ps_3_0
    dcl_color_pp v0
    mov r0, c1
    mad oC0, v0, r0, c0

// approximately 2 instruction slots used
#endif

const BYTE pBinary_FVertexVertexCxform[] =
{
      0,   3, 255, 255, 254, 255, 
     40,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 105,   0, 
      0,   0,   0,   3, 255, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     98,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  76,   0, 
      0,   0,   0,   0,   0,   0, 
     92,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
     76,   0,   0,   0,   0,   0, 
      0,   0,  99, 120,  97, 100, 
    100,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,  99, 120, 109, 117, 
    108,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0, 171, 171, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
      1,   0,   0,   2,   0,   0, 
     15, 128,   1,   0, 228, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 228, 144, 
      0,   0, 228, 128,   0,   0, 
    228, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FVertexVertexCxformEAlpha.hlsl.h
//    /Vn pBinary_FVertexVertexCxformEAlpha
//    D3D9/FVertexVertexCxformEAlpha.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//

    ps_3_0
    dcl_color_pp v0
    dcl_color1 v1.w
    mov r0, c1
    mad r0, v0, r0, c0
    mul oC0.w, r0.w, v1.w
    mov oC0.xyz, r0

// approximately 4 instruction slots used
#endif

const BYTE pBinary_FVertexVertexCxformEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     40,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 105,   0, 
      0,   0,   0,   3, 255, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     98,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  76,   0, 
      0,   0,   0,   0,   0,   0, 
     92,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
     76,   0,   0,   0,   0,   0, 
      0,   0,  99, 120,  97, 100, 
    100,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,  99, 120, 109, 117, 
    108,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0, 171, 171, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,   8, 144, 
      1,   0,   0,   2,   0,   0, 
     15, 128,   1,   0, 228, 160, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 144, 
      0,   0, 228, 128,   0,   0, 
    228, 160,   5,   0,   0,   3, 
      0,   8,   8, 128,   0,   0, 
    255, 128,   1,   0, 255, 144, 
      1,   0,   0,   2,   0,   8, 
      7, 128,   0,   0, 228, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FVertexVertexCxformEAlphaMul.hlsl.h
//    /Vn pBinary_FVertexVertexCxformEAlphaMul
//    D3D9/FVertexVertexCxformEAlphaMul.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//

    ps_3_0
    def c2, -1, 1, 0, 0
    dcl_color_pp v0
    dcl_color1 v1.w
    mov r0, c1
    mad r0, v0, r0, c0
    mul r0.w, r0.w, v1.w
    add r1, r0, c2.x
    mad oC0, r0.w, r1, c2.y

// approximately 5 instruction slots used
#endif

const BYTE pBinary_FVertexVertexCxformEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     40,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 105,   0, 
      0,   0,   0,   3, 255, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     98,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  76,   0, 
      0,   0,   0,   0,   0,   0, 
     92,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
     76,   0,   0,   0,   0,   0, 
      0,   0,  99, 120,  97, 100, 
    100,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,  99, 120, 109, 117, 
    108,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0, 171, 171, 
     81,   0,   0,   5,   2,   0, 
     15, 160,   0,   0, 128, 191, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,   8, 144, 
      1,   0,   0,   2,   0,   0, 
     15, 128,   1,   0, 228, 160, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 144, 
      0,   0, 228, 128,   0,   0, 
    228, 160,   5,   0,   0,   3, 
      0,   0,   8, 128,   0,   0, 
    255, 128,   1,   0, 255, 144, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      2,   0,   0, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   2,   0,  85, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FVertexVertexCxformMul.hlsl.h /Vn
//    pBinary_FVertexVertexCxformMul D3D9/FVertexVertexCxformMul.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//

    ps_3_0
    def c2, -1, 1, 0, 0
    dcl_color_pp v0
    mov r0, c1
    mad r0, v0, r0, c0
    add r1, r0, c2.x
    mad oC0, r0.w, r1, c2.y

// approximately 4 instruction slots used
#endif

const BYTE pBinary_FVertexVertexCxformMul[] =
{
      0,   3, 255, 255, 254, 255, 
     40,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 105,   0, 
      0,   0,   0,   3, 255, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     98,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  76,   0, 
      0,   0,   0,   0,   0,   0, 
     92,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
     76,   0,   0,   0,   0,   0, 
      0,   0,  99, 120,  97, 100, 
    100,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,  99, 120, 109, 117, 
    108,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0, 171, 171, 
     81,   0,   0,   5,   2,   0, 
     15, 160,   0,   0, 128, 191, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
      1,   0,   0,   2,   0,   0, 
     15, 128,   1,   0, 228, 160, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 144, 
      0,   0, 228, 128,   0,   0, 
    228, 160,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   2,   0,   0, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   2,   0, 
     85, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FVertexVertexEAlpha.hlsl.h /Vn
//    pBinary_FVertexVertexEAlpha D3D9/FVertexVertexEAlpha.hlsl
//
    ps_3_0
    dcl_color_pp v0
    dcl_color1 v1.w
    mov_pp r0.w, v0.w
    mul oC0.w, r0.w, v1.w
    mov_pp oC0.xyz, v0

// approximately 3 instruction slots used
#endif

const BYTE pBinary_FVertexVertexEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   1,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,   8, 144, 
      1,   0,   0,   2,   0,   0, 
     40, 128,   0,   0, 255, 144, 
      5,   0,   0,   3,   0,   8, 
      8, 128,   0,   0, 255, 128, 
      1,   0, 255, 144,   1,   0, 
      0,   2,   0,   8,  39, 128, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FVertexVertexEAlphaMul.hlsl.h /Vn
//    pBinary_FVertexVertexEAlphaMul D3D9/FVertexVertexEAlphaMul.hlsl
//
    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color_pp v0
    dcl_color1 v1.w
    mov_pp r0.xyz, v0
    mov_pp r1.w, v0.w
    mul r0.w, r1.w, v1.w
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 5 instruction slots used
#endif

const BYTE pBinary_FVertexVertexEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   1,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,   0,   0, 
     15, 160,   0,   0, 128, 191, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,   8, 144, 
      1,   0,   0,   2,   0,   0, 
     39, 128,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     40, 128,   0,   0, 255, 144, 
      5,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      1,   0, 255, 144,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   0,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      0,   0,  85, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FVertexVertexMul.hlsl.h /Vn
//    pBinary_FVertexVertexMul D3D9/FVertexVertexMul.hlsl
//
    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_color_pp v0
    add r0, c0.x, v0
    mad oC0, v0.w, r0, c0.y

// approximately 2 instruction slots used
#endif

const BYTE pBinary_FVertexVertexMul[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   1,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,   0,   0, 
     15, 160,   0,   0, 128, 191, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  47, 144, 
      2,   0,   0,   3,   0,   0, 
     15, 128,   0,   0,   0, 160, 
      0,   0, 228, 144,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 144,   0,   0, 
    228, 128,   0,   0,  85, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh
//    D3D9/VBatchPosition3dCxformVacolorVafactor.hlsl.h /Vn
//    pBinary_VBatchPosition3dCxformVacolorVafactor
//    D3D9/VBatchPosition3dCxformVacolorVafactor.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[72];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      72
//

    vs_3_0
    def c72, 765.030029, 2, 0, 0
    dcl_position v0
    dcl_color v1
    dcl_color1 v2
    dcl_color o0
    dcl_color1 o1
    dcl_texcoord3 o2
    dcl_texcoord4 o3
    dcl_position o4
    mad r0.x, v2.z, c72.x, c72.y
    mul r0.y, c72.x, v2.z
    frc r0.y, r0.y
    add r0.x, r0.x, -r0.y
    mad r0.y, v2.z, c72.x, -r0.y
    mova a0.xy, r0.yxzw
    dp4 o4, v0, c0[a0.y]
    mov o0, v1
    mov o1, v2
    mov o2, c0[a0.x]
    mov o3, c1[a0.x]

// approximately 11 instruction slots used
#endif

const BYTE pBinary_VBatchPosition3dCxformVacolorVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     72,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  72,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,  72,   0, 
     15, 160, 236,  65,  63,  68, 
      0,   0,   0,  64,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   3,   0,  15, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   4,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      1, 128,   2,   0, 170, 144, 
     72,   0,   0, 160,  72,   0, 
     85, 160,   5,   0,   0,   3, 
      0,   0,   2, 128,  72,   0, 
      0, 160,   2,   0, 170, 144, 
     19,   0,   0,   2,   0,   0, 
      2, 128,   0,   0,  85, 128, 
      2,   0,   0,   3,   0,   0, 
      1, 128,   0,   0,   0, 128, 
      0,   0,  85, 129,   4,   0, 
      0,   4,   0,   0,   2, 128, 
      2,   0, 170, 144,  72,   0, 
      0, 160,   0,   0,  85, 129, 
     46,   0,   0,   2,   0,   0, 
      3, 176,   0,   0, 225, 128, 
      9,   0,   0,   4,   4,   0, 
     15, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
     85, 176,   1,   0,   0,   2, 
      0,   0,  15, 224,   1,   0, 
    228, 144,   1,   0,   0,   2, 
      1,   0,  15, 224,   2,   0, 
    228, 144,   1,   0,   0,   3, 
      2,   0,  15, 224,   0,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   3,   3,   0, 
     15, 224,   1,  32, 228, 160, 
      0,   0,   0, 176, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh
//    D3D9/VBatchPosition3dCxformVacolor.hlsl.h /Vn
//    pBinary_VBatchPosition3dCxformVacolor
//    D3D9/VBatchPosition3dCxformVacolor.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[72];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      72
//

    vs_3_0
    def c72, 3, 2, 0, 0
    dcl_position v0
    dcl_color v1
    dcl_color1 v2
    dcl_color o0
    dcl_texcoord3 o1
    dcl_texcoord4 o2
    dcl_position o3
    mad r0.x, v2.x, c72.x, c72.y
    mul r0.y, c72.x, v2.x
    frc r0.y, r0.y
    add r0.x, r0.x, -r0.y
    mad r0.y, v2.x, c72.x, -r0.y
    mova a0.xy, r0.yxzw
    dp4 o3, v0, c0[a0.y]
    mov o0, v1
    mov o1, c0[a0.x]
    mov o2, c1[a0.x]

// approximately 10 instruction slots used
#endif

const BYTE pBinary_VBatchPosition3dCxformVacolor[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     72,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  72,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,  72,   0, 
     15, 160,   0,   0,  64,  64, 
      0,   0,   0,  64,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      1, 128,   2,   0,   0, 144, 
     72,   0,   0, 160,  72,   0, 
     85, 160,   5,   0,   0,   3, 
      0,   0,   2, 128,  72,   0, 
      0, 160,   2,   0,   0, 144, 
     19,   0,   0,   2,   0,   0, 
      2, 128,   0,   0,  85, 128, 
      2,   0,   0,   3,   0,   0, 
      1, 128,   0,   0,   0, 128, 
      0,   0,  85, 129,   4,   0, 
      0,   4,   0,   0,   2, 128, 
      2,   0,   0, 144,  72,   0, 
      0, 160,   0,   0,  85, 129, 
     46,   0,   0,   2,   0,   0, 
      3, 176,   0,   0, 225, 128, 
      9,   0,   0,   4,   3,   0, 
     15, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
     85, 176,   1,   0,   0,   2, 
      0,   0,  15, 224,   1,   0, 
    228, 144,   1,   0,   0,   3, 
      1,   0,  15, 224,   0,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   3,   2,   0, 
     15, 224,   1,  32, 228, 160, 
      0,   0,   0, 176, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VBatchPosition3dVacolor.hlsl.h /Vn
//    pBinary_VBatchPosition3dVacolor D3D9/VBatchPosition3dVacolor.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[24];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      24
//

    vs_3_0
    dcl_position v0
    dcl_color v1
    dcl_color1 v2
    dcl_color o0
    dcl_position o1
    frc r0.x, v2.x
    add r0.x, -r0.x, v2.x
    mova a0.x, r0.x
    dp4 o1, v0, c0[a0.x]
    mov o0, v1

// approximately 5 instruction slots used
#endif

const BYTE pBinary_VBatchPosition3dVacolor[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     24,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  24,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
     19,   0,   0,   2,   0,   0, 
      1, 128,   2,   0,   0, 144, 
      2,   0,   0,   3,   0,   0, 
      1, 128,   0,   0,   0, 129, 
      2,   0,   0, 144,  46,   0, 
      0,   2,   0,   0,   1, 176, 
      0,   0,   0, 128,   9,   0, 
      0,   4,   1,   0,  15, 224, 
      0,   0, 228, 144,   0,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   1,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh
//    D3D9/VBatchPosition3dVacolorVafactor.hlsl.h /Vn
//    pBinary_VBatchPosition3dVacolorVafactor
//    D3D9/VBatchPosition3dVacolorVafactor.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[24];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      24
//

    vs_3_0
    def c24, 255.009995, 0, 0, 0
    dcl_position v0
    dcl_color v1
    dcl_color1 v2
    dcl_color o0
    dcl_color1 o1
    dcl_position o2
    mul r0.x, c24.x, v2.z
    frc r0.y, r0.x
    add r0.x, r0.x, -r0.y
    mova a0.x, r0.x
    dp4 o2, v0, c0[a0.x]
    mov o0, v1
    mov o1, v2

// approximately 7 instruction slots used
#endif

const BYTE pBinary_VBatchPosition3dVacolorVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     24,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  24,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,  24,   0, 
     15, 160, 143,   2, 127,  67, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128,  24,   0,   0, 160, 
      2,   0, 170, 144,  19,   0, 
      0,   2,   0,   0,   2, 128, 
      0,   0,   0, 128,   2,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   0,   0, 
     85, 129,  46,   0,   0,   2, 
      0,   0,   1, 176,   0,   0, 
      0, 128,   9,   0,   0,   4, 
      2,   0,  15, 224,   0,   0, 
    228, 144,   0,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      1,   0, 228, 144,   1,   0, 
      0,   2,   1,   0,  15, 224, 
      2,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VBatchCxformVacolorVafactor.hlsl.h
//    /Vn pBinary_VBatchCxformVacolorVafactor
//    D3D9/VBatchCxformVacolorVafactor.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[96];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      96
//

    vs_3_0
    def c96, 1020.03998, 2, 0, 0
    dcl_position v0
    dcl_color v1
    dcl_color1 v2
    dcl_color o0
    dcl_color1 o1
    dcl_texcoord3 o2
    dcl_texcoord4 o3
    dcl_position o4
    mad r0.x, v2.z, c96.x, c96.y
    mul r0.y, c96.x, v2.z
    frc r0.y, r0.y
    add r0.x, r0.x, -r0.y
    mad r0.y, v2.z, c96.x, -r0.y
    mova a0.xy, r0.yxzw
    dp4 o4.x, v0, c0[a0.y]
    dp4 o4.y, v0, c3[a0.x]
    mov o0, v1
    mov o1, v2
    mov o2, c0[a0.x]
    mov o3, c1[a0.x]
    mov o4.zw, v0

// approximately 13 instruction slots used
#endif

const BYTE pBinary_VBatchCxformVacolorVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,  96,   0, 
     15, 160, 143,   2, 127,  68, 
      0,   0,   0,  64,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   3,   0,  15, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   4,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      1, 128,   2,   0, 170, 144, 
     96,   0,   0, 160,  96,   0, 
     85, 160,   5,   0,   0,   3, 
      0,   0,   2, 128,  96,   0, 
      0, 160,   2,   0, 170, 144, 
     19,   0,   0,   2,   0,   0, 
      2, 128,   0,   0,  85, 128, 
      2,   0,   0,   3,   0,   0, 
      1, 128,   0,   0,   0, 128, 
      0,   0,  85, 129,   4,   0, 
      0,   4,   0,   0,   2, 128, 
      2,   0, 170, 144,  96,   0, 
      0, 160,   0,   0,  85, 129, 
     46,   0,   0,   2,   0,   0, 
      3, 176,   0,   0, 225, 128, 
      9,   0,   0,   4,   4,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
     85, 176,   9,   0,   0,   4, 
      4,   0,   2, 224,   0,   0, 
    228, 144,   3,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      1,   0, 228, 144,   1,   0, 
      0,   2,   1,   0,  15, 224, 
      2,   0, 228, 144,   1,   0, 
      0,   3,   2,   0,  15, 224, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   3, 
      3,   0,  15, 224,   1,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   2,   4,   0, 
     12, 224,   0,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VBatchCxformVacolor.hlsl.h /Vn
//    pBinary_VBatchCxformVacolor D3D9/VBatchCxformVacolor.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[96];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      96
//

    vs_3_0
    def c96, 4, 2, 0, 0
    dcl_position v0
    dcl_color v1
    dcl_color1 v2
    dcl_color o0
    dcl_texcoord3 o1
    dcl_texcoord4 o2
    dcl_position o3
    mad r0.x, v2.x, c96.x, c96.y
    mul r0.y, c96.x, v2.x
    frc r0.y, r0.y
    add r0.x, r0.x, -r0.y
    mad r0.y, v2.x, c96.x, -r0.y
    mova a0.xy, r0.yxzw
    dp4 o3.x, v0, c0[a0.y]
    dp4 o3.y, v0, c3[a0.x]
    mov o0, v1
    mov o1, c0[a0.x]
    mov o2, c1[a0.x]
    mov o3.zw, v0

// approximately 12 instruction slots used
#endif

const BYTE pBinary_VBatchCxformVacolor[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,  96,   0, 
     15, 160,   0,   0, 128,  64, 
      0,   0,   0,  64,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      1, 128,   2,   0,   0, 144, 
     96,   0,   0, 160,  96,   0, 
     85, 160,   5,   0,   0,   3, 
      0,   0,   2, 128,  96,   0, 
      0, 160,   2,   0,   0, 144, 
     19,   0,   0,   2,   0,   0, 
      2, 128,   0,   0,  85, 128, 
      2,   0,   0,   3,   0,   0, 
      1, 128,   0,   0,   0, 128, 
      0,   0,  85, 129,   4,   0, 
      0,   4,   0,   0,   2, 128, 
      2,   0,   0, 144,  96,   0, 
      0, 160,   0,   0,  85, 129, 
     46,   0,   0,   2,   0,   0, 
      3, 176,   0,   0, 225, 128, 
      9,   0,   0,   4,   3,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
     85, 176,   9,   0,   0,   4, 
      3,   0,   2, 224,   0,   0, 
    228, 144,   3,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      1,   0, 228, 144,   1,   0, 
      0,   3,   1,   0,  15, 224, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   3, 
      2,   0,  15, 224,   1,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   2,   3,   0, 
     12, 224,   0,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VBatchVacolor.hlsl.h /Vn
//    pBinary_VBatchVacolor D3D9/VBatchVacolor.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[48];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      48
//

    vs_3_0
    def c48, 2, 0, 0, 0
    dcl_position v0
    dcl_color v1
    dcl_color1 v2
    dcl_color o0
    dcl_position o1
    add r0.x, v2.x, v2.x
    frc r0.x, r0.x
    mad r0.x, v2.x, c48.x, -r0.x
    mova a0.x, r0.x
    dp4 o1.x, v0, c0[a0.x]
    dp4 o1.y, v0, c1[a0.x]
    mov o0, v1
    mov o1.zw, v0

// approximately 8 instruction slots used
#endif

const BYTE pBinary_VBatchVacolor[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     48,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  48,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,  48,   0, 
     15, 160,   0,   0,   0,  64, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      2,   0,   0,   3,   0,   0, 
      1, 128,   2,   0,   0, 144, 
      2,   0,   0, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      2,   0,   0, 144,  48,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   1,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      1,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      1,   0, 228, 144,   1,   0, 
      0,   2,   1,   0,  12, 224, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VBatchVacolorVafactor.hlsl.h /Vn
//    pBinary_VBatchVacolorVafactor D3D9/VBatchVacolorVafactor.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[48];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      48
//

    vs_3_0
    def c48, 510.019989, 0, 0, 0
    dcl_position v0
    dcl_color v1
    dcl_color1 v2
    dcl_color o0
    dcl_color1 o1
    dcl_position o2
    mul r0.x, c48.x, v2.z
    frc r0.x, r0.x
    mad r0.x, v2.z, c48.x, -r0.x
    mova a0.x, r0.x
    dp4 o2.x, v0, c0[a0.x]
    dp4 o2.y, v0, c1[a0.x]
    mov o0, v1
    mov o1, v2
    mov o2.zw, v0

// approximately 9 instruction slots used
#endif

const BYTE pBinary_VBatchVacolorVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     48,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  48,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,  48,   0, 
     15, 160, 143,   2, 255,  67, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128,  48,   0,   0, 160, 
      2,   0, 170, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      2,   0, 170, 144,  48,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   2,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      2,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      1,   0, 228, 144,   1,   0, 
      0,   2,   1,   0,  15, 224, 
      2,   0, 228, 144,   1,   0, 
      0,   2,   2,   0,  12, 224, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VPosition3dCxformVacolor.hlsl.h /Vn
//    pBinary_VPosition3dCxformVacolor D3D9/VPosition3dCxformVacolor.hlsl
//
//
// Parameters:
//
//   float4x4 mvp;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//

    vs_3_0
    dcl_position v0
    dcl_color v1
    dcl_color o0
    dcl_position o1
    dp4 o1.x, v0, c0
    dp4 o1.y, v0, c1
    dp4 o1.z, v0, c2
    dp4 o1.w, v0, c3
    mov o0, v1

// approximately 5 instruction slots used
#endif

const BYTE pBinary_VPosition3dCxformVacolor[] =
{
      0,   3, 254, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    109, 118, 112,   0,   3,   0, 
      3,   0,   4,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 224,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      1,   0,  15, 224,   9,   0, 
      0,   3,   1,   0,   1, 224, 
      0,   0, 228, 144,   0,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   2, 224,   0,   0, 
    228, 144,   1,   0, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      4, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   8, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160,   1,   0,   0,   2, 
      0,   0,  15, 224,   1,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh
//    D3D9/VPosition3dCxformVacolorVafactor.hlsl.h /Vn
//    pBinary_VPosition3dCxformVacolorVafactor
//    D3D9/VPosition3dCxformVacolorVafactor.hlsl
//
//
// Parameters:
//
//   float4x4 mvp;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//

    vs_3_0
    dcl_position v0
    dcl_color v1
    dcl_color1 v2
    dcl_color o0
    dcl_color1 o1
    dcl_position o2
    dp4 o2.x, v0, c0
    dp4 o2.y, v0, c1
    dp4 o2.z, v0, c2
    dp4 o2.w, v0, c3
    mov o0, v1
    mov o1, v2

// approximately 6 instruction slots used
#endif

const BYTE pBinary_VPosition3dCxformVacolorVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    109, 118, 112,   0,   3,   0, 
      3,   0,   4,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      2,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 224,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      1,   0,  15, 224,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      2,   0,  15, 224,   9,   0, 
      0,   3,   2,   0,   1, 224, 
      0,   0, 228, 144,   0,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   2, 224,   0,   0, 
    228, 144,   1,   0, 228, 160, 
      9,   0,   0,   3,   2,   0, 
      4, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   2,   0,   8, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160,   1,   0,   0,   2, 
      0,   0,  15, 224,   1,   0, 
    228, 144,   1,   0,   0,   2, 
      1,   0,  15, 224,   2,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VPosition3dVacolor.hlsl.h /Vn
//    pBinary_VPosition3dVacolor D3D9/VPosition3dVacolor.hlsl
//
//
// Parameters:
//
//   float4x4 mvp;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//

    vs_3_0
    dcl_position v0
    dcl_color v1
    dcl_color o0
    dcl_position o1
    dp4 o1.x, v0, c0
    dp4 o1.y, v0, c1
    dp4 o1.z, v0, c2
    dp4 o1.w, v0, c3
    mov o0, v1

// approximately 5 instruction slots used
#endif

const BYTE pBinary_VPosition3dVacolor[] =
{
      0,   3, 254, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    109, 118, 112,   0,   3,   0, 
      3,   0,   4,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 224,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      1,   0,  15, 224,   9,   0, 
      0,   3,   1,   0,   1, 224, 
      0,   0, 228, 144,   0,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   2, 224,   0,   0, 
    228, 144,   1,   0, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      4, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   8, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160,   1,   0,   0,   2, 
      0,   0,  15, 224,   1,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VPosition3dVacolorVafactor.hlsl.h
//    /Vn pBinary_VPosition3dVacolorVafactor
//    D3D9/VPosition3dVacolorVafactor.hlsl
//
//
// Parameters:
//
//   float4x4 mvp;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//

    vs_3_0
    dcl_position v0
    dcl_color v1
    dcl_color1 v2
    dcl_color o0
    dcl_color1 o1
    dcl_position o2
    dp4 o2.x, v0, c0
    dp4 o2.y, v0, c1
    dp4 o2.z, v0, c2
    dp4 o2.w, v0, c3
    mov o0, v1
    mov o1, v2

// approximately 6 instruction slots used
#endif

const BYTE pBinary_VPosition3dVacolorVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    109, 118, 112,   0,   3,   0, 
      3,   0,   4,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      2,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 224,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      1,   0,  15, 224,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      2,   0,  15, 224,   9,   0, 
      0,   3,   2,   0,   1, 224, 
      0,   0, 228, 144,   0,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   2, 224,   0,   0, 
    228, 144,   1,   0, 228, 160, 
      9,   0,   0,   3,   2,   0, 
      4, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   2,   0,   8, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160,   1,   0,   0,   2, 
      0,   0,  15, 224,   1,   0, 
    228, 144,   1,   0,   0,   2, 
      1,   0,  15, 224,   2,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VTexTGBatchPosition3d.hlsl.h /Vn
//    pBinary_VTexTGBatchPosition3d D3D9/VTexTGBatchPosition3d.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[72];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      72
//

    vs_3_0
    def c72, 3, 0, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_texcoord o0.xy
    dcl_position o1
    mul r0.x, c72.x, v1.x
    frc r0.x, r0.x
    mad r0.x, v1.x, c72.x, -r0.x
    mova a0.x, r0.x
    dp4 o0.x, v0, c0[a0.x]
    dp4 o0.y, v0, c1[a0.x]
    dp4 o1, v0, c2[a0.x]

// approximately 7 instruction slots used
#endif

const BYTE pBinary_VTexTGBatchPosition3d[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     72,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  72,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,  72,   0, 
     15, 160,   0,   0,  64,  64, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128,  72,   0,   0, 160, 
      1,   0,   0, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      1,   0,   0, 144,  72,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   0,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      0,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   1,   0,  15, 224, 
      0,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh
//    D3D9/VTexTGBatchPosition3dCxformVacolorVafactor.hlsl.h /Vn
//    pBinary_VTexTGBatchPosition3dCxformVacolorVafactor
//    D3D9/VTexTGBatchPosition3dCxformVacolorVafactor.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[120];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0     120
//

    vs_3_0
    def c120, 1275.05005, 0, 0, 0
    dcl_position v0
    dcl_color v1
    dcl_color1 v2
    dcl_color o0
    dcl_color1 o1
    dcl_texcoord3 o2
    dcl_texcoord4 o3
    dcl_texcoord o4.xy
    dcl_position o5
    mul r0.x, c120.x, v2.z
    frc r0.x, r0.x
    mad r0.x, v2.z, c120.x, -r0.x
    mova a0.x, r0.x
    dp4 o4.x, v0, c0[a0.x]
    dp4 o4.y, v0, c1[a0.x]
    dp4 o5, v0, c4[a0.x]
    mov o0, v1
    mov o1, v2
    mov o2, c2[a0.x]
    mov o3, c3[a0.x]

// approximately 11 instruction slots used
#endif

const BYTE pBinary_VTexTGBatchPosition3dCxformVacolorVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
    120,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0, 120,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5, 120,   0, 
     15, 160, 154,  97, 159,  68, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   3,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   4,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   5,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128, 120,   0,   0, 160, 
      2,   0, 170, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      2,   0, 170, 144, 120,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   4,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      4,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   5,   0,  15, 224, 
      0,   0, 228, 144,   4,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   1,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     15, 224,   2,   0, 228, 144, 
      1,   0,   0,   3,   2,   0, 
     15, 224,   2,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   3,   3,   0,  15, 224, 
      3,  32, 228, 160,   0,   0, 
      0, 176, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh
//    D3D9/VTexTGBatchPosition3dCxformVafactor.hlsl.h /Vn
//    pBinary_VTexTGBatchPosition3dCxformVafactor
//    D3D9/VTexTGBatchPosition3dCxformVafactor.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[120];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0     120
//

    vs_3_0
    def c120, 1275.05005, 0, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord3 o1
    dcl_texcoord4 o2
    dcl_texcoord o3.xy
    dcl_position o4
    mul r0.x, c120.x, v1.z
    frc r0.x, r0.x
    mad r0.x, v1.z, c120.x, -r0.x
    mova a0.x, r0.x
    dp4 o3.x, v0, c0[a0.x]
    dp4 o3.y, v0, c1[a0.x]
    dp4 o4, v0, c4[a0.x]
    mov o0, v1
    mov o1, c2[a0.x]
    mov o2, c3[a0.x]

// approximately 10 instruction slots used
#endif

const BYTE pBinary_VTexTGBatchPosition3dCxformVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
    120,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0, 120,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5, 120,   0, 
     15, 160, 154,  97, 159,  68, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   3,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   4,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128, 120,   0,   0, 160, 
      1,   0, 170, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      1,   0, 170, 144, 120,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   3,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      3,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   4,   0,  15, 224, 
      0,   0, 228, 144,   4,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   1,   0, 228, 144, 
      1,   0,   0,   3,   1,   0, 
     15, 224,   2,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   3,   2,   0,  15, 224, 
      3,  32, 228, 160,   0,   0, 
      0, 176, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VTexTGBatchPosition3dCxform.hlsl.h
//    /Vn pBinary_VTexTGBatchPosition3dCxform
//    D3D9/VTexTGBatchPosition3dCxform.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[120];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0     120
//

    vs_3_0
    def c120, 5, 0, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_texcoord3 o0
    dcl_texcoord4 o1
    dcl_texcoord o2.xy
    dcl_position o3
    mul r0.x, c120.x, v1.x
    frc r0.x, r0.x
    mad r0.x, v1.x, c120.x, -r0.x
    mova a0.x, r0.x
    dp4 o2.x, v0, c0[a0.x]
    dp4 o2.y, v0, c1[a0.x]
    dp4 o3, v0, c4[a0.x]
    mov o0, c2[a0.x]
    mov o1, c3[a0.x]

// approximately 9 instruction slots used
#endif

const BYTE pBinary_VTexTGBatchPosition3dCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
    120,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0, 120,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5, 120,   0, 
     15, 160,   0,   0, 160,  64, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128, 120,   0,   0, 160, 
      1,   0,   0, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      1,   0,   0, 144, 120,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   2,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      2,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   3,   0,  15, 224, 
      0,   0, 228, 144,   4,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   3,   0,   0, 
     15, 224,   2,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   3,   1,   0,  15, 224, 
      3,  32, 228, 160,   0,   0, 
      0, 176, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh
//    D3D9/VTexTGBatchPosition3dVacolorVafactor.hlsl.h /Vn
//    pBinary_VTexTGBatchPosition3dVacolorVafactor
//    D3D9/VTexTGBatchPosition3dVacolorVafactor.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[72];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      72
//

    vs_3_0
    def c72, 765.030029, 0, 0, 0
    dcl_position v0
    dcl_color v1
    dcl_color1 v2
    dcl_color o0
    dcl_color1 o1
    dcl_texcoord o2.xy
    dcl_position o3
    mul r0.x, c72.x, v2.z
    frc r0.x, r0.x
    mad r0.x, v2.z, c72.x, -r0.x
    mova a0.x, r0.x
    dp4 o2.x, v0, c0[a0.x]
    dp4 o2.y, v0, c1[a0.x]
    dp4 o3, v0, c2[a0.x]
    mov o0, v1
    mov o1, v2

// approximately 9 instruction slots used
#endif

const BYTE pBinary_VTexTGBatchPosition3dVacolorVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     72,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  72,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,  72,   0, 
     15, 160, 236,  65,  63,  68, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128,  72,   0,   0, 160, 
      2,   0, 170, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      2,   0, 170, 144,  72,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   2,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      2,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   3,   0,  15, 224, 
      0,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   1,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     15, 224,   2,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh
//    D3D9/VTexTGBatchPosition3dVafactor.hlsl.h /Vn
//    pBinary_VTexTGBatchPosition3dVafactor
//    D3D9/VTexTGBatchPosition3dVafactor.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[72];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      72
//

    vs_3_0
    def c72, 765.030029, 0, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord o1.xy
    dcl_position o2
    mul r0.x, c72.x, v1.z
    frc r0.x, r0.x
    mad r0.x, v1.z, c72.x, -r0.x
    mova a0.x, r0.x
    dp4 o1.x, v0, c0[a0.x]
    dp4 o1.y, v0, c1[a0.x]
    dp4 o2, v0, c2[a0.x]
    mov o0, v1

// approximately 8 instruction slots used
#endif

const BYTE pBinary_VTexTGBatchPosition3dVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     72,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  72,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,  72,   0, 
     15, 160, 236,  65,  63,  68, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128,  72,   0,   0, 160, 
      1,   0, 170, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      1,   0, 170, 144,  72,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   1,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      1,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   2,   0,  15, 224, 
      0,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   1,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VTexTGBatch.hlsl.h /Vn
//    pBinary_VTexTGBatch D3D9/VTexTGBatch.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[96];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      96
//

    vs_3_0
    def c96, 4, 0, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_texcoord o0.xy
    dcl_position o1
    mul r0.x, c96.x, v1.x
    frc r0.x, r0.x
    mad r0.x, v1.x, c96.x, -r0.x
    mova a0.x, r0.x
    dp4 o0.x, v0, c0[a0.x]
    dp4 o0.y, v0, c1[a0.x]
    dp4 o1.x, v0, c2[a0.x]
    dp4 o1.y, v0, c3[a0.x]
    mov o1.zw, v0

// approximately 9 instruction slots used
#endif

const BYTE pBinary_VTexTGBatch[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,  96,   0, 
     15, 160,   0,   0, 128,  64, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128,  96,   0,   0, 160, 
      1,   0,   0, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      1,   0,   0, 144,  96,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   0,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      0,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   1,   0,   1, 224, 
      0,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   1,   0, 
      2, 224,   0,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      1,   0,  12, 224,   0,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh
//    D3D9/VTexTGBatchCxformVacolorVafactor.hlsl.h /Vn
//    pBinary_VTexTGBatchCxformVacolorVafactor
//    D3D9/VTexTGBatchCxformVacolorVafactor.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[144];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0     144
//

    vs_3_0
    def c144, 1530.06006, 0, 0, 0
    dcl_position v0
    dcl_color v1
    dcl_color1 v2
    dcl_color o0
    dcl_color1 o1
    dcl_texcoord3 o2
    dcl_texcoord4 o3
    dcl_texcoord o4.xy
    dcl_position o5
    mul r0.x, c144.x, v2.z
    frc r0.x, r0.x
    mad r0.x, v2.z, c144.x, -r0.x
    mova a0.x, r0.x
    dp4 o4.x, v0, c0[a0.x]
    dp4 o4.y, v0, c1[a0.x]
    dp4 o5.x, v0, c4[a0.x]
    dp4 o5.y, v0, c5[a0.x]
    mov o0, v1
    mov o1, v2
    mov o2, c2[a0.x]
    mov o3, c3[a0.x]
    mov o5.zw, v0

// approximately 13 instruction slots used
#endif

const BYTE pBinary_VTexTGBatchCxformVacolorVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
    144,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5, 144,   0, 
     15, 160, 236,  65, 191,  68, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   3,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   4,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   5,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128, 144,   0,   0, 160, 
      2,   0, 170, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      2,   0, 170, 144, 144,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   4,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      4,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   5,   0,   1, 224, 
      0,   0, 228, 144,   4,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   5,   0, 
      2, 224,   0,   0, 228, 144, 
      5,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      0,   0,  15, 224,   1,   0, 
    228, 144,   1,   0,   0,   2, 
      1,   0,  15, 224,   2,   0, 
    228, 144,   1,   0,   0,   3, 
      2,   0,  15, 224,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   3,   3,   0, 
     15, 224,   3,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   5,   0,  12, 224, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VTexTGBatchCxformVafactor.hlsl.h
//    /Vn pBinary_VTexTGBatchCxformVafactor
//    D3D9/VTexTGBatchCxformVafactor.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[144];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0     144
//

    vs_3_0
    def c144, 1530.06006, 0, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord3 o1
    dcl_texcoord4 o2
    dcl_texcoord o3.xy
    dcl_position o4
    mul r0.x, c144.x, v1.z
    frc r0.x, r0.x
    mad r0.x, v1.z, c144.x, -r0.x
    mova a0.x, r0.x
    dp4 o3.x, v0, c0[a0.x]
    dp4 o3.y, v0, c1[a0.x]
    dp4 o4.x, v0, c4[a0.x]
    dp4 o4.y, v0, c5[a0.x]
    mov o0, v1
    mov o1, c2[a0.x]
    mov o2, c3[a0.x]
    mov o4.zw, v0

// approximately 12 instruction slots used
#endif

const BYTE pBinary_VTexTGBatchCxformVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
    144,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5, 144,   0, 
     15, 160, 236,  65, 191,  68, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   3,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   4,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128, 144,   0,   0, 160, 
      1,   0, 170, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      1,   0, 170, 144, 144,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   3,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      3,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   4,   0,   1, 224, 
      0,   0, 228, 144,   4,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   4,   0, 
      2, 224,   0,   0, 228, 144, 
      5,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      0,   0,  15, 224,   1,   0, 
    228, 144,   1,   0,   0,   3, 
      1,   0,  15, 224,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   3,   2,   0, 
     15, 224,   3,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   4,   0,  12, 224, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VTexTGBatchCxform.hlsl.h /Vn
//    pBinary_VTexTGBatchCxform D3D9/VTexTGBatchCxform.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[144];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0     144
//

    vs_3_0
    def c144, 6, 0, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_texcoord3 o0
    dcl_texcoord4 o1
    dcl_texcoord o2.xy
    dcl_position o3
    mul r0.x, c144.x, v1.x
    frc r0.x, r0.x
    mad r0.x, v1.x, c144.x, -r0.x
    mova a0.x, r0.x
    dp4 o2.x, v0, c0[a0.x]
    dp4 o2.y, v0, c1[a0.x]
    dp4 o3.x, v0, c4[a0.x]
    dp4 o3.y, v0, c5[a0.x]
    mov o0, c2[a0.x]
    mov o1, c3[a0.x]
    mov o3.zw, v0

// approximately 11 instruction slots used
#endif

const BYTE pBinary_VTexTGBatchCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
    144,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5, 144,   0, 
     15, 160,   0,   0, 192,  64, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128, 144,   0,   0, 160, 
      1,   0,   0, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      1,   0,   0, 144, 144,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   2,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      2,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   3,   0,   1, 224, 
      0,   0, 228, 144,   4,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   3,   0, 
      2, 224,   0,   0, 228, 144, 
      5,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   3, 
      0,   0,  15, 224,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   3,   1,   0, 
     15, 224,   3,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   3,   0,  12, 224, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VTexTGBatchVacolorVafactor.hlsl.h
//    /Vn pBinary_VTexTGBatchVacolorVafactor
//    D3D9/VTexTGBatchVacolorVafactor.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[96];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      96
//

    vs_3_0
    def c96, 1020.03998, 0, 0, 0
    dcl_position v0
    dcl_color v1
    dcl_color1 v2
    dcl_color o0
    dcl_color1 o1
    dcl_texcoord o2.xy
    dcl_position o3
    mul r0.x, c96.x, v2.z
    frc r0.x, r0.x
    mad r0.x, v2.z, c96.x, -r0.x
    mova a0.x, r0.x
    dp4 o2.x, v0, c0[a0.x]
    dp4 o2.y, v0, c1[a0.x]
    dp4 o3.x, v0, c2[a0.x]
    dp4 o3.y, v0, c3[a0.x]
    mov o0, v1
    mov o1, v2
    mov o3.zw, v0

// approximately 11 instruction slots used
#endif

const BYTE pBinary_VTexTGBatchVacolorVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,  96,   0, 
     15, 160, 143,   2, 127,  68, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128,  96,   0,   0, 160, 
      2,   0, 170, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      2,   0, 170, 144,  96,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   2,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      2,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   3,   0,   1, 224, 
      0,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   3,   0, 
      2, 224,   0,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      0,   0,  15, 224,   1,   0, 
    228, 144,   1,   0,   0,   2, 
      1,   0,  15, 224,   2,   0, 
    228, 144,   1,   0,   0,   2, 
      3,   0,  12, 224,   0,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VTexTGBatchVafactor.hlsl.h /Vn
//    pBinary_VTexTGBatchVafactor D3D9/VTexTGBatchVafactor.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[96];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      96
//

    vs_3_0
    def c96, 1020.03998, 0, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord o1.xy
    dcl_position o2
    mul r0.x, c96.x, v1.z
    frc r0.x, r0.x
    mad r0.x, v1.z, c96.x, -r0.x
    mova a0.x, r0.x
    dp4 o1.x, v0, c0[a0.x]
    dp4 o1.y, v0, c1[a0.x]
    dp4 o2.x, v0, c2[a0.x]
    dp4 o2.y, v0, c3[a0.x]
    mov o0, v1
    mov o2.zw, v0

// approximately 10 instruction slots used
#endif

const BYTE pBinary_VTexTGBatchVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,  96,   0, 
     15, 160, 143,   2, 127,  68, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128,  96,   0,   0, 160, 
      1,   0, 170, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      1,   0, 170, 144,  96,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   1,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      1,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   2,   0,   1, 224, 
      0,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   2,   0, 
      2, 224,   0,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      0,   0,  15, 224,   1,   0, 
    228, 144,   1,   0,   0,   2, 
      2,   0,  12, 224,   0,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VTexTGPosition3d.hlsl.h /Vn
//    pBinary_VTexTGPosition3d D3D9/VTexTGPosition3d.hlsl
//
//
// Parameters:
//
//   float4x4 mvp;
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//   texgen       c4       2
//

    vs_3_0
    dcl_position v0
    dcl_texcoord o0.xy
    dcl_position o1
    dp4 o0.x, v0, c4
    dp4 o0.y, v0, c5
    dp4 o1.x, v0, c0
    dp4 o1.y, v0, c1
    dp4 o1.z, v0, c2
    dp4 o1.w, v0, c3

// approximately 6 instruction slots used
#endif

const BYTE pBinary_VTexTGPosition3d[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      4,   0,   2,   0,  18,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      9,   0,   0,   3,   0,   0, 
      1, 224,   0,   0, 228, 144, 
      4,   0, 228, 160,   9,   0, 
      0,   3,   0,   0,   2, 224, 
      0,   0, 228, 144,   5,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   1, 224,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      2, 224,   0,   0, 228, 144, 
      1,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   4, 224, 
      0,   0, 228, 144,   2,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   8, 224,   0,   0, 
    228, 144,   3,   0, 228, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VTexTGPosition3dCxform.hlsl.h /Vn
//    pBinary_VTexTGPosition3dCxform D3D9/VTexTGPosition3dCxform.hlsl
//
//
// Parameters:
//
//   float4x4 mvp;
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//   texgen       c4       2
//

    vs_3_0
    dcl_position v0
    dcl_texcoord o0.xy
    dcl_position o1
    dp4 o0.x, v0, c4
    dp4 o0.y, v0, c5
    dp4 o1.x, v0, c0
    dp4 o1.y, v0, c1
    dp4 o1.z, v0, c2
    dp4 o1.w, v0, c3

// approximately 6 instruction slots used
#endif

const BYTE pBinary_VTexTGPosition3dCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      4,   0,   2,   0,  18,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      9,   0,   0,   3,   0,   0, 
      1, 224,   0,   0, 228, 144, 
      4,   0, 228, 160,   9,   0, 
      0,   3,   0,   0,   2, 224, 
      0,   0, 228, 144,   5,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   1, 224,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      2, 224,   0,   0, 228, 144, 
      1,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   4, 224, 
      0,   0, 228, 144,   2,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   8, 224,   0,   0, 
    228, 144,   3,   0, 228, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh
//    D3D9/VTexTGPosition3dCxformVacolorVafactor.hlsl.h /Vn
//    pBinary_VTexTGPosition3dCxformVacolorVafactor
//    D3D9/VTexTGPosition3dCxformVacolorVafactor.hlsl
//
//
// Parameters:
//
//   float4x4 mvp;
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//   texgen       c4       2
//

    vs_3_0
    dcl_position v0
    dcl_color v1
    dcl_color1 v2
    dcl_color o0
    dcl_color1 o1
    dcl_texcoord o2.xy
    dcl_position o3
    dp4 o2.x, v0, c4
    dp4 o2.y, v0, c5
    dp4 o3.x, v0, c0
    dp4 o3.y, v0, c1
    dp4 o3.z, v0, c2
    dp4 o3.w, v0, c3
    mov o0, v1
    mov o1, v2

// approximately 8 instruction slots used
#endif

const BYTE pBinary_VTexTGPosition3dCxformVacolorVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      4,   0,   2,   0,  18,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      9,   0,   0,   3,   2,   0, 
      1, 224,   0,   0, 228, 144, 
      4,   0, 228, 160,   9,   0, 
      0,   3,   2,   0,   2, 224, 
      0,   0, 228, 144,   5,   0, 
    228, 160,   9,   0,   0,   3, 
      3,   0,   1, 224,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   3,   0, 
      2, 224,   0,   0, 228, 144, 
      1,   0, 228, 160,   9,   0, 
      0,   3,   3,   0,   4, 224, 
      0,   0, 228, 144,   2,   0, 
    228, 160,   9,   0,   0,   3, 
      3,   0,   8, 224,   0,   0, 
    228, 144,   3,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   1,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     15, 224,   2,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh
//    D3D9/VTexTGPosition3dCxformVafactor.hlsl.h /Vn
//    pBinary_VTexTGPosition3dCxformVafactor
//    D3D9/VTexTGPosition3dCxformVafactor.hlsl
//
//
// Parameters:
//
//   float4x4 mvp;
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//   texgen       c4       2
//

    vs_3_0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord o1.xy
    dcl_position o2
    dp4 o1.x, v0, c4
    dp4 o1.y, v0, c5
    dp4 o2.x, v0, c0
    dp4 o2.y, v0, c1
    dp4 o2.z, v0, c2
    dp4 o2.w, v0, c3
    mov o0, v1

// approximately 7 instruction slots used
#endif

const BYTE pBinary_VTexTGPosition3dCxformVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      4,   0,   2,   0,  18,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      9,   0,   0,   3,   1,   0, 
      1, 224,   0,   0, 228, 144, 
      4,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   2, 224, 
      0,   0, 228, 144,   5,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   1, 224,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   2,   0, 
      2, 224,   0,   0, 228, 144, 
      1,   0, 228, 160,   9,   0, 
      0,   3,   2,   0,   4, 224, 
      0,   0, 228, 144,   2,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   8, 224,   0,   0, 
    228, 144,   3,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   1,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh
//    D3D9/VTexTGPosition3dVacolorVafactor.hlsl.h /Vn
//    pBinary_VTexTGPosition3dVacolorVafactor
//    D3D9/VTexTGPosition3dVacolorVafactor.hlsl
//
//
// Parameters:
//
//   float4x4 mvp;
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//   texgen       c4       2
//

    vs_3_0
    dcl_position v0
    dcl_color v1
    dcl_color1 v2
    dcl_color o0
    dcl_color1 o1
    dcl_texcoord o2.xy
    dcl_position o3
    dp4 o2.x, v0, c4
    dp4 o2.y, v0, c5
    dp4 o3.x, v0, c0
    dp4 o3.y, v0, c1
    dp4 o3.z, v0, c2
    dp4 o3.w, v0, c3
    mov o0, v1
    mov o1, v2

// approximately 8 instruction slots used
#endif

const BYTE pBinary_VTexTGPosition3dVacolorVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      4,   0,   2,   0,  18,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      9,   0,   0,   3,   2,   0, 
      1, 224,   0,   0, 228, 144, 
      4,   0, 228, 160,   9,   0, 
      0,   3,   2,   0,   2, 224, 
      0,   0, 228, 144,   5,   0, 
    228, 160,   9,   0,   0,   3, 
      3,   0,   1, 224,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   3,   0, 
      2, 224,   0,   0, 228, 144, 
      1,   0, 228, 160,   9,   0, 
      0,   3,   3,   0,   4, 224, 
      0,   0, 228, 144,   2,   0, 
    228, 160,   9,   0,   0,   3, 
      3,   0,   8, 224,   0,   0, 
    228, 144,   3,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   1,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     15, 224,   2,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VTexTGPosition3dVafactor.hlsl.h /Vn
//    pBinary_VTexTGPosition3dVafactor D3D9/VTexTGPosition3dVafactor.hlsl
//
//
// Parameters:
//
//   float4x4 mvp;
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//   texgen       c4       2
//

    vs_3_0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord o1.xy
    dcl_position o2
    dp4 o1.x, v0, c4
    dp4 o1.y, v0, c5
    dp4 o2.x, v0, c0
    dp4 o2.y, v0, c1
    dp4 o2.z, v0, c2
    dp4 o2.w, v0, c3
    mov o0, v1

// approximately 7 instruction slots used
#endif

const BYTE pBinary_VTexTGPosition3dVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      4,   0,   2,   0,  18,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      9,   0,   0,   3,   1,   0, 
      1, 224,   0,   0, 228, 144, 
      4,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   2, 224, 
      0,   0, 228, 144,   5,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   1, 224,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   2,   0, 
      2, 224,   0,   0, 228, 144, 
      1,   0, 228, 160,   9,   0, 
      0,   3,   2,   0,   4, 224, 
      0,   0, 228, 144,   2,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   8, 224,   0,   0, 
    228, 144,   3,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   1,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh
//    D3D9/VTexTGTexTGBatchPosition3dCxformVafactor.hlsl.h /Vn
//    pBinary_VTexTGTexTGBatchPosition3dCxformVafactor
//    D3D9/VTexTGTexTGBatchPosition3dCxformVafactor.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[168];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0     168
//

    vs_3_0
    def c168, 1785.06995, 0, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord3 o1
    dcl_texcoord4 o2
    dcl_texcoord o3.xy
    dcl_texcoord1 o4.xy
    dcl_position o5
    mul r0.x, c168.x, v1.z
    frc r0.x, r0.x
    mad r0.x, v1.z, c168.x, -r0.x
    mova a0.x, r0.x
    dp4 o3.x, v0, c0[a0.x]
    dp4 o3.y, v0, c1[a0.x]
    dp4 o4.x, v0, c2[a0.x]
    dp4 o4.y, v0, c3[a0.x]
    dp4 o5, v0, c6[a0.x]
    mov o0, v1
    mov o1, c4[a0.x]
    mov o2, c5[a0.x]

// approximately 12 instruction slots used
#endif

const BYTE pBinary_VTexTGTexTGBatchPosition3dCxformVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
    168,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0, 168,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5, 168,   0, 
     15, 160,  61,  34, 223,  68, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   3,   0,   3, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   4,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   5,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128, 168,   0,   0, 160, 
      1,   0, 170, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      1,   0, 170, 144, 168,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   3,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      3,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   4,   0,   1, 224, 
      0,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   4,   0, 
      2, 224,   0,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      5,   0,  15, 224,   0,   0, 
    228, 144,   6,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      1,   0, 228, 144,   1,   0, 
      0,   3,   1,   0,  15, 224, 
      4,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   3, 
      2,   0,  15, 224,   5,  32, 
    228, 160,   0,   0,   0, 176, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh
//    D3D9/VTexTGTexTGBatchPosition3dVafactor.hlsl.h /Vn
//    pBinary_VTexTGTexTGBatchPosition3dVafactor
//    D3D9/VTexTGTexTGBatchPosition3dVafactor.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[120];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0     120
//

    vs_3_0
    def c120, 1275.05005, 0, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xy
    dcl_position o3
    mul r0.x, c120.x, v1.z
    frc r0.x, r0.x
    mad r0.x, v1.z, c120.x, -r0.x
    mova a0.x, r0.x
    dp4 o1.x, v0, c0[a0.x]
    dp4 o1.y, v0, c1[a0.x]
    dp4 o2.x, v0, c2[a0.x]
    dp4 o2.y, v0, c3[a0.x]
    dp4 o3, v0, c4[a0.x]
    mov o0, v1

// approximately 10 instruction slots used
#endif

const BYTE pBinary_VTexTGTexTGBatchPosition3dVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
    120,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0, 120,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5, 120,   0, 
     15, 160, 154,  97, 159,  68, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128, 120,   0,   0, 160, 
      1,   0, 170, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      1,   0, 170, 144, 120,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   1,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      1,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   2,   0,   1, 224, 
      0,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   2,   0, 
      2, 224,   0,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      3,   0,  15, 224,   0,   0, 
    228, 144,   4,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      1,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh
//    D3D9/VTexTGTexTGBatchCxformVafactor.hlsl.h /Vn
//    pBinary_VTexTGTexTGBatchCxformVafactor
//    D3D9/VTexTGTexTGBatchCxformVafactor.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[192];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0     192
//

    vs_3_0
    def c192, 2040.07996, 0, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord3 o1
    dcl_texcoord4 o2
    dcl_texcoord o3.xy
    dcl_texcoord1 o4.xy
    dcl_position o5
    mul r0.x, c192.x, v1.z
    frc r0.x, r0.x
    mad r0.x, v1.z, c192.x, -r0.x
    mova a0.x, r0.x
    dp4 o3.x, v0, c0[a0.x]
    dp4 o3.y, v0, c1[a0.x]
    dp4 o4.x, v0, c2[a0.x]
    dp4 o4.y, v0, c3[a0.x]
    dp4 o5.x, v0, c6[a0.x]
    dp4 o5.y, v0, c7[a0.x]
    mov o0, v1
    mov o1, c4[a0.x]
    mov o2, c5[a0.x]
    mov o5.zw, v0

// approximately 14 instruction slots used
#endif

const BYTE pBinary_VTexTGTexTGBatchCxformVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
    192,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0, 192,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5, 192,   0, 
     15, 160, 143,   2, 255,  68, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   3,   0,   3, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   4,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   5,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128, 192,   0,   0, 160, 
      1,   0, 170, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      1,   0, 170, 144, 192,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   3,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      3,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   4,   0,   1, 224, 
      0,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   4,   0, 
      2, 224,   0,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      5,   0,   1, 224,   0,   0, 
    228, 144,   6,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   5,   0,   2, 224, 
      0,   0, 228, 144,   7,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   1,   0, 228, 144, 
      1,   0,   0,   3,   1,   0, 
     15, 224,   4,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   3,   2,   0,  15, 224, 
      5,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      5,   0,  12, 224,   0,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VTexTGTexTGBatchVafactor.hlsl.h /Vn
//    pBinary_VTexTGTexTGBatchVafactor D3D9/VTexTGTexTGBatchVafactor.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[144];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0     144
//

    vs_3_0
    def c144, 1530.06006, 0, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xy
    dcl_position o3
    mul r0.x, c144.x, v1.z
    frc r0.x, r0.x
    mad r0.x, v1.z, c144.x, -r0.x
    mova a0.x, r0.x
    dp4 o1.x, v0, c0[a0.x]
    dp4 o1.y, v0, c1[a0.x]
    dp4 o2.x, v0, c2[a0.x]
    dp4 o2.y, v0, c3[a0.x]
    dp4 o3.x, v0, c4[a0.x]
    dp4 o3.y, v0, c5[a0.x]
    mov o0, v1
    mov o3.zw, v0

// approximately 12 instruction slots used
#endif

const BYTE pBinary_VTexTGTexTGBatchVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
    144,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5, 144,   0, 
     15, 160, 236,  65, 191,  68, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128, 144,   0,   0, 160, 
      1,   0, 170, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      1,   0, 170, 144, 144,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   1,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      1,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   2,   0,   1, 224, 
      0,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   2,   0, 
      2, 224,   0,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      3,   0,   1, 224,   0,   0, 
    228, 144,   4,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   3,   0,   2, 224, 
      0,   0, 228, 144,   5,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   1,   0, 228, 144, 
      1,   0,   0,   2,   3,   0, 
     12, 224,   0,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh
//    D3D9/VTexTGTexTGPosition3dCxformVafactor.hlsl.h /Vn
//    pBinary_VTexTGTexTGPosition3dCxformVafactor
//    D3D9/VTexTGTexTGPosition3dCxformVafactor.hlsl
//
//
// Parameters:
//
//   float4x4 mvp;
//   float4 texgen[4];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//   texgen       c4       4
//

    vs_3_0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xy
    dcl_position o3
    dp4 o1.x, v0, c4
    dp4 o1.y, v0, c5
    dp4 o2.x, v0, c6
    dp4 o2.y, v0, c7
    dp4 o3.x, v0, c0
    dp4 o3.y, v0, c1
    dp4 o3.z, v0, c2
    dp4 o3.w, v0, c3
    mov o0, v1

// approximately 9 instruction slots used
#endif

const BYTE pBinary_VTexTGTexTGPosition3dCxformVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      4,   0,   4,   0,  18,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   4,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      9,   0,   0,   3,   1,   0, 
      1, 224,   0,   0, 228, 144, 
      4,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   2, 224, 
      0,   0, 228, 144,   5,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   1, 224,   0,   0, 
    228, 144,   6,   0, 228, 160, 
      9,   0,   0,   3,   2,   0, 
      2, 224,   0,   0, 228, 144, 
      7,   0, 228, 160,   9,   0, 
      0,   3,   3,   0,   1, 224, 
      0,   0, 228, 144,   0,   0, 
    228, 160,   9,   0,   0,   3, 
      3,   0,   2, 224,   0,   0, 
    228, 144,   1,   0, 228, 160, 
      9,   0,   0,   3,   3,   0, 
      4, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   3,   0,   8, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160,   1,   0,   0,   2, 
      0,   0,  15, 224,   1,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh
//    D3D9/VTexTGTexTGPosition3dVafactor.hlsl.h /Vn
//    pBinary_VTexTGTexTGPosition3dVafactor
//    D3D9/VTexTGTexTGPosition3dVafactor.hlsl
//
//
// Parameters:
//
//   float4x4 mvp;
//   float4 texgen[4];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//   texgen       c4       4
//

    vs_3_0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xy
    dcl_position o3
    dp4 o1.x, v0, c4
    dp4 o1.y, v0, c5
    dp4 o2.x, v0, c6
    dp4 o2.y, v0, c7
    dp4 o3.x, v0, c0
    dp4 o3.y, v0, c1
    dp4 o3.z, v0, c2
    dp4 o3.w, v0, c3
    mov o0, v1

// approximately 9 instruction slots used
#endif

const BYTE pBinary_VTexTGTexTGPosition3dVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      4,   0,   4,   0,  18,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   4,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      9,   0,   0,   3,   1,   0, 
      1, 224,   0,   0, 228, 144, 
      4,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   2, 224, 
      0,   0, 228, 144,   5,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   1, 224,   0,   0, 
    228, 144,   6,   0, 228, 160, 
      9,   0,   0,   3,   2,   0, 
      2, 224,   0,   0, 228, 144, 
      7,   0, 228, 160,   9,   0, 
      0,   3,   3,   0,   1, 224, 
      0,   0, 228, 144,   0,   0, 
    228, 160,   9,   0,   0,   3, 
      3,   0,   2, 224,   0,   0, 
    228, 144,   1,   0, 228, 160, 
      9,   0,   0,   3,   3,   0, 
      4, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   3,   0,   8, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160,   1,   0,   0,   2, 
      0,   0,  15, 224,   1,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VTexTGTexTGCxformVafactor.hlsl.h
//    /Vn pBinary_VTexTGTexTGCxformVafactor
//    D3D9/VTexTGTexTGCxformVafactor.hlsl
//
//
// Parameters:
//
//   float4 mvp[2];
//   float4 texgen[4];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//   texgen       c2       4
//

    vs_3_0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xy
    dcl_position o3
    dp4 o1.x, v0, c2
    dp4 o1.y, v0, c3
    dp4 o2.x, v0, c4
    dp4 o2.y, v0, c5
    dp4 o3.x, v0, c0
    dp4 o3.y, v0, c1
    mov o0, v1
    mov o3.zw, v0

// approximately 8 instruction slots used
#endif

const BYTE pBinary_VTexTGTexTGCxformVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      2,   0,   4,   0,  10,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   4,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      9,   0,   0,   3,   1,   0, 
      1, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   2, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   1, 224,   0,   0, 
    228, 144,   4,   0, 228, 160, 
      9,   0,   0,   3,   2,   0, 
      2, 224,   0,   0, 228, 144, 
      5,   0, 228, 160,   9,   0, 
      0,   3,   3,   0,   1, 224, 
      0,   0, 228, 144,   0,   0, 
    228, 160,   9,   0,   0,   3, 
      3,   0,   2, 224,   0,   0, 
    228, 144,   1,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   1,   0, 228, 144, 
      1,   0,   0,   2,   3,   0, 
     12, 224,   0,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VTexTGTexTGVafactor.hlsl.h /Vn
//    pBinary_VTexTGTexTGVafactor D3D9/VTexTGTexTGVafactor.hlsl
//
//
// Parameters:
//
//   float4 mvp[2];
//   float4 texgen[4];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//   texgen       c2       4
//

    vs_3_0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord o1.xy
    dcl_texcoord1 o2.xy
    dcl_position o3
    dp4 o1.x, v0, c2
    dp4 o1.y, v0, c3
    dp4 o2.x, v0, c4
    dp4 o2.y, v0, c5
    dp4 o3.x, v0, c0
    dp4 o3.y, v0, c1
    mov o0, v1
    mov o3.zw, v0

// approximately 8 instruction slots used
#endif

const BYTE pBinary_VTexTGTexTGVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      2,   0,   4,   0,  10,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   4,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   5,   0, 
      1, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      9,   0,   0,   3,   1,   0, 
      1, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   2, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   1, 224,   0,   0, 
    228, 144,   4,   0, 228, 160, 
      9,   0,   0,   3,   2,   0, 
      2, 224,   0,   0, 228, 144, 
      5,   0, 228, 160,   9,   0, 
      0,   3,   3,   0,   1, 224, 
      0,   0, 228, 144,   0,   0, 
    228, 160,   9,   0,   0,   3, 
      3,   0,   2, 224,   0,   0, 
    228, 144,   1,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   1,   0, 228, 144, 
      1,   0,   0,   2,   3,   0, 
     12, 224,   0,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VTexTG.hlsl.h /Vn pBinary_VTexTG
//    D3D9/VTexTG.hlsl
//
//
// Parameters:
//
//   float4 mvp[2];
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//   texgen       c2       2
//

    vs_3_0
    dcl_position v0
    dcl_texcoord o0.xy
    dcl_position o1
    dp4 o0.x, v0, c2
    dp4 o0.y, v0, c3
    dp4 o1.x, v0, c0
    dp4 o1.y, v0, c1
    mov o1.zw, v0

// approximately 5 instruction slots used
#endif

const BYTE pBinary_VTexTG[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      2,   0,   2,   0,  10,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      9,   0,   0,   3,   0,   0, 
      1, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   0,   0,   2, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   1, 224,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      2, 224,   0,   0, 228, 144, 
      1,   0, 228, 160,   1,   0, 
      0,   2,   1,   0,  12, 224, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VTexTGCxform.hlsl.h /Vn
//    pBinary_VTexTGCxform D3D9/VTexTGCxform.hlsl
//
//
// Parameters:
//
//   float4 mvp[2];
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//   texgen       c2       2
//

    vs_3_0
    dcl_position v0
    dcl_texcoord o0.xy
    dcl_position o1
    dp4 o0.x, v0, c2
    dp4 o0.y, v0, c3
    dp4 o1.x, v0, c0
    dp4 o1.y, v0, c1
    mov o1.zw, v0

// approximately 5 instruction slots used
#endif

const BYTE pBinary_VTexTGCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      2,   0,   2,   0,  10,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      9,   0,   0,   3,   0,   0, 
      1, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   0,   0,   2, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   1, 224,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      2, 224,   0,   0, 228, 144, 
      1,   0, 228, 160,   1,   0, 
      0,   2,   1,   0,  12, 224, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VTexTGCxformVacolorVafactor.hlsl.h
//    /Vn pBinary_VTexTGCxformVacolorVafactor
//    D3D9/VTexTGCxformVacolorVafactor.hlsl
//
//
// Parameters:
//
//   float4 mvp[2];
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//   texgen       c2       2
//

    vs_3_0
    dcl_position v0
    dcl_color v1
    dcl_color1 v2
    dcl_color o0
    dcl_color1 o1
    dcl_texcoord o2.xy
    dcl_position o3
    dp4 o2.x, v0, c2
    dp4 o2.y, v0, c3
    dp4 o3.x, v0, c0
    dp4 o3.y, v0, c1
    mov o0, v1
    mov o1, v2
    mov o3.zw, v0

// approximately 7 instruction slots used
#endif

const BYTE pBinary_VTexTGCxformVacolorVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      2,   0,   2,   0,  10,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      9,   0,   0,   3,   2,   0, 
      1, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   2,   0,   2, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160,   9,   0,   0,   3, 
      3,   0,   1, 224,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   3,   0, 
      2, 224,   0,   0, 228, 144, 
      1,   0, 228, 160,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      1,   0, 228, 144,   1,   0, 
      0,   2,   1,   0,  15, 224, 
      2,   0, 228, 144,   1,   0, 
      0,   2,   3,   0,  12, 224, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VTexTGCxformVafactor.hlsl.h /Vn
//    pBinary_VTexTGCxformVafactor D3D9/VTexTGCxformVafactor.hlsl
//
//
// Parameters:
//
//   float4 mvp[2];
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//   texgen       c2       2
//

    vs_3_0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord o1.xy
    dcl_position o2
    dp4 o1.x, v0, c2
    dp4 o1.y, v0, c3
    dp4 o2.x, v0, c0
    dp4 o2.y, v0, c1
    mov o0, v1
    mov o2.zw, v0

// approximately 6 instruction slots used
#endif

const BYTE pBinary_VTexTGCxformVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      2,   0,   2,   0,  10,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      9,   0,   0,   3,   1,   0, 
      1, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   2, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   1, 224,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   2,   0, 
      2, 224,   0,   0, 228, 144, 
      1,   0, 228, 160,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      1,   0, 228, 144,   1,   0, 
      0,   2,   2,   0,  12, 224, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VTexTGVacolorVafactor.hlsl.h /Vn
//    pBinary_VTexTGVacolorVafactor D3D9/VTexTGVacolorVafactor.hlsl
//
//
// Parameters:
//
//   float4 mvp[2];
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//   texgen       c2       2
//

    vs_3_0
    dcl_position v0
    dcl_color v1
    dcl_color1 v2
    dcl_color o0
    dcl_color1 o1
    dcl_texcoord o2.xy
    dcl_position o3
    dp4 o2.x, v0, c2
    dp4 o2.y, v0, c3
    dp4 o3.x, v0, c0
    dp4 o3.y, v0, c1
    mov o0, v1
    mov o1, v2
    mov o3.zw, v0

// approximately 7 instruction slots used
#endif

const BYTE pBinary_VTexTGVacolorVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      2,   0,   2,   0,  10,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      9,   0,   0,   3,   2,   0, 
      1, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   2,   0,   2, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160,   9,   0,   0,   3, 
      3,   0,   1, 224,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   3,   0, 
      2, 224,   0,   0, 228, 144, 
      1,   0, 228, 160,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      1,   0, 228, 144,   1,   0, 
      0,   2,   1,   0,  15, 224, 
      2,   0, 228, 144,   1,   0, 
      0,   2,   3,   0,  12, 224, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VTexTGVafactor.hlsl.h /Vn
//    pBinary_VTexTGVafactor D3D9/VTexTGVafactor.hlsl
//
//
// Parameters:
//
//   float4 mvp[2];
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//   texgen       c2       2
//

    vs_3_0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord o1.xy
    dcl_position o2
    dp4 o1.x, v0, c2
    dp4 o1.y, v0, c3
    dp4 o2.x, v0, c0
    dp4 o2.y, v0, c1
    mov o0, v1
    mov o2.zw, v0

// approximately 6 instruction slots used
#endif

const BYTE pBinary_VTexTGVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      2,   0,   2,   0,  10,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      9,   0,   0,   3,   1,   0, 
      1, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   2, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   1, 224,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   2,   0, 
      2, 224,   0,   0, 228, 144, 
      1,   0, 228, 160,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      1,   0, 228, 144,   1,   0, 
      0,   2,   2,   0,  12, 224, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VCxformVacolor.hlsl.h /Vn
//    pBinary_VCxformVacolor D3D9/VCxformVacolor.hlsl
//
//
// Parameters:
//
//   float4 mvp[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//

    vs_3_0
    dcl_position v0
    dcl_color v1
    dcl_color o0
    dcl_position o1
    dp4 o1.x, v0, c0
    dp4 o1.y, v0, c1
    mov o0, v1
    mov o1.zw, v0

// approximately 4 instruction slots used
#endif

const BYTE pBinary_VCxformVacolor[] =
{
      0,   3, 254, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    109, 118, 112,   0,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 224,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      1,   0,  15, 224,   9,   0, 
      0,   3,   1,   0,   1, 224, 
      0,   0, 228, 144,   0,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   2, 224,   0,   0, 
    228, 144,   1,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   1,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     12, 224,   0,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VCxformVacolorVafactor.hlsl.h /Vn
//    pBinary_VCxformVacolorVafactor D3D9/VCxformVacolorVafactor.hlsl
//
//
// Parameters:
//
//   float4 mvp[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//

    vs_3_0
    dcl_position v0
    dcl_color v1
    dcl_color1 v2
    dcl_color o0
    dcl_color1 o1
    dcl_position o2
    dp4 o2.x, v0, c0
    dp4 o2.y, v0, c1
    mov o0, v1
    mov o1, v2
    mov o2.zw, v0

// approximately 5 instruction slots used
#endif

const BYTE pBinary_VCxformVacolorVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    109, 118, 112,   0,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      2,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 224,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      1,   0,  15, 224,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      2,   0,  15, 224,   9,   0, 
      0,   3,   2,   0,   1, 224, 
      0,   0, 228, 144,   0,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   2, 224,   0,   0, 
    228, 144,   1,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   1,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     15, 224,   2,   0, 228, 144, 
      1,   0,   0,   2,   2,   0, 
     12, 224,   0,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VVacolor.hlsl.h /Vn
//    pBinary_VVacolor D3D9/VVacolor.hlsl
//
//
// Parameters:
//
//   float4 mvp[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//

    vs_3_0
    dcl_position v0
    dcl_color v1
    dcl_color o0
    dcl_position o1
    dp4 o1.x, v0, c0
    dp4 o1.y, v0, c1
    mov o0, v1
    mov o1.zw, v0

// approximately 4 instruction slots used
#endif

const BYTE pBinary_VVacolor[] =
{
      0,   3, 254, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    109, 118, 112,   0,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 224,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      1,   0,  15, 224,   9,   0, 
      0,   3,   1,   0,   1, 224, 
      0,   0, 228, 144,   0,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   2, 224,   0,   0, 
    228, 144,   1,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   1,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     12, 224,   0,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VVacolorVafactor.hlsl.h /Vn
//    pBinary_VVacolorVafactor D3D9/VVacolorVafactor.hlsl
//
//
// Parameters:
//
//   float4 mvp[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//

    vs_3_0
    dcl_position v0
    dcl_color v1
    dcl_color1 v2
    dcl_color o0
    dcl_color1 o1
    dcl_position o2
    dp4 o2.x, v0, c0
    dp4 o2.y, v0, c1
    mov o0, v1
    mov o1, v2
    mov o2.zw, v0

// approximately 5 instruction slots used
#endif

const BYTE pBinary_VVacolorVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    109, 118, 112,   0,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      2,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      0,   0,  15, 224,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      1,   0,  15, 224,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      2,   0,  15, 224,   9,   0, 
      0,   3,   2,   0,   1, 224, 
      0,   0, 228, 144,   0,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   2, 224,   0,   0, 
    228, 144,   1,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   1,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     15, 224,   2,   0, 228, 144, 
      1,   0,   0,   2,   2,   0, 
     12, 224,   0,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FBox2InnerShadowKnockout.hlsl.h /Vn
//    pBinary_FBox2InnerShadowKnockout D3D9/FBox2InnerShadowKnockout.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 fsize;
//   float2 offset;
//   float4 scolor;
//   sampler2D srctex;
//   float2 srctexscale;
//   sampler2D tex;
//   float2 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   fsize        c2       1
//   offset       c3       1
//   scolor       c4       1
//   srctexscale  c6       1
//   texscale     c7       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c5, 0, 0, 1, 0
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c5.x
    mov r1.x, c5.x
    mov r1.y, -c2.x
    rep i0
      break_lt c2.x, r1.y
      add r2.x, r1.y, c3.x
      mov r3.x, r1.x
      mov r3.y, -c2.y
      rep i0
        break_lt c2.y, r3.y
        add r2.y, r3.y, c3.y
        mad_pp r0.xy, r2, c7, v0
        texldl_pp r4, r0, s1
        add r3.x, r3.x, r4.w
        add r3.y, r3.y, c5.z
      endrep
      mov r1.x, r3.x
      add r1.y, r1.y, c5.z
    endrep
    mul r0.x, r1.x, c2.w
    mul r0.x, r0.x, c2.z
    mul_pp r1.xy, c6, v0
    mov r1.zw, c5.x
    texldl_pp r1, r1, s0
    lrp r2, r0.x, r1, c4
    mad r0, r2, r1.w, -r1
    mul r0.xyz, r0, c1
    mul r1, r0.w, c0
    mad oC0, r0, c1.w, r1

// approximately 41 instruction slots used (4 texture, 37 arithmetic)
#endif

const BYTE pBinary_FBox2InnerShadowKnockout[] =
{
      0,   3, 255, 255, 254, 255, 
    101,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  92,   1, 
      0,   0,   0,   3, 255, 255, 
      9,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     85,   1,   0,   0, 208,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 216,   0, 
      0,   0,   0,   0,   0,   0, 
    232,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    216,   0,   0,   0,   0,   0, 
      0,   0, 238,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 216,   0,   0,   0, 
      0,   0,   0,   0, 244,   0, 
      0,   0,   2,   0,   3,   0, 
      1,   0,  14,   0, 252,   0, 
      0,   0,   0,   0,   0,   0, 
     12,   1,   0,   0,   2,   0, 
      4,   0,   1,   0,  18,   0, 
    216,   0,   0,   0,   0,   0, 
      0,   0,  19,   1,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0,  28,   1,   0,   0, 
      0,   0,   0,   0,  44,   1, 
      0,   0,   2,   0,   6,   0, 
      1,   0,  26,   0, 252,   0, 
      0,   0,   0,   0,   0,   0, 
     56,   1,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
     60,   1,   0,   0,   0,   0, 
      0,   0,  76,   1,   0,   0, 
      2,   0,   7,   0,   1,   0, 
     30,   0, 252,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 102, 115, 
    105, 122, 101,   0, 111, 102, 
    102, 115, 101, 116,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      2,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 115,  99, 
    111, 108, 111, 114,   0, 115, 
    114,  99, 116, 101, 120,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    115, 114,  99, 116, 101, 120, 
    115,  99,  97, 108, 101,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120, 115, 
     99,  97, 108, 101,   0, 112, 
    115,  95,  51,  95,  48,   0, 
     77, 105,  99, 114, 111, 115, 
    111, 102, 116,  32,  40,  82, 
     41,  32,  72,  76,  83,  76, 
     32,  83, 104,  97, 100, 101, 
    114,  32,  67, 111, 109, 112, 
    105, 108, 101, 114,  32,  57, 
     46,  50,  57,  46,  57,  53, 
     50,  46,  51,  49,  49,  49, 
      0, 171, 171, 171,  81,   0, 
      0,   5,   5,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0, 128,  63, 
      0,   0,   0,   0,  48,   0, 
      0,   5,   0,   0,  15, 240, 
    255,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,   1,   0, 
      0,   2,   0,   0,  12, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   2, 128, 
      2,   0,   0, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   2,   0, 
      0, 160,   1,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      1, 128,   1,   0,  85, 128, 
      3,   0,   0, 160,   1,   0, 
      0,   2,   3,   0,   1, 128, 
      1,   0,   0, 128,   1,   0, 
      0,   2,   3,   0,   2, 128, 
      2,   0,  85, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   2,   0, 
     85, 160,   3,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      2, 128,   3,   0,  85, 128, 
      3,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,  35, 128, 
      2,   0, 228, 128,   7,   0, 
    228, 160,   0,   0, 228, 144, 
     95,   0,   0,   3,   4,   0, 
     47, 128,   0,   0, 228, 128, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      3,   0,   0, 128,   4,   0, 
    255, 128,   2,   0,   0,   3, 
      3,   0,   2, 128,   3,   0, 
     85, 128,   5,   0, 170, 160, 
     39,   0,   0,   0,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      3,   0,   0, 128,   2,   0, 
      0,   3,   1,   0,   2, 128, 
      1,   0,  85, 128,   5,   0, 
    170, 160,  39,   0,   0,   0, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   1,   0,   0, 128, 
      2,   0, 255, 160,   5,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   2,   0, 
    170, 160,   5,   0,   0,   3, 
      1,   0,  35, 128,   6,   0, 
    228, 160,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     12, 128,   5,   0,   0, 160, 
     95,   0,   0,   3,   1,   0, 
     47, 128,   1,   0, 228, 128, 
      0,   8, 228, 160,  18,   0, 
      0,   4,   2,   0,  15, 128, 
      0,   0,   0, 128,   1,   0, 
    228, 128,   4,   0, 228, 160, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   2,   0, 228, 128, 
      1,   0, 255, 128,   1,   0, 
    228, 129,   5,   0,   0,   3, 
      0,   0,   7, 128,   0,   0, 
    228, 128,   1,   0, 228, 160, 
      5,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 255, 128, 
      0,   0, 228, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    255, 160,   1,   0, 228, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh
//    D3D9/FBox2InnerShadowKnockoutHighlight.hlsl.h /Vn
//    pBinary_FBox2InnerShadowKnockoutHighlight
//    D3D9/FBox2InnerShadowKnockoutHighlight.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 fsize;
//   float2 offset;
//   float4 scolor;
//   float4 scolor2;
//   sampler2D srctex;
//   float2 srctexscale;
//   sampler2D tex;
//   float2 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   fsize        c2       1
//   offset       c3       1
//   scolor       c4       1
//   scolor2      c5       1
//   srctexscale  c6       1
//   texscale     c7       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c8, 0, 0, 1, 0.5
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c8.x
    mov r1.zw, c8.x
    mov r2.yz, c8.x
    mov r2.x, -c2.x
    rep i0
      break_lt c2.x, r2.x
      add r3.x, r2.x, c3.x
      mov r4.xy, r2.yzzw
      mov r4.z, -c2.y
      rep i0
        break_lt c2.y, r4.z
        add r3.y, r4.z, c3.y
        mad_pp r0.xy, r3, c7, v0
        texldl_pp r5, r0, s1
        add r4.y, r4.y, r5.w
        mad_pp r1.xy, r3, -c7, v0
        texldl_pp r5, r1, s1
        add r4.x, r4.x, r5.w
        add r4.z, r4.z, c8.z
      endrep
      mov r2.yz, r4.xxyw
      add r2.x, r2.x, c8.z
    endrep
    mul r0.yz, r2, c2.w
    mul r0.x, r0.z, c2.z
    mul_pp r1.xy, c6, v0
    mov r1.zw, c8.x
    texldl_pp r1, r1, s0
    add r0.xy, -r0, c8.z
    mad_sat r0.xy, r0.yxzw, -c8.w, r0
    mul r2, r0.y, c5
    mad r2, c4, r0.x, r2
    add r0.x, -r0.x, c8.z
    add r0.x, -r0.y, r0.x
    mad r0, r1, r0.x, r2
    mad r0, r0, r1.w, -r1
    mul r0.xyz, r0, c1
    mul r1, r0.w, c0
    mad oC0, r0, c1.w, r1

// approximately 52 instruction slots used (6 texture, 46 arithmetic)
#endif

const BYTE pBinary_FBox2InnerShadowKnockoutHighlight[] =
{
      0,   3, 255, 255, 254, 255, 
    108,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 120,   1, 
      0,   0,   0,   3, 255, 255, 
     10,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    113,   1,   0,   0, 228,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 236,   0, 
      0,   0,   0,   0,   0,   0, 
    252,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    236,   0,   0,   0,   0,   0, 
      0,   0,   2,   1,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 236,   0,   0,   0, 
      0,   0,   0,   0,   8,   1, 
      0,   0,   2,   0,   3,   0, 
      1,   0,  14,   0,  16,   1, 
      0,   0,   0,   0,   0,   0, 
     32,   1,   0,   0,   2,   0, 
      4,   0,   1,   0,  18,   0, 
    236,   0,   0,   0,   0,   0, 
      0,   0,  39,   1,   0,   0, 
      2,   0,   5,   0,   1,   0, 
     22,   0, 236,   0,   0,   0, 
      0,   0,   0,   0,  47,   1, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   1, 
      0,   0,   0,   0,   0,   0, 
     72,   1,   0,   0,   2,   0, 
      6,   0,   1,   0,  26,   0, 
     16,   1,   0,   0,   0,   0, 
      0,   0,  84,   1,   0,   0, 
      3,   0,   1,   0,   1,   0, 
      6,   0,  88,   1,   0,   0, 
      0,   0,   0,   0, 104,   1, 
      0,   0,   2,   0,   7,   0, 
      1,   0,  30,   0,  16,   1, 
      0,   0,   0,   0,   0,   0, 
     99, 120,  97, 100, 100,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120, 109, 117, 108,   0, 
    102, 115, 105, 122, 101,   0, 
    111, 102, 102, 115, 101, 116, 
      0, 171,   1,   0,   3,   0, 
      1,   0,   2,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    115,  99, 111, 108, 111, 114, 
      0, 115,  99, 111, 108, 111, 
    114,  50,   0, 115, 114,  99, 
    116, 101, 120,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 115, 114, 
     99, 116, 101, 120, 115,  99, 
     97, 108, 101,   0, 116, 101, 
    120,   0,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120, 115,  99,  97, 
    108, 101,   0, 112, 115,  95, 
     51,  95,  48,   0,  77, 105, 
     99, 114, 111, 115, 111, 102, 
    116,  32,  40,  82,  41,  32, 
     72,  76,  83,  76,  32,  83, 
    104,  97, 100, 101, 114,  32, 
     67, 111, 109, 112, 105, 108, 
    101, 114,  32,  57,  46,  50, 
     57,  46,  57,  53,  50,  46, 
     51,  49,  49,  49,   0, 171, 
    171, 171,  81,   0,   0,   5, 
      8,   0,  15, 160,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,  63,  48,   0,   0,   5, 
      0,   0,  15, 240, 255,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,   1,   0,   0,   2, 
      0,   0,  12, 128,   8,   0, 
      0, 160,   1,   0,   0,   2, 
      1,   0,  12, 128,   8,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   6, 128,   8,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   1, 128,   2,   0, 
      0, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   2,   0,   0, 160, 
      2,   0,   0, 128,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      2,   0,   0, 128,   3,   0, 
      0, 160,   1,   0,   0,   2, 
      4,   0,   3, 128,   2,   0, 
    233, 128,   1,   0,   0,   2, 
      4,   0,   4, 128,   2,   0, 
     85, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   2,   0,  85, 160, 
      4,   0, 170, 128,   2,   0, 
      0,   3,   3,   0,   2, 128, 
      4,   0, 170, 128,   3,   0, 
     85, 160,   4,   0,   0,   4, 
      0,   0,  35, 128,   3,   0, 
    228, 128,   7,   0, 228, 160, 
      0,   0, 228, 144,  95,   0, 
      0,   3,   5,   0,  47, 128, 
      0,   0, 228, 128,   1,   8, 
    228, 160,   2,   0,   0,   3, 
      4,   0,   2, 128,   4,   0, 
     85, 128,   5,   0, 255, 128, 
      4,   0,   0,   4,   1,   0, 
     35, 128,   3,   0, 228, 128, 
      7,   0, 228, 161,   0,   0, 
    228, 144,  95,   0,   0,   3, 
      5,   0,  47, 128,   1,   0, 
    228, 128,   1,   8, 228, 160, 
      2,   0,   0,   3,   4,   0, 
      1, 128,   4,   0,   0, 128, 
      5,   0, 255, 128,   2,   0, 
      0,   3,   4,   0,   4, 128, 
      4,   0, 170, 128,   8,   0, 
    170, 160,  39,   0,   0,   0, 
      1,   0,   0,   2,   2,   0, 
      6, 128,   4,   0, 208, 128, 
      2,   0,   0,   3,   2,   0, 
      1, 128,   2,   0,   0, 128, 
      8,   0, 170, 160,  39,   0, 
      0,   0,   5,   0,   0,   3, 
      0,   0,   6, 128,   2,   0, 
    228, 128,   2,   0, 255, 160, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   0,   0, 170, 128, 
      2,   0, 170, 160,   5,   0, 
      0,   3,   1,   0,  35, 128, 
      6,   0, 228, 160,   0,   0, 
    228, 144,   1,   0,   0,   2, 
      1,   0,  12, 128,   8,   0, 
      0, 160,  95,   0,   0,   3, 
      1,   0,  47, 128,   1,   0, 
    228, 128,   0,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      3, 128,   0,   0, 228, 129, 
      8,   0, 170, 160,   4,   0, 
      0,   4,   0,   0,  19, 128, 
      0,   0, 225, 128,   8,   0, 
    255, 161,   0,   0, 228, 128, 
      5,   0,   0,   3,   2,   0, 
     15, 128,   0,   0,  85, 128, 
      5,   0, 228, 160,   4,   0, 
      0,   4,   2,   0,  15, 128, 
      4,   0, 228, 160,   0,   0, 
      0, 128,   2,   0, 228, 128, 
      2,   0,   0,   3,   0,   0, 
      1, 128,   0,   0,   0, 129, 
      8,   0, 170, 160,   2,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,  85, 129,   0,   0, 
      0, 128,   4,   0,   0,   4, 
      0,   0,  15, 128,   1,   0, 
    228, 128,   0,   0,   0, 128, 
      2,   0, 228, 128,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    255, 128,   1,   0, 228, 129, 
      5,   0,   0,   3,   0,   0, 
      7, 128,   0,   0, 228, 128, 
      1,   0, 228, 160,   5,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 255, 128,   0,   0, 
    228, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    228, 128,   1,   0, 255, 160, 
      1,   0, 228, 128, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FBox2InnerShadowKnockoutMul.hlsl.h
//    /Vn pBinary_FBox2InnerShadowKnockoutMul
//    D3D9/FBox2InnerShadowKnockoutMul.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 fsize;
//   float2 offset;
//   float4 scolor;
//   sampler2D srctex;
//   float2 srctexscale;
//   sampler2D tex;
//   float2 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   fsize        c2       1
//   offset       c3       1
//   scolor       c4       1
//   srctexscale  c6       1
//   texscale     c7       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c5, 0, 0, 1, -1
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c5.x
    mov r1.x, c5.x
    mov r1.y, -c2.x
    rep i0
      break_lt c2.x, r1.y
      add r2.x, r1.y, c3.x
      mov r3.x, r1.x
      mov r3.y, -c2.y
      rep i0
        break_lt c2.y, r3.y
        add r2.y, r3.y, c3.y
        mad_pp r0.xy, r2, c7, v0
        texldl_pp r4, r0, s1
        add r3.x, r3.x, r4.w
        add r3.y, r3.y, c5.z
      endrep
      mov r1.x, r3.x
      add r1.y, r1.y, c5.z
    endrep
    mul r0.x, r1.x, c2.w
    mul r0.x, r0.x, c2.z
    mul_pp r1.xy, c6, v0
    mov r1.zw, c5.x
    texldl_pp r1, r1, s0
    lrp r2, r0.x, r1, c4
    mad r0, r2, r1.w, -r1
    mul r0.xyz, r0, c1
    mul r1, r0.w, c0
    mad r0, r0, c1.w, r1
    add r1, r0, c5.w
    mad oC0, r0.w, r1, c5.z

// approximately 43 instruction slots used (4 texture, 39 arithmetic)
#endif

const BYTE pBinary_FBox2InnerShadowKnockoutMul[] =
{
      0,   3, 255, 255, 254, 255, 
    101,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  92,   1, 
      0,   0,   0,   3, 255, 255, 
      9,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     85,   1,   0,   0, 208,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 216,   0, 
      0,   0,   0,   0,   0,   0, 
    232,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    216,   0,   0,   0,   0,   0, 
      0,   0, 238,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 216,   0,   0,   0, 
      0,   0,   0,   0, 244,   0, 
      0,   0,   2,   0,   3,   0, 
      1,   0,  14,   0, 252,   0, 
      0,   0,   0,   0,   0,   0, 
     12,   1,   0,   0,   2,   0, 
      4,   0,   1,   0,  18,   0, 
    216,   0,   0,   0,   0,   0, 
      0,   0,  19,   1,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0,  28,   1,   0,   0, 
      0,   0,   0,   0,  44,   1, 
      0,   0,   2,   0,   6,   0, 
      1,   0,  26,   0, 252,   0, 
      0,   0,   0,   0,   0,   0, 
     56,   1,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
     60,   1,   0,   0,   0,   0, 
      0,   0,  76,   1,   0,   0, 
      2,   0,   7,   0,   1,   0, 
     30,   0, 252,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 102, 115, 
    105, 122, 101,   0, 111, 102, 
    102, 115, 101, 116,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      2,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 115,  99, 
    111, 108, 111, 114,   0, 115, 
    114,  99, 116, 101, 120,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    115, 114,  99, 116, 101, 120, 
    115,  99,  97, 108, 101,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120, 115, 
     99,  97, 108, 101,   0, 112, 
    115,  95,  51,  95,  48,   0, 
     77, 105,  99, 114, 111, 115, 
    111, 102, 116,  32,  40,  82, 
     41,  32,  72,  76,  83,  76, 
     32,  83, 104,  97, 100, 101, 
    114,  32,  67, 111, 109, 112, 
    105, 108, 101, 114,  32,  57, 
     46,  50,  57,  46,  57,  53, 
     50,  46,  51,  49,  49,  49, 
      0, 171, 171, 171,  81,   0, 
      0,   5,   5,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0, 128,  63, 
      0,   0, 128, 191,  48,   0, 
      0,   5,   0,   0,  15, 240, 
    255,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,   1,   0, 
      0,   2,   0,   0,  12, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   2, 128, 
      2,   0,   0, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   2,   0, 
      0, 160,   1,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      1, 128,   1,   0,  85, 128, 
      3,   0,   0, 160,   1,   0, 
      0,   2,   3,   0,   1, 128, 
      1,   0,   0, 128,   1,   0, 
      0,   2,   3,   0,   2, 128, 
      2,   0,  85, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   2,   0, 
     85, 160,   3,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      2, 128,   3,   0,  85, 128, 
      3,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,  35, 128, 
      2,   0, 228, 128,   7,   0, 
    228, 160,   0,   0, 228, 144, 
     95,   0,   0,   3,   4,   0, 
     47, 128,   0,   0, 228, 128, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      3,   0,   0, 128,   4,   0, 
    255, 128,   2,   0,   0,   3, 
      3,   0,   2, 128,   3,   0, 
     85, 128,   5,   0, 170, 160, 
     39,   0,   0,   0,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      3,   0,   0, 128,   2,   0, 
      0,   3,   1,   0,   2, 128, 
      1,   0,  85, 128,   5,   0, 
    170, 160,  39,   0,   0,   0, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   1,   0,   0, 128, 
      2,   0, 255, 160,   5,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   2,   0, 
    170, 160,   5,   0,   0,   3, 
      1,   0,  35, 128,   6,   0, 
    228, 160,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     12, 128,   5,   0,   0, 160, 
     95,   0,   0,   3,   1,   0, 
     47, 128,   1,   0, 228, 128, 
      0,   8, 228, 160,  18,   0, 
      0,   4,   2,   0,  15, 128, 
      0,   0,   0, 128,   1,   0, 
    228, 128,   4,   0, 228, 160, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   2,   0, 228, 128, 
      1,   0, 255, 128,   1,   0, 
    228, 129,   5,   0,   0,   3, 
      0,   0,   7, 128,   0,   0, 
    228, 128,   1,   0, 228, 160, 
      5,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 255, 128, 
      0,   0, 228, 160,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    255, 160,   1,   0, 228, 128, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      5,   0, 255, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   5,   0, 170, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh
//    D3D9/FBox2InnerShadowKnockoutMulHighlight.hlsl.h /Vn
//    pBinary_FBox2InnerShadowKnockoutMulHighlight
//    D3D9/FBox2InnerShadowKnockoutMulHighlight.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 fsize;
//   float2 offset;
//   float4 scolor;
//   float4 scolor2;
//   sampler2D srctex;
//   float2 srctexscale;
//   sampler2D tex;
//   float2 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   fsize        c2       1
//   offset       c3       1
//   scolor       c4       1
//   scolor2      c5       1
//   srctexscale  c6       1
//   texscale     c7       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c8, 0, 0, 1, 0.5
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c8.x
    mov r1.zw, c8.x
    mov r2.yz, c8.x
    mov r2.x, -c2.x
    rep i0
      break_lt c2.x, r2.x
      add r3.x, r2.x, c3.x
      mov r4.xy, r2.yzzw
      mov r4.z, -c2.y
      rep i0
        break_lt c2.y, r4.z
        add r3.y, r4.z, c3.y
        mad_pp r0.xy, r3, c7, v0
        texldl_pp r5, r0, s1
        add r4.y, r4.y, r5.w
        mad_pp r1.xy, r3, -c7, v0
        texldl_pp r5, r1, s1
        add r4.x, r4.x, r5.w
        add r4.z, r4.z, c8.z
      endrep
      mov r2.yz, r4.xxyw
      add r2.x, r2.x, c8.z
    endrep
    mul r0.yz, r2, c2.w
    mul r0.x, r0.z, c2.z
    mul_pp r1.xy, c6, v0
    mov r1.zw, c8.x
    texldl_pp r1, r1, s0
    add r0.xy, -r0, c8.z
    mad_sat r0.xy, r0.yxzw, -c8.w, r0
    mul r2, r0.y, c5
    mad r2, c4, r0.x, r2
    add r0.x, -r0.x, c8.z
    add r0.x, -r0.y, r0.x
    mad r0, r1, r0.x, r2
    mad r0, r0, r1.w, -r1
    mul r0.xyz, r0, c1
    mul r1, r0.w, c0
    mad r0, r0, c1.w, r1
    add r1, r0, -c8.z
    mad oC0, r0.w, r1, c8.z

// approximately 54 instruction slots used (6 texture, 48 arithmetic)
#endif

const BYTE pBinary_FBox2InnerShadowKnockoutMulHighlight[] =
{
      0,   3, 255, 255, 254, 255, 
    108,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 120,   1, 
      0,   0,   0,   3, 255, 255, 
     10,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    113,   1,   0,   0, 228,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 236,   0, 
      0,   0,   0,   0,   0,   0, 
    252,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    236,   0,   0,   0,   0,   0, 
      0,   0,   2,   1,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 236,   0,   0,   0, 
      0,   0,   0,   0,   8,   1, 
      0,   0,   2,   0,   3,   0, 
      1,   0,  14,   0,  16,   1, 
      0,   0,   0,   0,   0,   0, 
     32,   1,   0,   0,   2,   0, 
      4,   0,   1,   0,  18,   0, 
    236,   0,   0,   0,   0,   0, 
      0,   0,  39,   1,   0,   0, 
      2,   0,   5,   0,   1,   0, 
     22,   0, 236,   0,   0,   0, 
      0,   0,   0,   0,  47,   1, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   1, 
      0,   0,   0,   0,   0,   0, 
     72,   1,   0,   0,   2,   0, 
      6,   0,   1,   0,  26,   0, 
     16,   1,   0,   0,   0,   0, 
      0,   0,  84,   1,   0,   0, 
      3,   0,   1,   0,   1,   0, 
      6,   0,  88,   1,   0,   0, 
      0,   0,   0,   0, 104,   1, 
      0,   0,   2,   0,   7,   0, 
      1,   0,  30,   0,  16,   1, 
      0,   0,   0,   0,   0,   0, 
     99, 120,  97, 100, 100,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120, 109, 117, 108,   0, 
    102, 115, 105, 122, 101,   0, 
    111, 102, 102, 115, 101, 116, 
      0, 171,   1,   0,   3,   0, 
      1,   0,   2,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    115,  99, 111, 108, 111, 114, 
      0, 115,  99, 111, 108, 111, 
    114,  50,   0, 115, 114,  99, 
    116, 101, 120,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 115, 114, 
     99, 116, 101, 120, 115,  99, 
     97, 108, 101,   0, 116, 101, 
    120,   0,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120, 115,  99,  97, 
    108, 101,   0, 112, 115,  95, 
     51,  95,  48,   0,  77, 105, 
     99, 114, 111, 115, 111, 102, 
    116,  32,  40,  82,  41,  32, 
     72,  76,  83,  76,  32,  83, 
    104,  97, 100, 101, 114,  32, 
     67, 111, 109, 112, 105, 108, 
    101, 114,  32,  57,  46,  50, 
     57,  46,  57,  53,  50,  46, 
     51,  49,  49,  49,   0, 171, 
    171, 171,  81,   0,   0,   5, 
      8,   0,  15, 160,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,  63,  48,   0,   0,   5, 
      0,   0,  15, 240, 255,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,   1,   0,   0,   2, 
      0,   0,  12, 128,   8,   0, 
      0, 160,   1,   0,   0,   2, 
      1,   0,  12, 128,   8,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   6, 128,   8,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   1, 128,   2,   0, 
      0, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   2,   0,   0, 160, 
      2,   0,   0, 128,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      2,   0,   0, 128,   3,   0, 
      0, 160,   1,   0,   0,   2, 
      4,   0,   3, 128,   2,   0, 
    233, 128,   1,   0,   0,   2, 
      4,   0,   4, 128,   2,   0, 
     85, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   2,   0,  85, 160, 
      4,   0, 170, 128,   2,   0, 
      0,   3,   3,   0,   2, 128, 
      4,   0, 170, 128,   3,   0, 
     85, 160,   4,   0,   0,   4, 
      0,   0,  35, 128,   3,   0, 
    228, 128,   7,   0, 228, 160, 
      0,   0, 228, 144,  95,   0, 
      0,   3,   5,   0,  47, 128, 
      0,   0, 228, 128,   1,   8, 
    228, 160,   2,   0,   0,   3, 
      4,   0,   2, 128,   4,   0, 
     85, 128,   5,   0, 255, 128, 
      4,   0,   0,   4,   1,   0, 
     35, 128,   3,   0, 228, 128, 
      7,   0, 228, 161,   0,   0, 
    228, 144,  95,   0,   0,   3, 
      5,   0,  47, 128,   1,   0, 
    228, 128,   1,   8, 228, 160, 
      2,   0,   0,   3,   4,   0, 
      1, 128,   4,   0,   0, 128, 
      5,   0, 255, 128,   2,   0, 
      0,   3,   4,   0,   4, 128, 
      4,   0, 170, 128,   8,   0, 
    170, 160,  39,   0,   0,   0, 
      1,   0,   0,   2,   2,   0, 
      6, 128,   4,   0, 208, 128, 
      2,   0,   0,   3,   2,   0, 
      1, 128,   2,   0,   0, 128, 
      8,   0, 170, 160,  39,   0, 
      0,   0,   5,   0,   0,   3, 
      0,   0,   6, 128,   2,   0, 
    228, 128,   2,   0, 255, 160, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   0,   0, 170, 128, 
      2,   0, 170, 160,   5,   0, 
      0,   3,   1,   0,  35, 128, 
      6,   0, 228, 160,   0,   0, 
    228, 144,   1,   0,   0,   2, 
      1,   0,  12, 128,   8,   0, 
      0, 160,  95,   0,   0,   3, 
      1,   0,  47, 128,   1,   0, 
    228, 128,   0,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      3, 128,   0,   0, 228, 129, 
      8,   0, 170, 160,   4,   0, 
      0,   4,   0,   0,  19, 128, 
      0,   0, 225, 128,   8,   0, 
    255, 161,   0,   0, 228, 128, 
      5,   0,   0,   3,   2,   0, 
     15, 128,   0,   0,  85, 128, 
      5,   0, 228, 160,   4,   0, 
      0,   4,   2,   0,  15, 128, 
      4,   0, 228, 160,   0,   0, 
      0, 128,   2,   0, 228, 128, 
      2,   0,   0,   3,   0,   0, 
      1, 128,   0,   0,   0, 129, 
      8,   0, 170, 160,   2,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,  85, 129,   0,   0, 
      0, 128,   4,   0,   0,   4, 
      0,   0,  15, 128,   1,   0, 
    228, 128,   0,   0,   0, 128, 
      2,   0, 228, 128,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    255, 128,   1,   0, 228, 129, 
      5,   0,   0,   3,   0,   0, 
      7, 128,   0,   0, 228, 128, 
      1,   0, 228, 160,   5,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 255, 128,   0,   0, 
    228, 160,   4,   0,   0,   4, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 255, 160, 
      1,   0, 228, 128,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   8,   0, 
    170, 161,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      8,   0, 170, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FBox2InnerShadow.hlsl.h /Vn
//    pBinary_FBox2InnerShadow D3D9/FBox2InnerShadow.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 fsize;
//   float2 offset;
//   float4 scolor;
//   sampler2D srctex;
//   float2 srctexscale;
//   sampler2D tex;
//   float2 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   fsize        c2       1
//   offset       c3       1
//   scolor       c4       1
//   srctexscale  c6       1
//   texscale     c7       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c5, 0, 0, 1, 0
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c5.x
    mov r1.x, c5.x
    mov r1.y, -c2.x
    rep i0
      break_lt c2.x, r1.y
      add r2.x, r1.y, c3.x
      mov r3.x, r1.x
      mov r3.y, -c2.y
      rep i0
        break_lt c2.y, r3.y
        add r2.y, r3.y, c3.y
        mad_pp r0.xy, r2, c7, v0
        texldl_pp r4, r0, s1
        add r3.x, r3.x, r4.w
        add r3.y, r3.y, c5.z
      endrep
      mov r1.x, r3.x
      add r1.y, r1.y, c5.z
    endrep
    mul r0.x, r1.x, c2.w
    mul r0.x, r0.x, c2.z
    mul_pp r1.xy, c6, v0
    mov r1.zw, c5.x
    texldl_pp r1, r1, s0
    lrp r2, r0.x, r1, c4
    mul r0, r1.w, r2
    mul r0.xyz, r0, c1
    mul r1, r0.w, c0
    mad oC0, r0, c1.w, r1

// approximately 41 instruction slots used (4 texture, 37 arithmetic)
#endif

const BYTE pBinary_FBox2InnerShadow[] =
{
      0,   3, 255, 255, 254, 255, 
    101,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  92,   1, 
      0,   0,   0,   3, 255, 255, 
      9,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     85,   1,   0,   0, 208,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 216,   0, 
      0,   0,   0,   0,   0,   0, 
    232,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    216,   0,   0,   0,   0,   0, 
      0,   0, 238,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 216,   0,   0,   0, 
      0,   0,   0,   0, 244,   0, 
      0,   0,   2,   0,   3,   0, 
      1,   0,  14,   0, 252,   0, 
      0,   0,   0,   0,   0,   0, 
     12,   1,   0,   0,   2,   0, 
      4,   0,   1,   0,  18,   0, 
    216,   0,   0,   0,   0,   0, 
      0,   0,  19,   1,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0,  28,   1,   0,   0, 
      0,   0,   0,   0,  44,   1, 
      0,   0,   2,   0,   6,   0, 
      1,   0,  26,   0, 252,   0, 
      0,   0,   0,   0,   0,   0, 
     56,   1,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
     60,   1,   0,   0,   0,   0, 
      0,   0,  76,   1,   0,   0, 
      2,   0,   7,   0,   1,   0, 
     30,   0, 252,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 102, 115, 
    105, 122, 101,   0, 111, 102, 
    102, 115, 101, 116,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      2,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 115,  99, 
    111, 108, 111, 114,   0, 115, 
    114,  99, 116, 101, 120,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    115, 114,  99, 116, 101, 120, 
    115,  99,  97, 108, 101,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120, 115, 
     99,  97, 108, 101,   0, 112, 
    115,  95,  51,  95,  48,   0, 
     77, 105,  99, 114, 111, 115, 
    111, 102, 116,  32,  40,  82, 
     41,  32,  72,  76,  83,  76, 
     32,  83, 104,  97, 100, 101, 
    114,  32,  67, 111, 109, 112, 
    105, 108, 101, 114,  32,  57, 
     46,  50,  57,  46,  57,  53, 
     50,  46,  51,  49,  49,  49, 
      0, 171, 171, 171,  81,   0, 
      0,   5,   5,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0, 128,  63, 
      0,   0,   0,   0,  48,   0, 
      0,   5,   0,   0,  15, 240, 
    255,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,   1,   0, 
      0,   2,   0,   0,  12, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   2, 128, 
      2,   0,   0, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   2,   0, 
      0, 160,   1,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      1, 128,   1,   0,  85, 128, 
      3,   0,   0, 160,   1,   0, 
      0,   2,   3,   0,   1, 128, 
      1,   0,   0, 128,   1,   0, 
      0,   2,   3,   0,   2, 128, 
      2,   0,  85, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   2,   0, 
     85, 160,   3,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      2, 128,   3,   0,  85, 128, 
      3,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,  35, 128, 
      2,   0, 228, 128,   7,   0, 
    228, 160,   0,   0, 228, 144, 
     95,   0,   0,   3,   4,   0, 
     47, 128,   0,   0, 228, 128, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      3,   0,   0, 128,   4,   0, 
    255, 128,   2,   0,   0,   3, 
      3,   0,   2, 128,   3,   0, 
     85, 128,   5,   0, 170, 160, 
     39,   0,   0,   0,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      3,   0,   0, 128,   2,   0, 
      0,   3,   1,   0,   2, 128, 
      1,   0,  85, 128,   5,   0, 
    170, 160,  39,   0,   0,   0, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   1,   0,   0, 128, 
      2,   0, 255, 160,   5,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   2,   0, 
    170, 160,   5,   0,   0,   3, 
      1,   0,  35, 128,   6,   0, 
    228, 160,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     12, 128,   5,   0,   0, 160, 
     95,   0,   0,   3,   1,   0, 
     47, 128,   1,   0, 228, 128, 
      0,   8, 228, 160,  18,   0, 
      0,   4,   2,   0,  15, 128, 
      0,   0,   0, 128,   1,   0, 
    228, 128,   4,   0, 228, 160, 
      5,   0,   0,   3,   0,   0, 
     15, 128,   1,   0, 255, 128, 
      2,   0, 228, 128,   5,   0, 
      0,   3,   0,   0,   7, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 160,   5,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    255, 128,   0,   0, 228, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 255, 160,   1,   0, 
    228, 128, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FBox2InnerShadowHighlight.hlsl.h
//    /Vn pBinary_FBox2InnerShadowHighlight
//    D3D9/FBox2InnerShadowHighlight.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 fsize;
//   float2 offset;
//   float4 scolor;
//   float4 scolor2;
//   sampler2D srctex;
//   float2 srctexscale;
//   sampler2D tex;
//   float2 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   fsize        c2       1
//   offset       c3       1
//   scolor       c4       1
//   scolor2      c5       1
//   srctexscale  c6       1
//   texscale     c7       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c8, 0, 0, 1, 0.5
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c8.x
    mov r1.zw, c8.x
    mov r2.yz, c8.x
    mov r2.x, -c2.x
    rep i0
      break_lt c2.x, r2.x
      add r3.x, r2.x, c3.x
      mov r4.xy, r2.yzzw
      mov r4.z, -c2.y
      rep i0
        break_lt c2.y, r4.z
        add r3.y, r4.z, c3.y
        mad_pp r0.xy, r3, c7, v0
        texldl_pp r5, r0, s1
        add r4.y, r4.y, r5.w
        mad_pp r1.xy, r3, -c7, v0
        texldl_pp r5, r1, s1
        add r4.x, r4.x, r5.w
        add r4.z, r4.z, c8.z
      endrep
      mov r2.yz, r4.xxyw
      add r2.x, r2.x, c8.z
    endrep
    mul r0.yz, r2, c2.w
    mul r0.x, r0.z, c2.z
    mul_pp r1.xy, c6, v0
    mov r1.zw, c8.x
    texldl_pp r1, r1, s0
    add r0.xy, -r0, c8.z
    mad_sat r0.xy, r0.yxzw, -c8.w, r0
    mul r2, r0.y, c5
    mad r2, c4, r0.x, r2
    add r0.x, -r0.x, c8.z
    add r0.x, -r0.y, r0.x
    mad r0, r1, r0.x, r2
    mul r0, r1.w, r0
    mul r0.xyz, r0, c1
    mul r1, r0.w, c0
    mad oC0, r0, c1.w, r1

// approximately 52 instruction slots used (6 texture, 46 arithmetic)
#endif

const BYTE pBinary_FBox2InnerShadowHighlight[] =
{
      0,   3, 255, 255, 254, 255, 
    108,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 120,   1, 
      0,   0,   0,   3, 255, 255, 
     10,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    113,   1,   0,   0, 228,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 236,   0, 
      0,   0,   0,   0,   0,   0, 
    252,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    236,   0,   0,   0,   0,   0, 
      0,   0,   2,   1,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 236,   0,   0,   0, 
      0,   0,   0,   0,   8,   1, 
      0,   0,   2,   0,   3,   0, 
      1,   0,  14,   0,  16,   1, 
      0,   0,   0,   0,   0,   0, 
     32,   1,   0,   0,   2,   0, 
      4,   0,   1,   0,  18,   0, 
    236,   0,   0,   0,   0,   0, 
      0,   0,  39,   1,   0,   0, 
      2,   0,   5,   0,   1,   0, 
     22,   0, 236,   0,   0,   0, 
      0,   0,   0,   0,  47,   1, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   1, 
      0,   0,   0,   0,   0,   0, 
     72,   1,   0,   0,   2,   0, 
      6,   0,   1,   0,  26,   0, 
     16,   1,   0,   0,   0,   0, 
      0,   0,  84,   1,   0,   0, 
      3,   0,   1,   0,   1,   0, 
      6,   0,  88,   1,   0,   0, 
      0,   0,   0,   0, 104,   1, 
      0,   0,   2,   0,   7,   0, 
      1,   0,  30,   0,  16,   1, 
      0,   0,   0,   0,   0,   0, 
     99, 120,  97, 100, 100,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120, 109, 117, 108,   0, 
    102, 115, 105, 122, 101,   0, 
    111, 102, 102, 115, 101, 116, 
      0, 171,   1,   0,   3,   0, 
      1,   0,   2,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    115,  99, 111, 108, 111, 114, 
      0, 115,  99, 111, 108, 111, 
    114,  50,   0, 115, 114,  99, 
    116, 101, 120,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 115, 114, 
     99, 116, 101, 120, 115,  99, 
     97, 108, 101,   0, 116, 101, 
    120,   0,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120, 115,  99,  97, 
    108, 101,   0, 112, 115,  95, 
     51,  95,  48,   0,  77, 105, 
     99, 114, 111, 115, 111, 102, 
    116,  32,  40,  82,  41,  32, 
     72,  76,  83,  76,  32,  83, 
    104,  97, 100, 101, 114,  32, 
     67, 111, 109, 112, 105, 108, 
    101, 114,  32,  57,  46,  50, 
     57,  46,  57,  53,  50,  46, 
     51,  49,  49,  49,   0, 171, 
    171, 171,  81,   0,   0,   5, 
      8,   0,  15, 160,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,  63,  48,   0,   0,   5, 
      0,   0,  15, 240, 255,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,   1,   0,   0,   2, 
      0,   0,  12, 128,   8,   0, 
      0, 160,   1,   0,   0,   2, 
      1,   0,  12, 128,   8,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   6, 128,   8,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   1, 128,   2,   0, 
      0, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   2,   0,   0, 160, 
      2,   0,   0, 128,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      2,   0,   0, 128,   3,   0, 
      0, 160,   1,   0,   0,   2, 
      4,   0,   3, 128,   2,   0, 
    233, 128,   1,   0,   0,   2, 
      4,   0,   4, 128,   2,   0, 
     85, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   2,   0,  85, 160, 
      4,   0, 170, 128,   2,   0, 
      0,   3,   3,   0,   2, 128, 
      4,   0, 170, 128,   3,   0, 
     85, 160,   4,   0,   0,   4, 
      0,   0,  35, 128,   3,   0, 
    228, 128,   7,   0, 228, 160, 
      0,   0, 228, 144,  95,   0, 
      0,   3,   5,   0,  47, 128, 
      0,   0, 228, 128,   1,   8, 
    228, 160,   2,   0,   0,   3, 
      4,   0,   2, 128,   4,   0, 
     85, 128,   5,   0, 255, 128, 
      4,   0,   0,   4,   1,   0, 
     35, 128,   3,   0, 228, 128, 
      7,   0, 228, 161,   0,   0, 
    228, 144,  95,   0,   0,   3, 
      5,   0,  47, 128,   1,   0, 
    228, 128,   1,   8, 228, 160, 
      2,   0,   0,   3,   4,   0, 
      1, 128,   4,   0,   0, 128, 
      5,   0, 255, 128,   2,   0, 
      0,   3,   4,   0,   4, 128, 
      4,   0, 170, 128,   8,   0, 
    170, 160,  39,   0,   0,   0, 
      1,   0,   0,   2,   2,   0, 
      6, 128,   4,   0, 208, 128, 
      2,   0,   0,   3,   2,   0, 
      1, 128,   2,   0,   0, 128, 
      8,   0, 170, 160,  39,   0, 
      0,   0,   5,   0,   0,   3, 
      0,   0,   6, 128,   2,   0, 
    228, 128,   2,   0, 255, 160, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   0,   0, 170, 128, 
      2,   0, 170, 160,   5,   0, 
      0,   3,   1,   0,  35, 128, 
      6,   0, 228, 160,   0,   0, 
    228, 144,   1,   0,   0,   2, 
      1,   0,  12, 128,   8,   0, 
      0, 160,  95,   0,   0,   3, 
      1,   0,  47, 128,   1,   0, 
    228, 128,   0,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      3, 128,   0,   0, 228, 129, 
      8,   0, 170, 160,   4,   0, 
      0,   4,   0,   0,  19, 128, 
      0,   0, 225, 128,   8,   0, 
    255, 161,   0,   0, 228, 128, 
      5,   0,   0,   3,   2,   0, 
     15, 128,   0,   0,  85, 128, 
      5,   0, 228, 160,   4,   0, 
      0,   4,   2,   0,  15, 128, 
      4,   0, 228, 160,   0,   0, 
      0, 128,   2,   0, 228, 128, 
      2,   0,   0,   3,   0,   0, 
      1, 128,   0,   0,   0, 129, 
      8,   0, 170, 160,   2,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,  85, 129,   0,   0, 
      0, 128,   4,   0,   0,   4, 
      0,   0,  15, 128,   1,   0, 
    228, 128,   0,   0,   0, 128, 
      2,   0, 228, 128,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 255, 128,   0,   0, 
    228, 128,   5,   0,   0,   3, 
      0,   0,   7, 128,   0,   0, 
    228, 128,   1,   0, 228, 160, 
      5,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 255, 128, 
      0,   0, 228, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    255, 160,   1,   0, 228, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FBox2InnerShadowMul.hlsl.h /Vn
//    pBinary_FBox2InnerShadowMul D3D9/FBox2InnerShadowMul.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 fsize;
//   float2 offset;
//   float4 scolor;
//   sampler2D srctex;
//   float2 srctexscale;
//   sampler2D tex;
//   float2 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   fsize        c2       1
//   offset       c3       1
//   scolor       c4       1
//   srctexscale  c6       1
//   texscale     c7       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c5, 0, 0, 1, -1
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c5.x
    mov r1.x, c5.x
    mov r1.y, -c2.x
    rep i0
      break_lt c2.x, r1.y
      add r2.x, r1.y, c3.x
      mov r3.x, r1.x
      mov r3.y, -c2.y
      rep i0
        break_lt c2.y, r3.y
        add r2.y, r3.y, c3.y
        mad_pp r0.xy, r2, c7, v0
        texldl_pp r4, r0, s1
        add r3.x, r3.x, r4.w
        add r3.y, r3.y, c5.z
      endrep
      mov r1.x, r3.x
      add r1.y, r1.y, c5.z
    endrep
    mul r0.x, r1.x, c2.w
    mul r0.x, r0.x, c2.z
    mul_pp r1.xy, c6, v0
    mov r1.zw, c5.x
    texldl_pp r1, r1, s0
    lrp r2, r0.x, r1, c4
    mul r0, r1.w, r2
    mul r0.xyz, r0, c1
    mul r1, r0.w, c0
    mad r0, r0, c1.w, r1
    add r1, r0, c5.w
    mad oC0, r0.w, r1, c5.z

// approximately 43 instruction slots used (4 texture, 39 arithmetic)
#endif

const BYTE pBinary_FBox2InnerShadowMul[] =
{
      0,   3, 255, 255, 254, 255, 
    101,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  92,   1, 
      0,   0,   0,   3, 255, 255, 
      9,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     85,   1,   0,   0, 208,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 216,   0, 
      0,   0,   0,   0,   0,   0, 
    232,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    216,   0,   0,   0,   0,   0, 
      0,   0, 238,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 216,   0,   0,   0, 
      0,   0,   0,   0, 244,   0, 
      0,   0,   2,   0,   3,   0, 
      1,   0,  14,   0, 252,   0, 
      0,   0,   0,   0,   0,   0, 
     12,   1,   0,   0,   2,   0, 
      4,   0,   1,   0,  18,   0, 
    216,   0,   0,   0,   0,   0, 
      0,   0,  19,   1,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0,  28,   1,   0,   0, 
      0,   0,   0,   0,  44,   1, 
      0,   0,   2,   0,   6,   0, 
      1,   0,  26,   0, 252,   0, 
      0,   0,   0,   0,   0,   0, 
     56,   1,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
     60,   1,   0,   0,   0,   0, 
      0,   0,  76,   1,   0,   0, 
      2,   0,   7,   0,   1,   0, 
     30,   0, 252,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 102, 115, 
    105, 122, 101,   0, 111, 102, 
    102, 115, 101, 116,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      2,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 115,  99, 
    111, 108, 111, 114,   0, 115, 
    114,  99, 116, 101, 120,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    115, 114,  99, 116, 101, 120, 
    115,  99,  97, 108, 101,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120, 115, 
     99,  97, 108, 101,   0, 112, 
    115,  95,  51,  95,  48,   0, 
     77, 105,  99, 114, 111, 115, 
    111, 102, 116,  32,  40,  82, 
     41,  32,  72,  76,  83,  76, 
     32,  83, 104,  97, 100, 101, 
    114,  32,  67, 111, 109, 112, 
    105, 108, 101, 114,  32,  57, 
     46,  50,  57,  46,  57,  53, 
     50,  46,  51,  49,  49,  49, 
      0, 171, 171, 171,  81,   0, 
      0,   5,   5,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0, 128,  63, 
      0,   0, 128, 191,  48,   0, 
      0,   5,   0,   0,  15, 240, 
    255,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,   1,   0, 
      0,   2,   0,   0,  12, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   2, 128, 
      2,   0,   0, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   2,   0, 
      0, 160,   1,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      1, 128,   1,   0,  85, 128, 
      3,   0,   0, 160,   1,   0, 
      0,   2,   3,   0,   1, 128, 
      1,   0,   0, 128,   1,   0, 
      0,   2,   3,   0,   2, 128, 
      2,   0,  85, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   2,   0, 
     85, 160,   3,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      2, 128,   3,   0,  85, 128, 
      3,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,  35, 128, 
      2,   0, 228, 128,   7,   0, 
    228, 160,   0,   0, 228, 144, 
     95,   0,   0,   3,   4,   0, 
     47, 128,   0,   0, 228, 128, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      3,   0,   0, 128,   4,   0, 
    255, 128,   2,   0,   0,   3, 
      3,   0,   2, 128,   3,   0, 
     85, 128,   5,   0, 170, 160, 
     39,   0,   0,   0,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      3,   0,   0, 128,   2,   0, 
      0,   3,   1,   0,   2, 128, 
      1,   0,  85, 128,   5,   0, 
    170, 160,  39,   0,   0,   0, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   1,   0,   0, 128, 
      2,   0, 255, 160,   5,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   2,   0, 
    170, 160,   5,   0,   0,   3, 
      1,   0,  35, 128,   6,   0, 
    228, 160,   0,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     12, 128,   5,   0,   0, 160, 
     95,   0,   0,   3,   1,   0, 
     47, 128,   1,   0, 228, 128, 
      0,   8, 228, 160,  18,   0, 
      0,   4,   2,   0,  15, 128, 
      0,   0,   0, 128,   1,   0, 
    228, 128,   4,   0, 228, 160, 
      5,   0,   0,   3,   0,   0, 
     15, 128,   1,   0, 255, 128, 
      2,   0, 228, 128,   5,   0, 
      0,   3,   0,   0,   7, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 160,   5,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    255, 128,   0,   0, 228, 160, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 255, 160,   1,   0, 
    228, 128,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   5,   0, 255, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   5,   0, 
    170, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FBox2InnerShadowMulHighlight.hlsl.h
//    /Vn pBinary_FBox2InnerShadowMulHighlight
//    D3D9/FBox2InnerShadowMulHighlight.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 fsize;
//   float2 offset;
//   float4 scolor;
//   float4 scolor2;
//   sampler2D srctex;
//   float2 srctexscale;
//   sampler2D tex;
//   float2 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   fsize        c2       1
//   offset       c3       1
//   scolor       c4       1
//   scolor2      c5       1
//   srctexscale  c6       1
//   texscale     c7       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c8, 0, 0, 1, 0.5
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c8.x
    mov r1.zw, c8.x
    mov r2.yz, c8.x
    mov r2.x, -c2.x
    rep i0
      break_lt c2.x, r2.x
      add r3.x, r2.x, c3.x
      mov r4.xy, r2.yzzw
      mov r4.z, -c2.y
      rep i0
        break_lt c2.y, r4.z
        add r3.y, r4.z, c3.y
        mad_pp r0.xy, r3, c7, v0
        texldl_pp r5, r0, s1
        add r4.y, r4.y, r5.w
        mad_pp r1.xy, r3, -c7, v0
        texldl_pp r5, r1, s1
        add r4.x, r4.x, r5.w
        add r4.z, r4.z, c8.z
      endrep
      mov r2.yz, r4.xxyw
      add r2.x, r2.x, c8.z
    endrep
    mul r0.yz, r2, c2.w
    mul r0.x, r0.z, c2.z
    mul_pp r1.xy, c6, v0
    mov r1.zw, c8.x
    texldl_pp r1, r1, s0
    add r0.xy, -r0, c8.z
    mad_sat r0.xy, r0.yxzw, -c8.w, r0
    mul r2, r0.y, c5
    mad r2, c4, r0.x, r2
    add r0.x, -r0.x, c8.z
    add r0.x, -r0.y, r0.x
    mad r0, r1, r0.x, r2
    mul r0, r1.w, r0
    mul r0.xyz, r0, c1
    mul r1, r0.w, c0
    mad r0, r0, c1.w, r1
    add r1, r0, -c8.z
    mad oC0, r0.w, r1, c8.z

// approximately 54 instruction slots used (6 texture, 48 arithmetic)
#endif

const BYTE pBinary_FBox2InnerShadowMulHighlight[] =
{
      0,   3, 255, 255, 254, 255, 
    108,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 120,   1, 
      0,   0,   0,   3, 255, 255, 
     10,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    113,   1,   0,   0, 228,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 236,   0, 
      0,   0,   0,   0,   0,   0, 
    252,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    236,   0,   0,   0,   0,   0, 
      0,   0,   2,   1,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 236,   0,   0,   0, 
      0,   0,   0,   0,   8,   1, 
      0,   0,   2,   0,   3,   0, 
      1,   0,  14,   0,  16,   1, 
      0,   0,   0,   0,   0,   0, 
     32,   1,   0,   0,   2,   0, 
      4,   0,   1,   0,  18,   0, 
    236,   0,   0,   0,   0,   0, 
      0,   0,  39,   1,   0,   0, 
      2,   0,   5,   0,   1,   0, 
     22,   0, 236,   0,   0,   0, 
      0,   0,   0,   0,  47,   1, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   1, 
      0,   0,   0,   0,   0,   0, 
     72,   1,   0,   0,   2,   0, 
      6,   0,   1,   0,  26,   0, 
     16,   1,   0,   0,   0,   0, 
      0,   0,  84,   1,   0,   0, 
      3,   0,   1,   0,   1,   0, 
      6,   0,  88,   1,   0,   0, 
      0,   0,   0,   0, 104,   1, 
      0,   0,   2,   0,   7,   0, 
      1,   0,  30,   0,  16,   1, 
      0,   0,   0,   0,   0,   0, 
     99, 120,  97, 100, 100,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120, 109, 117, 108,   0, 
    102, 115, 105, 122, 101,   0, 
    111, 102, 102, 115, 101, 116, 
      0, 171,   1,   0,   3,   0, 
      1,   0,   2,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    115,  99, 111, 108, 111, 114, 
      0, 115,  99, 111, 108, 111, 
    114,  50,   0, 115, 114,  99, 
    116, 101, 120,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 115, 114, 
     99, 116, 101, 120, 115,  99, 
     97, 108, 101,   0, 116, 101, 
    120,   0,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120, 115,  99,  97, 
    108, 101,   0, 112, 115,  95, 
     51,  95,  48,   0,  77, 105, 
     99, 114, 111, 115, 111, 102, 
    116,  32,  40,  82,  41,  32, 
     72,  76,  83,  76,  32,  83, 
    104,  97, 100, 101, 114,  32, 
     67, 111, 109, 112, 105, 108, 
    101, 114,  32,  57,  46,  50, 
     57,  46,  57,  53,  50,  46, 
     51,  49,  49,  49,   0, 171, 
    171, 171,  81,   0,   0,   5, 
      8,   0,  15, 160,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,  63,  48,   0,   0,   5, 
      0,   0,  15, 240, 255,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,   1,   0,   0,   2, 
      0,   0,  12, 128,   8,   0, 
      0, 160,   1,   0,   0,   2, 
      1,   0,  12, 128,   8,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   6, 128,   8,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   1, 128,   2,   0, 
      0, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   2,   0,   0, 160, 
      2,   0,   0, 128,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      2,   0,   0, 128,   3,   0, 
      0, 160,   1,   0,   0,   2, 
      4,   0,   3, 128,   2,   0, 
    233, 128,   1,   0,   0,   2, 
      4,   0,   4, 128,   2,   0, 
     85, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   2,   0,  85, 160, 
      4,   0, 170, 128,   2,   0, 
      0,   3,   3,   0,   2, 128, 
      4,   0, 170, 128,   3,   0, 
     85, 160,   4,   0,   0,   4, 
      0,   0,  35, 128,   3,   0, 
    228, 128,   7,   0, 228, 160, 
      0,   0, 228, 144,  95,   0, 
      0,   3,   5,   0,  47, 128, 
      0,   0, 228, 128,   1,   8, 
    228, 160,   2,   0,   0,   3, 
      4,   0,   2, 128,   4,   0, 
     85, 128,   5,   0, 255, 128, 
      4,   0,   0,   4,   1,   0, 
     35, 128,   3,   0, 228, 128, 
      7,   0, 228, 161,   0,   0, 
    228, 144,  95,   0,   0,   3, 
      5,   0,  47, 128,   1,   0, 
    228, 128,   1,   8, 228, 160, 
      2,   0,   0,   3,   4,   0, 
      1, 128,   4,   0,   0, 128, 
      5,   0, 255, 128,   2,   0, 
      0,   3,   4,   0,   4, 128, 
      4,   0, 170, 128,   8,   0, 
    170, 160,  39,   0,   0,   0, 
      1,   0,   0,   2,   2,   0, 
      6, 128,   4,   0, 208, 128, 
      2,   0,   0,   3,   2,   0, 
      1, 128,   2,   0,   0, 128, 
      8,   0, 170, 160,  39,   0, 
      0,   0,   5,   0,   0,   3, 
      0,   0,   6, 128,   2,   0, 
    228, 128,   2,   0, 255, 160, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   0,   0, 170, 128, 
      2,   0, 170, 160,   5,   0, 
      0,   3,   1,   0,  35, 128, 
      6,   0, 228, 160,   0,   0, 
    228, 144,   1,   0,   0,   2, 
      1,   0,  12, 128,   8,   0, 
      0, 160,  95,   0,   0,   3, 
      1,   0,  47, 128,   1,   0, 
    228, 128,   0,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      3, 128,   0,   0, 228, 129, 
      8,   0, 170, 160,   4,   0, 
      0,   4,   0,   0,  19, 128, 
      0,   0, 225, 128,   8,   0, 
    255, 161,   0,   0, 228, 128, 
      5,   0,   0,   3,   2,   0, 
     15, 128,   0,   0,  85, 128, 
      5,   0, 228, 160,   4,   0, 
      0,   4,   2,   0,  15, 128, 
      4,   0, 228, 160,   0,   0, 
      0, 128,   2,   0, 228, 128, 
      2,   0,   0,   3,   0,   0, 
      1, 128,   0,   0,   0, 129, 
      8,   0, 170, 160,   2,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,  85, 129,   0,   0, 
      0, 128,   4,   0,   0,   4, 
      0,   0,  15, 128,   1,   0, 
    228, 128,   0,   0,   0, 128, 
      2,   0, 228, 128,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 255, 128,   0,   0, 
    228, 128,   5,   0,   0,   3, 
      0,   0,   7, 128,   0,   0, 
    228, 128,   1,   0, 228, 160, 
      5,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 255, 128, 
      0,   0, 228, 160,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    255, 160,   1,   0, 228, 128, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      8,   0, 170, 161,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   8,   0, 170, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FBox2ShadowKnockout.hlsl.h /Vn
//    pBinary_FBox2ShadowKnockout D3D9/FBox2ShadowKnockout.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 fsize;
//   float2 offset;
//   float4 scolor;
//   sampler2D srctex;
//   float2 srctexscale;
//   sampler2D tex;
//   float2 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   fsize        c2       1
//   offset       c3       1
//   scolor       c4       1
//   srctexscale  c6       1
//   texscale     c7       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c5, 0, 0, 1, 0
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c5.x
    mov r1.x, c5.x
    mov r1.y, -c2.x
    rep i0
      break_lt c2.x, r1.y
      add r2.x, r1.y, c3.x
      mov r3.x, r1.x
      mov r3.y, -c2.y
      rep i0
        break_lt c2.y, r3.y
        add r2.y, r3.y, c3.y
        mad_pp r0.xy, r2, c7, v0
        texldl_pp r4, r0, s1
        add r3.x, r3.x, r4.w
        add r3.y, r3.y, c5.z
      endrep
      mov r1.x, r3.x
      add r1.y, r1.y, c5.z
    endrep
    mul r0.x, r1.x, c2.w
    mul r0.x, r0.x, c2.z
    mul r0.yz, c6.xxyw, v0.xxyw
    texld r1, r0.yzzw, s0
    mul r0, r0.x, c4
    add r1.x, -r1.w, c5.z
    mul r0, r0, r1.x
    mul r0.xyz, r0, c1
    mul r1, r0.w, c0
    mad oC0, r0, c1.w, r1

// approximately 40 instruction slots used (3 texture, 37 arithmetic)
#endif

const BYTE pBinary_FBox2ShadowKnockout[] =
{
      0,   3, 255, 255, 254, 255, 
    101,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  92,   1, 
      0,   0,   0,   3, 255, 255, 
      9,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     85,   1,   0,   0, 208,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 216,   0, 
      0,   0,   0,   0,   0,   0, 
    232,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    216,   0,   0,   0,   0,   0, 
      0,   0, 238,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 216,   0,   0,   0, 
      0,   0,   0,   0, 244,   0, 
      0,   0,   2,   0,   3,   0, 
      1,   0,  14,   0, 252,   0, 
      0,   0,   0,   0,   0,   0, 
     12,   1,   0,   0,   2,   0, 
      4,   0,   1,   0,  18,   0, 
    216,   0,   0,   0,   0,   0, 
      0,   0,  19,   1,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0,  28,   1,   0,   0, 
      0,   0,   0,   0,  44,   1, 
      0,   0,   2,   0,   6,   0, 
      1,   0,  26,   0, 252,   0, 
      0,   0,   0,   0,   0,   0, 
     56,   1,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
     60,   1,   0,   0,   0,   0, 
      0,   0,  76,   1,   0,   0, 
      2,   0,   7,   0,   1,   0, 
     30,   0, 252,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 102, 115, 
    105, 122, 101,   0, 111, 102, 
    102, 115, 101, 116,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      2,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 115,  99, 
    111, 108, 111, 114,   0, 115, 
    114,  99, 116, 101, 120,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    115, 114,  99, 116, 101, 120, 
    115,  99,  97, 108, 101,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120, 115, 
     99,  97, 108, 101,   0, 112, 
    115,  95,  51,  95,  48,   0, 
     77, 105,  99, 114, 111, 115, 
    111, 102, 116,  32,  40,  82, 
     41,  32,  72,  76,  83,  76, 
     32,  83, 104,  97, 100, 101, 
    114,  32,  67, 111, 109, 112, 
    105, 108, 101, 114,  32,  57, 
     46,  50,  57,  46,  57,  53, 
     50,  46,  51,  49,  49,  49, 
      0, 171, 171, 171,  81,   0, 
      0,   5,   5,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0, 128,  63, 
      0,   0,   0,   0,  48,   0, 
      0,   5,   0,   0,  15, 240, 
    255,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,   1,   0, 
      0,   2,   0,   0,  12, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   2, 128, 
      2,   0,   0, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   2,   0, 
      0, 160,   1,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      1, 128,   1,   0,  85, 128, 
      3,   0,   0, 160,   1,   0, 
      0,   2,   3,   0,   1, 128, 
      1,   0,   0, 128,   1,   0, 
      0,   2,   3,   0,   2, 128, 
      2,   0,  85, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   2,   0, 
     85, 160,   3,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      2, 128,   3,   0,  85, 128, 
      3,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,  35, 128, 
      2,   0, 228, 128,   7,   0, 
    228, 160,   0,   0, 228, 144, 
     95,   0,   0,   3,   4,   0, 
     47, 128,   0,   0, 228, 128, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      3,   0,   0, 128,   4,   0, 
    255, 128,   2,   0,   0,   3, 
      3,   0,   2, 128,   3,   0, 
     85, 128,   5,   0, 170, 160, 
     39,   0,   0,   0,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      3,   0,   0, 128,   2,   0, 
      0,   3,   1,   0,   2, 128, 
      1,   0,  85, 128,   5,   0, 
    170, 160,  39,   0,   0,   0, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   1,   0,   0, 128, 
      2,   0, 255, 160,   5,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   2,   0, 
    170, 160,   5,   0,   0,   3, 
      0,   0,   6, 128,   6,   0, 
    208, 160,   0,   0, 208, 144, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 233, 128, 
      0,   8, 228, 160,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0,   0, 128,   4,   0, 
    228, 160,   2,   0,   0,   3, 
      1,   0,   1, 128,   1,   0, 
    255, 129,   5,   0, 170, 160, 
      5,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0,   0, 128,   5,   0, 
      0,   3,   0,   0,   7, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 160,   5,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    255, 128,   0,   0, 228, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 255, 160,   1,   0, 
    228, 128, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FBox2ShadowKnockoutHighlight.hlsl.h
//    /Vn pBinary_FBox2ShadowKnockoutHighlight
//    D3D9/FBox2ShadowKnockoutHighlight.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 fsize;
//   float2 offset;
//   float4 scolor;
//   float4 scolor2;
//   sampler2D srctex;
//   float2 srctexscale;
//   sampler2D tex;
//   float2 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   fsize        c2       1
//   offset       c3       1
//   scolor       c4       1
//   scolor2      c5       1
//   srctexscale  c6       1
//   texscale     c7       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c8, 0, 0, 1, 0
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c8.x
    mov r1.zw, c8.x
    mov r2.xy, c8.x
    mov r2.z, -c2.x
    rep i0
      break_lt c2.x, r2.z
      add r3.x, r2.z, c3.x
      mov r4.xy, r2
      mov r4.z, -c2.y
      rep i0
        break_lt c2.y, r4.z
        add r3.y, r4.z, c3.y
        mad_pp r0.xy, r3, c7, v0
        texldl_pp r5, r0, s1
        add r4.y, r4.y, r5.w
        mad_pp r1.xy, r3, -c7, v0
        texldl_pp r5, r1, s1
        add r4.x, r4.x, r5.w
        add r4.z, r4.z, c8.z
      endrep
      mov r2.xy, r4
      add r2.z, r2.z, c8.z
    endrep
    mul r0.xy, r2, c2.w
    mul r0.y, r0.y, c2.z
    mul r0.zw, c6.xyxy, v0.xyxy
    texld r1, r0.zwzw, s0
    mul r2, r0.x, c5
    mad r0, c4, r0.y, r2
    add r1.x, -r1.w, c8.z
    mul r0, r0, r1.x
    mul r0.xyz, r0, c1
    mul r1, r0.w, c0
    mad oC0, r0, c1.w, r1

// approximately 46 instruction slots used (5 texture, 41 arithmetic)
#endif

const BYTE pBinary_FBox2ShadowKnockoutHighlight[] =
{
      0,   3, 255, 255, 254, 255, 
    108,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 120,   1, 
      0,   0,   0,   3, 255, 255, 
     10,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    113,   1,   0,   0, 228,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 236,   0, 
      0,   0,   0,   0,   0,   0, 
    252,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    236,   0,   0,   0,   0,   0, 
      0,   0,   2,   1,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 236,   0,   0,   0, 
      0,   0,   0,   0,   8,   1, 
      0,   0,   2,   0,   3,   0, 
      1,   0,  14,   0,  16,   1, 
      0,   0,   0,   0,   0,   0, 
     32,   1,   0,   0,   2,   0, 
      4,   0,   1,   0,  18,   0, 
    236,   0,   0,   0,   0,   0, 
      0,   0,  39,   1,   0,   0, 
      2,   0,   5,   0,   1,   0, 
     22,   0, 236,   0,   0,   0, 
      0,   0,   0,   0,  47,   1, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   1, 
      0,   0,   0,   0,   0,   0, 
     72,   1,   0,   0,   2,   0, 
      6,   0,   1,   0,  26,   0, 
     16,   1,   0,   0,   0,   0, 
      0,   0,  84,   1,   0,   0, 
      3,   0,   1,   0,   1,   0, 
      6,   0,  88,   1,   0,   0, 
      0,   0,   0,   0, 104,   1, 
      0,   0,   2,   0,   7,   0, 
      1,   0,  30,   0,  16,   1, 
      0,   0,   0,   0,   0,   0, 
     99, 120,  97, 100, 100,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120, 109, 117, 108,   0, 
    102, 115, 105, 122, 101,   0, 
    111, 102, 102, 115, 101, 116, 
      0, 171,   1,   0,   3,   0, 
      1,   0,   2,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    115,  99, 111, 108, 111, 114, 
      0, 115,  99, 111, 108, 111, 
    114,  50,   0, 115, 114,  99, 
    116, 101, 120,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 115, 114, 
     99, 116, 101, 120, 115,  99, 
     97, 108, 101,   0, 116, 101, 
    120,   0,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120, 115,  99,  97, 
    108, 101,   0, 112, 115,  95, 
     51,  95,  48,   0,  77, 105, 
     99, 114, 111, 115, 111, 102, 
    116,  32,  40,  82,  41,  32, 
     72,  76,  83,  76,  32,  83, 
    104,  97, 100, 101, 114,  32, 
     67, 111, 109, 112, 105, 108, 
    101, 114,  32,  57,  46,  50, 
     57,  46,  57,  53,  50,  46, 
     51,  49,  49,  49,   0, 171, 
    171, 171,  81,   0,   0,   5, 
      8,   0,  15, 160,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,   0,  48,   0,   0,   5, 
      0,   0,  15, 240, 255,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,   1,   0,   0,   2, 
      0,   0,  12, 128,   8,   0, 
      0, 160,   1,   0,   0,   2, 
      1,   0,  12, 128,   8,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   3, 128,   8,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   4, 128,   2,   0, 
      0, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   2,   0,   0, 160, 
      2,   0, 170, 128,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      2,   0, 170, 128,   3,   0, 
      0, 160,   1,   0,   0,   2, 
      4,   0,   3, 128,   2,   0, 
    228, 128,   1,   0,   0,   2, 
      4,   0,   4, 128,   2,   0, 
     85, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   2,   0,  85, 160, 
      4,   0, 170, 128,   2,   0, 
      0,   3,   3,   0,   2, 128, 
      4,   0, 170, 128,   3,   0, 
     85, 160,   4,   0,   0,   4, 
      0,   0,  35, 128,   3,   0, 
    228, 128,   7,   0, 228, 160, 
      0,   0, 228, 144,  95,   0, 
      0,   3,   5,   0,  47, 128, 
      0,   0, 228, 128,   1,   8, 
    228, 160,   2,   0,   0,   3, 
      4,   0,   2, 128,   4,   0, 
     85, 128,   5,   0, 255, 128, 
      4,   0,   0,   4,   1,   0, 
     35, 128,   3,   0, 228, 128, 
      7,   0, 228, 161,   0,   0, 
    228, 144,  95,   0,   0,   3, 
      5,   0,  47, 128,   1,   0, 
    228, 128,   1,   8, 228, 160, 
      2,   0,   0,   3,   4,   0, 
      1, 128,   4,   0,   0, 128, 
      5,   0, 255, 128,   2,   0, 
      0,   3,   4,   0,   4, 128, 
      4,   0, 170, 128,   8,   0, 
    170, 160,  39,   0,   0,   0, 
      1,   0,   0,   2,   2,   0, 
      3, 128,   4,   0, 228, 128, 
      2,   0,   0,   3,   2,   0, 
      4, 128,   2,   0, 170, 128, 
      8,   0, 170, 160,  39,   0, 
      0,   0,   5,   0,   0,   3, 
      0,   0,   3, 128,   2,   0, 
    228, 128,   2,   0, 255, 160, 
      5,   0,   0,   3,   0,   0, 
      2, 128,   0,   0,  85, 128, 
      2,   0, 170, 160,   5,   0, 
      0,   3,   0,   0,  12, 128, 
      6,   0,  68, 160,   0,   0, 
     68, 144,  66,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    238, 128,   0,   8, 228, 160, 
      5,   0,   0,   3,   2,   0, 
     15, 128,   0,   0,   0, 128, 
      5,   0, 228, 160,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      4,   0, 228, 160,   0,   0, 
     85, 128,   2,   0, 228, 128, 
      2,   0,   0,   3,   1,   0, 
      1, 128,   1,   0, 255, 129, 
      8,   0, 170, 160,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
      0, 128,   5,   0,   0,   3, 
      0,   0,   7, 128,   0,   0, 
    228, 128,   1,   0, 228, 160, 
      5,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 255, 128, 
      0,   0, 228, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    255, 160,   1,   0, 228, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FBox2ShadowKnockoutMul.hlsl.h /Vn
//    pBinary_FBox2ShadowKnockoutMul D3D9/FBox2ShadowKnockoutMul.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 fsize;
//   float2 offset;
//   float4 scolor;
//   sampler2D srctex;
//   float2 srctexscale;
//   sampler2D tex;
//   float2 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   fsize        c2       1
//   offset       c3       1
//   scolor       c4       1
//   srctexscale  c6       1
//   texscale     c7       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c5, 0, 0, 1, -1
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c5.x
    mov r1.x, c5.x
    mov r1.y, -c2.x
    rep i0
      break_lt c2.x, r1.y
      add r2.x, r1.y, c3.x
      mov r3.x, r1.x
      mov r3.y, -c2.y
      rep i0
        break_lt c2.y, r3.y
        add r2.y, r3.y, c3.y
        mad_pp r0.xy, r2, c7, v0
        texldl_pp r4, r0, s1
        add r3.x, r3.x, r4.w
        add r3.y, r3.y, c5.z
      endrep
      mov r1.x, r3.x
      add r1.y, r1.y, c5.z
    endrep
    mul r0.x, r1.x, c2.w
    mul r0.x, r0.x, c2.z
    mul r0.yz, c6.xxyw, v0.xxyw
    texld r1, r0.yzzw, s0
    mul r0, r0.x, c4
    add r1.x, -r1.w, c5.z
    mul r0, r0, r1.x
    mul r0.xyz, r0, c1
    mul r1, r0.w, c0
    mad r0, r0, c1.w, r1
    add r1, r0, c5.w
    mad oC0, r0.w, r1, c5.z

// approximately 42 instruction slots used (3 texture, 39 arithmetic)
#endif

const BYTE pBinary_FBox2ShadowKnockoutMul[] =
{
      0,   3, 255, 255, 254, 255, 
    101,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  92,   1, 
      0,   0,   0,   3, 255, 255, 
      9,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     85,   1,   0,   0, 208,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 216,   0, 
      0,   0,   0,   0,   0,   0, 
    232,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    216,   0,   0,   0,   0,   0, 
      0,   0, 238,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 216,   0,   0,   0, 
      0,   0,   0,   0, 244,   0, 
      0,   0,   2,   0,   3,   0, 
      1,   0,  14,   0, 252,   0, 
      0,   0,   0,   0,   0,   0, 
     12,   1,   0,   0,   2,   0, 
      4,   0,   1,   0,  18,   0, 
    216,   0,   0,   0,   0,   0, 
      0,   0,  19,   1,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0,  28,   1,   0,   0, 
      0,   0,   0,   0,  44,   1, 
      0,   0,   2,   0,   6,   0, 
      1,   0,  26,   0, 252,   0, 
      0,   0,   0,   0,   0,   0, 
     56,   1,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
     60,   1,   0,   0,   0,   0, 
      0,   0,  76,   1,   0,   0, 
      2,   0,   7,   0,   1,   0, 
     30,   0, 252,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 102, 115, 
    105, 122, 101,   0, 111, 102, 
    102, 115, 101, 116,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      2,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 115,  99, 
    111, 108, 111, 114,   0, 115, 
    114,  99, 116, 101, 120,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    115, 114,  99, 116, 101, 120, 
    115,  99,  97, 108, 101,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120, 115, 
     99,  97, 108, 101,   0, 112, 
    115,  95,  51,  95,  48,   0, 
     77, 105,  99, 114, 111, 115, 
    111, 102, 116,  32,  40,  82, 
     41,  32,  72,  76,  83,  76, 
     32,  83, 104,  97, 100, 101, 
    114,  32,  67, 111, 109, 112, 
    105, 108, 101, 114,  32,  57, 
     46,  50,  57,  46,  57,  53, 
     50,  46,  51,  49,  49,  49, 
      0, 171, 171, 171,  81,   0, 
      0,   5,   5,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0, 128,  63, 
      0,   0, 128, 191,  48,   0, 
      0,   5,   0,   0,  15, 240, 
    255,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,   1,   0, 
      0,   2,   0,   0,  12, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   2, 128, 
      2,   0,   0, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   2,   0, 
      0, 160,   1,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      1, 128,   1,   0,  85, 128, 
      3,   0,   0, 160,   1,   0, 
      0,   2,   3,   0,   1, 128, 
      1,   0,   0, 128,   1,   0, 
      0,   2,   3,   0,   2, 128, 
      2,   0,  85, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   2,   0, 
     85, 160,   3,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      2, 128,   3,   0,  85, 128, 
      3,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,  35, 128, 
      2,   0, 228, 128,   7,   0, 
    228, 160,   0,   0, 228, 144, 
     95,   0,   0,   3,   4,   0, 
     47, 128,   0,   0, 228, 128, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      3,   0,   0, 128,   4,   0, 
    255, 128,   2,   0,   0,   3, 
      3,   0,   2, 128,   3,   0, 
     85, 128,   5,   0, 170, 160, 
     39,   0,   0,   0,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      3,   0,   0, 128,   2,   0, 
      0,   3,   1,   0,   2, 128, 
      1,   0,  85, 128,   5,   0, 
    170, 160,  39,   0,   0,   0, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   1,   0,   0, 128, 
      2,   0, 255, 160,   5,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   2,   0, 
    170, 160,   5,   0,   0,   3, 
      0,   0,   6, 128,   6,   0, 
    208, 160,   0,   0, 208, 144, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 233, 128, 
      0,   8, 228, 160,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0,   0, 128,   4,   0, 
    228, 160,   2,   0,   0,   3, 
      1,   0,   1, 128,   1,   0, 
    255, 129,   5,   0, 170, 160, 
      5,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0,   0, 128,   5,   0, 
      0,   3,   0,   0,   7, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 160,   5,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    255, 128,   0,   0, 228, 160, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 255, 160,   1,   0, 
    228, 128,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   5,   0, 255, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   5,   0, 
    170, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh
//    D3D9/FBox2ShadowKnockoutMulHighlight.hlsl.h /Vn
//    pBinary_FBox2ShadowKnockoutMulHighlight
//    D3D9/FBox2ShadowKnockoutMulHighlight.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 fsize;
//   float2 offset;
//   float4 scolor;
//   float4 scolor2;
//   sampler2D srctex;
//   float2 srctexscale;
//   sampler2D tex;
//   float2 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   fsize        c2       1
//   offset       c3       1
//   scolor       c4       1
//   scolor2      c5       1
//   srctexscale  c6       1
//   texscale     c7       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c8, 0, 0, 1, -1
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c8.x
    mov r1.zw, c8.x
    mov r2.xy, c8.x
    mov r2.z, -c2.x
    rep i0
      break_lt c2.x, r2.z
      add r3.x, r2.z, c3.x
      mov r4.xy, r2
      mov r4.z, -c2.y
      rep i0
        break_lt c2.y, r4.z
        add r3.y, r4.z, c3.y
        mad_pp r0.xy, r3, c7, v0
        texldl_pp r5, r0, s1
        add r4.y, r4.y, r5.w
        mad_pp r1.xy, r3, -c7, v0
        texldl_pp r5, r1, s1
        add r4.x, r4.x, r5.w
        add r4.z, r4.z, c8.z
      endrep
      mov r2.xy, r4
      add r2.z, r2.z, c8.z
    endrep
    mul r0.xy, r2, c2.w
    mul r0.y, r0.y, c2.z
    mul r0.zw, c6.xyxy, v0.xyxy
    texld r1, r0.zwzw, s0
    mul r2, r0.x, c5
    mad r0, c4, r0.y, r2
    add r1.x, -r1.w, c8.z
    mul r0, r0, r1.x
    mul r0.xyz, r0, c1
    mul r1, r0.w, c0
    mad r0, r0, c1.w, r1
    add r1, r0, c8.w
    mad oC0, r0.w, r1, c8.z

// approximately 48 instruction slots used (5 texture, 43 arithmetic)
#endif

const BYTE pBinary_FBox2ShadowKnockoutMulHighlight[] =
{
      0,   3, 255, 255, 254, 255, 
    108,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 120,   1, 
      0,   0,   0,   3, 255, 255, 
     10,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    113,   1,   0,   0, 228,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 236,   0, 
      0,   0,   0,   0,   0,   0, 
    252,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    236,   0,   0,   0,   0,   0, 
      0,   0,   2,   1,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 236,   0,   0,   0, 
      0,   0,   0,   0,   8,   1, 
      0,   0,   2,   0,   3,   0, 
      1,   0,  14,   0,  16,   1, 
      0,   0,   0,   0,   0,   0, 
     32,   1,   0,   0,   2,   0, 
      4,   0,   1,   0,  18,   0, 
    236,   0,   0,   0,   0,   0, 
      0,   0,  39,   1,   0,   0, 
      2,   0,   5,   0,   1,   0, 
     22,   0, 236,   0,   0,   0, 
      0,   0,   0,   0,  47,   1, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   1, 
      0,   0,   0,   0,   0,   0, 
     72,   1,   0,   0,   2,   0, 
      6,   0,   1,   0,  26,   0, 
     16,   1,   0,   0,   0,   0, 
      0,   0,  84,   1,   0,   0, 
      3,   0,   1,   0,   1,   0, 
      6,   0,  88,   1,   0,   0, 
      0,   0,   0,   0, 104,   1, 
      0,   0,   2,   0,   7,   0, 
      1,   0,  30,   0,  16,   1, 
      0,   0,   0,   0,   0,   0, 
     99, 120,  97, 100, 100,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120, 109, 117, 108,   0, 
    102, 115, 105, 122, 101,   0, 
    111, 102, 102, 115, 101, 116, 
      0, 171,   1,   0,   3,   0, 
      1,   0,   2,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    115,  99, 111, 108, 111, 114, 
      0, 115,  99, 111, 108, 111, 
    114,  50,   0, 115, 114,  99, 
    116, 101, 120,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 115, 114, 
     99, 116, 101, 120, 115,  99, 
     97, 108, 101,   0, 116, 101, 
    120,   0,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120, 115,  99,  97, 
    108, 101,   0, 112, 115,  95, 
     51,  95,  48,   0,  77, 105, 
     99, 114, 111, 115, 111, 102, 
    116,  32,  40,  82,  41,  32, 
     72,  76,  83,  76,  32,  83, 
    104,  97, 100, 101, 114,  32, 
     67, 111, 109, 112, 105, 108, 
    101, 114,  32,  57,  46,  50, 
     57,  46,  57,  53,  50,  46, 
     51,  49,  49,  49,   0, 171, 
    171, 171,  81,   0,   0,   5, 
      8,   0,  15, 160,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
    128, 191,  48,   0,   0,   5, 
      0,   0,  15, 240, 255,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,   1,   0,   0,   2, 
      0,   0,  12, 128,   8,   0, 
      0, 160,   1,   0,   0,   2, 
      1,   0,  12, 128,   8,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   3, 128,   8,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   4, 128,   2,   0, 
      0, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   2,   0,   0, 160, 
      2,   0, 170, 128,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      2,   0, 170, 128,   3,   0, 
      0, 160,   1,   0,   0,   2, 
      4,   0,   3, 128,   2,   0, 
    228, 128,   1,   0,   0,   2, 
      4,   0,   4, 128,   2,   0, 
     85, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   2,   0,  85, 160, 
      4,   0, 170, 128,   2,   0, 
      0,   3,   3,   0,   2, 128, 
      4,   0, 170, 128,   3,   0, 
     85, 160,   4,   0,   0,   4, 
      0,   0,  35, 128,   3,   0, 
    228, 128,   7,   0, 228, 160, 
      0,   0, 228, 144,  95,   0, 
      0,   3,   5,   0,  47, 128, 
      0,   0, 228, 128,   1,   8, 
    228, 160,   2,   0,   0,   3, 
      4,   0,   2, 128,   4,   0, 
     85, 128,   5,   0, 255, 128, 
      4,   0,   0,   4,   1,   0, 
     35, 128,   3,   0, 228, 128, 
      7,   0, 228, 161,   0,   0, 
    228, 144,  95,   0,   0,   3, 
      5,   0,  47, 128,   1,   0, 
    228, 128,   1,   8, 228, 160, 
      2,   0,   0,   3,   4,   0, 
      1, 128,   4,   0,   0, 128, 
      5,   0, 255, 128,   2,   0, 
      0,   3,   4,   0,   4, 128, 
      4,   0, 170, 128,   8,   0, 
    170, 160,  39,   0,   0,   0, 
      1,   0,   0,   2,   2,   0, 
      3, 128,   4,   0, 228, 128, 
      2,   0,   0,   3,   2,   0, 
      4, 128,   2,   0, 170, 128, 
      8,   0, 170, 160,  39,   0, 
      0,   0,   5,   0,   0,   3, 
      0,   0,   3, 128,   2,   0, 
    228, 128,   2,   0, 255, 160, 
      5,   0,   0,   3,   0,   0, 
      2, 128,   0,   0,  85, 128, 
      2,   0, 170, 160,   5,   0, 
      0,   3,   0,   0,  12, 128, 
      6,   0,  68, 160,   0,   0, 
     68, 144,  66,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    238, 128,   0,   8, 228, 160, 
      5,   0,   0,   3,   2,   0, 
     15, 128,   0,   0,   0, 128, 
      5,   0, 228, 160,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      4,   0, 228, 160,   0,   0, 
     85, 128,   2,   0, 228, 128, 
      2,   0,   0,   3,   1,   0, 
      1, 128,   1,   0, 255, 129, 
      8,   0, 170, 160,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
      0, 128,   5,   0,   0,   3, 
      0,   0,   7, 128,   0,   0, 
    228, 128,   1,   0, 228, 160, 
      5,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 255, 128, 
      0,   0, 228, 160,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    255, 160,   1,   0, 228, 128, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      8,   0, 255, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   8,   0, 170, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FBox2Shadow.hlsl.h /Vn
//    pBinary_FBox2Shadow D3D9/FBox2Shadow.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 fsize;
//   float2 offset;
//   float4 scolor;
//   sampler2D srctex;
//   float2 srctexscale;
//   sampler2D tex;
//   float2 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   fsize        c2       1
//   offset       c3       1
//   scolor       c4       1
//   srctexscale  c6       1
//   texscale     c7       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c5, 0, 0, 1, 0
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c5.x
    mov r1.x, c5.x
    mov r1.y, -c2.x
    rep i0
      break_lt c2.x, r1.y
      add r2.x, r1.y, c3.x
      mov r3.x, r1.x
      mov r3.y, -c2.y
      rep i0
        break_lt c2.y, r3.y
        add r2.y, r3.y, c3.y
        mad_pp r0.xy, r2, c7, v0
        texldl_pp r4, r0, s1
        add r3.x, r3.x, r4.w
        add r3.y, r3.y, c5.z
      endrep
      mov r1.x, r3.x
      add r1.y, r1.y, c5.z
    endrep
    mul r0.x, r1.x, c2.w
    mul r0.x, r0.x, c2.z
    mul r0.yz, c6.xxyw, v0.xxyw
    texld r1, r0.yzzw, s0
    mul r0, r0.x, c4
    add r2.x, -r1.w, c5.z
    mad r0, r0, r2.x, r1
    mul r0.xyz, r0, c1
    mul r1, r0.w, c0
    mad oC0, r0, c1.w, r1

// approximately 40 instruction slots used (3 texture, 37 arithmetic)
#endif

const BYTE pBinary_FBox2Shadow[] =
{
      0,   3, 255, 255, 254, 255, 
    101,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  92,   1, 
      0,   0,   0,   3, 255, 255, 
      9,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     85,   1,   0,   0, 208,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 216,   0, 
      0,   0,   0,   0,   0,   0, 
    232,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    216,   0,   0,   0,   0,   0, 
      0,   0, 238,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 216,   0,   0,   0, 
      0,   0,   0,   0, 244,   0, 
      0,   0,   2,   0,   3,   0, 
      1,   0,  14,   0, 252,   0, 
      0,   0,   0,   0,   0,   0, 
     12,   1,   0,   0,   2,   0, 
      4,   0,   1,   0,  18,   0, 
    216,   0,   0,   0,   0,   0, 
      0,   0,  19,   1,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0,  28,   1,   0,   0, 
      0,   0,   0,   0,  44,   1, 
      0,   0,   2,   0,   6,   0, 
      1,   0,  26,   0, 252,   0, 
      0,   0,   0,   0,   0,   0, 
     56,   1,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
     60,   1,   0,   0,   0,   0, 
      0,   0,  76,   1,   0,   0, 
      2,   0,   7,   0,   1,   0, 
     30,   0, 252,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 102, 115, 
    105, 122, 101,   0, 111, 102, 
    102, 115, 101, 116,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      2,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 115,  99, 
    111, 108, 111, 114,   0, 115, 
    114,  99, 116, 101, 120,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    115, 114,  99, 116, 101, 120, 
    115,  99,  97, 108, 101,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120, 115, 
     99,  97, 108, 101,   0, 112, 
    115,  95,  51,  95,  48,   0, 
     77, 105,  99, 114, 111, 115, 
    111, 102, 116,  32,  40,  82, 
     41,  32,  72,  76,  83,  76, 
     32,  83, 104,  97, 100, 101, 
    114,  32,  67, 111, 109, 112, 
    105, 108, 101, 114,  32,  57, 
     46,  50,  57,  46,  57,  53, 
     50,  46,  51,  49,  49,  49, 
      0, 171, 171, 171,  81,   0, 
      0,   5,   5,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0, 128,  63, 
      0,   0,   0,   0,  48,   0, 
      0,   5,   0,   0,  15, 240, 
    255,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,   1,   0, 
      0,   2,   0,   0,  12, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   2, 128, 
      2,   0,   0, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   2,   0, 
      0, 160,   1,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      1, 128,   1,   0,  85, 128, 
      3,   0,   0, 160,   1,   0, 
      0,   2,   3,   0,   1, 128, 
      1,   0,   0, 128,   1,   0, 
      0,   2,   3,   0,   2, 128, 
      2,   0,  85, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   2,   0, 
     85, 160,   3,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      2, 128,   3,   0,  85, 128, 
      3,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,  35, 128, 
      2,   0, 228, 128,   7,   0, 
    228, 160,   0,   0, 228, 144, 
     95,   0,   0,   3,   4,   0, 
     47, 128,   0,   0, 228, 128, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      3,   0,   0, 128,   4,   0, 
    255, 128,   2,   0,   0,   3, 
      3,   0,   2, 128,   3,   0, 
     85, 128,   5,   0, 170, 160, 
     39,   0,   0,   0,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      3,   0,   0, 128,   2,   0, 
      0,   3,   1,   0,   2, 128, 
      1,   0,  85, 128,   5,   0, 
    170, 160,  39,   0,   0,   0, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   1,   0,   0, 128, 
      2,   0, 255, 160,   5,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   2,   0, 
    170, 160,   5,   0,   0,   3, 
      0,   0,   6, 128,   6,   0, 
    208, 160,   0,   0, 208, 144, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 233, 128, 
      0,   8, 228, 160,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0,   0, 128,   4,   0, 
    228, 160,   2,   0,   0,   3, 
      2,   0,   1, 128,   1,   0, 
    255, 129,   5,   0, 170, 160, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      2,   0,   0, 128,   1,   0, 
    228, 128,   5,   0,   0,   3, 
      0,   0,   7, 128,   0,   0, 
    228, 128,   1,   0, 228, 160, 
      5,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 255, 128, 
      0,   0, 228, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    255, 160,   1,   0, 228, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FBox2ShadowHighlight.hlsl.h /Vn
//    pBinary_FBox2ShadowHighlight D3D9/FBox2ShadowHighlight.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 fsize;
//   float2 offset;
//   float4 scolor;
//   float4 scolor2;
//   sampler2D srctex;
//   float2 srctexscale;
//   sampler2D tex;
//   float2 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   fsize        c2       1
//   offset       c3       1
//   scolor       c4       1
//   scolor2      c5       1
//   srctexscale  c6       1
//   texscale     c7       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c8, 0, 0, 1, 0
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c8.x
    mov r1.zw, c8.x
    mov r2.xy, c8.x
    mov r2.z, -c2.x
    rep i0
      break_lt c2.x, r2.z
      add r3.x, r2.z, c3.x
      mov r4.xy, r2
      mov r4.z, -c2.y
      rep i0
        break_lt c2.y, r4.z
        add r3.y, r4.z, c3.y
        mad_pp r0.xy, r3, c7, v0
        texldl_pp r5, r0, s1
        add r4.y, r4.y, r5.w
        mad_pp r1.xy, r3, -c7, v0
        texldl_pp r5, r1, s1
        add r4.x, r4.x, r5.w
        add r4.z, r4.z, c8.z
      endrep
      mov r2.xy, r4
      add r2.z, r2.z, c8.z
    endrep
    mul r0.xy, r2, c2.w
    mul r0.y, r0.y, c2.z
    mul r0.zw, c6.xyxy, v0.xyxy
    texld r1, r0.zwzw, s0
    mul r2, r0.x, c5
    mad r0, c4, r0.y, r2
    add r2.x, -r1.w, c8.z
    mad r0, r0, r2.x, r1
    mul r0.xyz, r0, c1
    mul r1, r0.w, c0
    mad oC0, r0, c1.w, r1

// approximately 46 instruction slots used (5 texture, 41 arithmetic)
#endif

const BYTE pBinary_FBox2ShadowHighlight[] =
{
      0,   3, 255, 255, 254, 255, 
    108,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 120,   1, 
      0,   0,   0,   3, 255, 255, 
     10,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    113,   1,   0,   0, 228,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 236,   0, 
      0,   0,   0,   0,   0,   0, 
    252,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    236,   0,   0,   0,   0,   0, 
      0,   0,   2,   1,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 236,   0,   0,   0, 
      0,   0,   0,   0,   8,   1, 
      0,   0,   2,   0,   3,   0, 
      1,   0,  14,   0,  16,   1, 
      0,   0,   0,   0,   0,   0, 
     32,   1,   0,   0,   2,   0, 
      4,   0,   1,   0,  18,   0, 
    236,   0,   0,   0,   0,   0, 
      0,   0,  39,   1,   0,   0, 
      2,   0,   5,   0,   1,   0, 
     22,   0, 236,   0,   0,   0, 
      0,   0,   0,   0,  47,   1, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   1, 
      0,   0,   0,   0,   0,   0, 
     72,   1,   0,   0,   2,   0, 
      6,   0,   1,   0,  26,   0, 
     16,   1,   0,   0,   0,   0, 
      0,   0,  84,   1,   0,   0, 
      3,   0,   1,   0,   1,   0, 
      6,   0,  88,   1,   0,   0, 
      0,   0,   0,   0, 104,   1, 
      0,   0,   2,   0,   7,   0, 
      1,   0,  30,   0,  16,   1, 
      0,   0,   0,   0,   0,   0, 
     99, 120,  97, 100, 100,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120, 109, 117, 108,   0, 
    102, 115, 105, 122, 101,   0, 
    111, 102, 102, 115, 101, 116, 
      0, 171,   1,   0,   3,   0, 
      1,   0,   2,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    115,  99, 111, 108, 111, 114, 
      0, 115,  99, 111, 108, 111, 
    114,  50,   0, 115, 114,  99, 
    116, 101, 120,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 115, 114, 
     99, 116, 101, 120, 115,  99, 
     97, 108, 101,   0, 116, 101, 
    120,   0,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120, 115,  99,  97, 
    108, 101,   0, 112, 115,  95, 
     51,  95,  48,   0,  77, 105, 
     99, 114, 111, 115, 111, 102, 
    116,  32,  40,  82,  41,  32, 
     72,  76,  83,  76,  32,  83, 
    104,  97, 100, 101, 114,  32, 
     67, 111, 109, 112, 105, 108, 
    101, 114,  32,  57,  46,  50, 
     57,  46,  57,  53,  50,  46, 
     51,  49,  49,  49,   0, 171, 
    171, 171,  81,   0,   0,   5, 
      8,   0,  15, 160,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
      0,   0,  48,   0,   0,   5, 
      0,   0,  15, 240, 255,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,   1,   0,   0,   2, 
      0,   0,  12, 128,   8,   0, 
      0, 160,   1,   0,   0,   2, 
      1,   0,  12, 128,   8,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   3, 128,   8,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   4, 128,   2,   0, 
      0, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   2,   0,   0, 160, 
      2,   0, 170, 128,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      2,   0, 170, 128,   3,   0, 
      0, 160,   1,   0,   0,   2, 
      4,   0,   3, 128,   2,   0, 
    228, 128,   1,   0,   0,   2, 
      4,   0,   4, 128,   2,   0, 
     85, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   2,   0,  85, 160, 
      4,   0, 170, 128,   2,   0, 
      0,   3,   3,   0,   2, 128, 
      4,   0, 170, 128,   3,   0, 
     85, 160,   4,   0,   0,   4, 
      0,   0,  35, 128,   3,   0, 
    228, 128,   7,   0, 228, 160, 
      0,   0, 228, 144,  95,   0, 
      0,   3,   5,   0,  47, 128, 
      0,   0, 228, 128,   1,   8, 
    228, 160,   2,   0,   0,   3, 
      4,   0,   2, 128,   4,   0, 
     85, 128,   5,   0, 255, 128, 
      4,   0,   0,   4,   1,   0, 
     35, 128,   3,   0, 228, 128, 
      7,   0, 228, 161,   0,   0, 
    228, 144,  95,   0,   0,   3, 
      5,   0,  47, 128,   1,   0, 
    228, 128,   1,   8, 228, 160, 
      2,   0,   0,   3,   4,   0, 
      1, 128,   4,   0,   0, 128, 
      5,   0, 255, 128,   2,   0, 
      0,   3,   4,   0,   4, 128, 
      4,   0, 170, 128,   8,   0, 
    170, 160,  39,   0,   0,   0, 
      1,   0,   0,   2,   2,   0, 
      3, 128,   4,   0, 228, 128, 
      2,   0,   0,   3,   2,   0, 
      4, 128,   2,   0, 170, 128, 
      8,   0, 170, 160,  39,   0, 
      0,   0,   5,   0,   0,   3, 
      0,   0,   3, 128,   2,   0, 
    228, 128,   2,   0, 255, 160, 
      5,   0,   0,   3,   0,   0, 
      2, 128,   0,   0,  85, 128, 
      2,   0, 170, 160,   5,   0, 
      0,   3,   0,   0,  12, 128, 
      6,   0,  68, 160,   0,   0, 
     68, 144,  66,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    238, 128,   0,   8, 228, 160, 
      5,   0,   0,   3,   2,   0, 
     15, 128,   0,   0,   0, 128, 
      5,   0, 228, 160,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      4,   0, 228, 160,   0,   0, 
     85, 128,   2,   0, 228, 128, 
      2,   0,   0,   3,   2,   0, 
      1, 128,   1,   0, 255, 129, 
      8,   0, 170, 160,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      0,   0, 228, 128,   2,   0, 
      0, 128,   1,   0, 228, 128, 
      5,   0,   0,   3,   0,   0, 
      7, 128,   0,   0, 228, 128, 
      1,   0, 228, 160,   5,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 255, 128,   0,   0, 
    228, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    228, 128,   1,   0, 255, 160, 
      1,   0, 228, 128, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FBox2ShadowMul.hlsl.h /Vn
//    pBinary_FBox2ShadowMul D3D9/FBox2ShadowMul.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 fsize;
//   float2 offset;
//   float4 scolor;
//   sampler2D srctex;
//   float2 srctexscale;
//   sampler2D tex;
//   float2 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   fsize        c2       1
//   offset       c3       1
//   scolor       c4       1
//   srctexscale  c6       1
//   texscale     c7       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c5, 0, 0, 1, -1
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c5.x
    mov r1.x, c5.x
    mov r1.y, -c2.x
    rep i0
      break_lt c2.x, r1.y
      add r2.x, r1.y, c3.x
      mov r3.x, r1.x
      mov r3.y, -c2.y
      rep i0
        break_lt c2.y, r3.y
        add r2.y, r3.y, c3.y
        mad_pp r0.xy, r2, c7, v0
        texldl_pp r4, r0, s1
        add r3.x, r3.x, r4.w
        add r3.y, r3.y, c5.z
      endrep
      mov r1.x, r3.x
      add r1.y, r1.y, c5.z
    endrep
    mul r0.x, r1.x, c2.w
    mul r0.x, r0.x, c2.z
    mul r0.yz, c6.xxyw, v0.xxyw
    texld r1, r0.yzzw, s0
    mul r0, r0.x, c4
    add r2.x, -r1.w, c5.z
    mad r0, r0, r2.x, r1
    mul r0.xyz, r0, c1
    mul r1, r0.w, c0
    mad r0, r0, c1.w, r1
    add r1, r0, c5.w
    mad oC0, r0.w, r1, c5.z

// approximately 42 instruction slots used (3 texture, 39 arithmetic)
#endif

const BYTE pBinary_FBox2ShadowMul[] =
{
      0,   3, 255, 255, 254, 255, 
    101,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  92,   1, 
      0,   0,   0,   3, 255, 255, 
      9,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     85,   1,   0,   0, 208,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 216,   0, 
      0,   0,   0,   0,   0,   0, 
    232,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    216,   0,   0,   0,   0,   0, 
      0,   0, 238,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 216,   0,   0,   0, 
      0,   0,   0,   0, 244,   0, 
      0,   0,   2,   0,   3,   0, 
      1,   0,  14,   0, 252,   0, 
      0,   0,   0,   0,   0,   0, 
     12,   1,   0,   0,   2,   0, 
      4,   0,   1,   0,  18,   0, 
    216,   0,   0,   0,   0,   0, 
      0,   0,  19,   1,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0,  28,   1,   0,   0, 
      0,   0,   0,   0,  44,   1, 
      0,   0,   2,   0,   6,   0, 
      1,   0,  26,   0, 252,   0, 
      0,   0,   0,   0,   0,   0, 
     56,   1,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
     60,   1,   0,   0,   0,   0, 
      0,   0,  76,   1,   0,   0, 
      2,   0,   7,   0,   1,   0, 
     30,   0, 252,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 102, 115, 
    105, 122, 101,   0, 111, 102, 
    102, 115, 101, 116,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      2,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 115,  99, 
    111, 108, 111, 114,   0, 115, 
    114,  99, 116, 101, 120,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    115, 114,  99, 116, 101, 120, 
    115,  99,  97, 108, 101,   0, 
    116, 101, 120,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120, 115, 
     99,  97, 108, 101,   0, 112, 
    115,  95,  51,  95,  48,   0, 
     77, 105,  99, 114, 111, 115, 
    111, 102, 116,  32,  40,  82, 
     41,  32,  72,  76,  83,  76, 
     32,  83, 104,  97, 100, 101, 
    114,  32,  67, 111, 109, 112, 
    105, 108, 101, 114,  32,  57, 
     46,  50,  57,  46,  57,  53, 
     50,  46,  51,  49,  49,  49, 
      0, 171, 171, 171,  81,   0, 
      0,   5,   5,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0, 128,  63, 
      0,   0, 128, 191,  48,   0, 
      0,   5,   0,   0,  15, 240, 
    255,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,   1,   0, 
      0,   2,   0,   0,  12, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      5,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,   2, 128, 
      2,   0,   0, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   2,   0, 
      0, 160,   1,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      1, 128,   1,   0,  85, 128, 
      3,   0,   0, 160,   1,   0, 
      0,   2,   3,   0,   1, 128, 
      1,   0,   0, 128,   1,   0, 
      0,   2,   3,   0,   2, 128, 
      2,   0,  85, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   2,   0, 
     85, 160,   3,   0,  85, 128, 
      2,   0,   0,   3,   2,   0, 
      2, 128,   3,   0,  85, 128, 
      3,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,  35, 128, 
      2,   0, 228, 128,   7,   0, 
    228, 160,   0,   0, 228, 144, 
     95,   0,   0,   3,   4,   0, 
     47, 128,   0,   0, 228, 128, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      3,   0,   0, 128,   4,   0, 
    255, 128,   2,   0,   0,   3, 
      3,   0,   2, 128,   3,   0, 
     85, 128,   5,   0, 170, 160, 
     39,   0,   0,   0,   1,   0, 
      0,   2,   1,   0,   1, 128, 
      3,   0,   0, 128,   2,   0, 
      0,   3,   1,   0,   2, 128, 
      1,   0,  85, 128,   5,   0, 
    170, 160,  39,   0,   0,   0, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   1,   0,   0, 128, 
      2,   0, 255, 160,   5,   0, 
      0,   3,   0,   0,   1, 128, 
      0,   0,   0, 128,   2,   0, 
    170, 160,   5,   0,   0,   3, 
      0,   0,   6, 128,   6,   0, 
    208, 160,   0,   0, 208, 144, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 233, 128, 
      0,   8, 228, 160,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0,   0, 128,   4,   0, 
    228, 160,   2,   0,   0,   3, 
      2,   0,   1, 128,   1,   0, 
    255, 129,   5,   0, 170, 160, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      2,   0,   0, 128,   1,   0, 
    228, 128,   5,   0,   0,   3, 
      0,   0,   7, 128,   0,   0, 
    228, 128,   1,   0, 228, 160, 
      5,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 255, 128, 
      0,   0, 228, 160,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    255, 160,   1,   0, 228, 128, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      5,   0, 255, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   5,   0, 170, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FBox2ShadowMulHighlight.hlsl.h /Vn
//    pBinary_FBox2ShadowMulHighlight D3D9/FBox2ShadowMulHighlight.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 fsize;
//   float2 offset;
//   float4 scolor;
//   float4 scolor2;
//   sampler2D srctex;
//   float2 srctexscale;
//   sampler2D tex;
//   float2 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   fsize        c2       1
//   offset       c3       1
//   scolor       c4       1
//   scolor2      c5       1
//   srctexscale  c6       1
//   texscale     c7       1
//   srctex       s0       1
//   tex          s1       1
//

    ps_3_0
    def c8, 0, 0, 1, -1
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    mov r0.zw, c8.x
    mov r1.zw, c8.x
    mov r2.xy, c8.x
    mov r2.z, -c2.x
    rep i0
      break_lt c2.x, r2.z
      add r3.x, r2.z, c3.x
      mov r4.xy, r2
      mov r4.z, -c2.y
      rep i0
        break_lt c2.y, r4.z
        add r3.y, r4.z, c3.y
        mad_pp r0.xy, r3, c7, v0
        texldl_pp r5, r0, s1
        add r4.y, r4.y, r5.w
        mad_pp r1.xy, r3, -c7, v0
        texldl_pp r5, r1, s1
        add r4.x, r4.x, r5.w
        add r4.z, r4.z, c8.z
      endrep
      mov r2.xy, r4
      add r2.z, r2.z, c8.z
    endrep
    mul r0.xy, r2, c2.w
    mul r0.y, r0.y, c2.z
    mul r0.zw, c6.xyxy, v0.xyxy
    texld r1, r0.zwzw, s0
    mul r2, r0.x, c5
    mad r0, c4, r0.y, r2
    add r2.x, -r1.w, c8.z
    mad r0, r0, r2.x, r1
    mul r0.xyz, r0, c1
    mul r1, r0.w, c0
    mad r0, r0, c1.w, r1
    add r1, r0, c8.w
    mad oC0, r0.w, r1, c8.z

// approximately 48 instruction slots used (5 texture, 43 arithmetic)
#endif

const BYTE pBinary_FBox2ShadowMulHighlight[] =
{
      0,   3, 255, 255, 254, 255, 
    108,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 120,   1, 
      0,   0,   0,   3, 255, 255, 
     10,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    113,   1,   0,   0, 228,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 236,   0, 
      0,   0,   0,   0,   0,   0, 
    252,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    236,   0,   0,   0,   0,   0, 
      0,   0,   2,   1,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 236,   0,   0,   0, 
      0,   0,   0,   0,   8,   1, 
      0,   0,   2,   0,   3,   0, 
      1,   0,  14,   0,  16,   1, 
      0,   0,   0,   0,   0,   0, 
     32,   1,   0,   0,   2,   0, 
      4,   0,   1,   0,  18,   0, 
    236,   0,   0,   0,   0,   0, 
      0,   0,  39,   1,   0,   0, 
      2,   0,   5,   0,   1,   0, 
     22,   0, 236,   0,   0,   0, 
      0,   0,   0,   0,  47,   1, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   1, 
      0,   0,   0,   0,   0,   0, 
     72,   1,   0,   0,   2,   0, 
      6,   0,   1,   0,  26,   0, 
     16,   1,   0,   0,   0,   0, 
      0,   0,  84,   1,   0,   0, 
      3,   0,   1,   0,   1,   0, 
      6,   0,  88,   1,   0,   0, 
      0,   0,   0,   0, 104,   1, 
      0,   0,   2,   0,   7,   0, 
      1,   0,  30,   0,  16,   1, 
      0,   0,   0,   0,   0,   0, 
     99, 120,  97, 100, 100,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120, 109, 117, 108,   0, 
    102, 115, 105, 122, 101,   0, 
    111, 102, 102, 115, 101, 116, 
      0, 171,   1,   0,   3,   0, 
      1,   0,   2,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    115,  99, 111, 108, 111, 114, 
      0, 115,  99, 111, 108, 111, 
    114,  50,   0, 115, 114,  99, 
    116, 101, 120,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 115, 114, 
     99, 116, 101, 120, 115,  99, 
     97, 108, 101,   0, 116, 101, 
    120,   0,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120, 115,  99,  97, 
    108, 101,   0, 112, 115,  95, 
     51,  95,  48,   0,  77, 105, 
     99, 114, 111, 115, 111, 102, 
    116,  32,  40,  82,  41,  32, 
     72,  76,  83,  76,  32,  83, 
    104,  97, 100, 101, 114,  32, 
     67, 111, 109, 112, 105, 108, 
    101, 114,  32,  57,  46,  50, 
     57,  46,  57,  53,  50,  46, 
     51,  49,  49,  49,   0, 171, 
    171, 171,  81,   0,   0,   5, 
      8,   0,  15, 160,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0, 128,  63,   0,   0, 
    128, 191,  48,   0,   0,   5, 
      0,   0,  15, 240, 255,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,   1,   0,   0,   2, 
      0,   0,  12, 128,   8,   0, 
      0, 160,   1,   0,   0,   2, 
      1,   0,  12, 128,   8,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   3, 128,   8,   0, 
      0, 160,   1,   0,   0,   2, 
      2,   0,   4, 128,   2,   0, 
      0, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   2,   0,   0, 160, 
      2,   0, 170, 128,   2,   0, 
      0,   3,   3,   0,   1, 128, 
      2,   0, 170, 128,   3,   0, 
      0, 160,   1,   0,   0,   2, 
      4,   0,   3, 128,   2,   0, 
    228, 128,   1,   0,   0,   2, 
      4,   0,   4, 128,   2,   0, 
     85, 161,  38,   0,   0,   1, 
      0,   0, 228, 240,  45,   0, 
      4,   2,   2,   0,  85, 160, 
      4,   0, 170, 128,   2,   0, 
      0,   3,   3,   0,   2, 128, 
      4,   0, 170, 128,   3,   0, 
     85, 160,   4,   0,   0,   4, 
      0,   0,  35, 128,   3,   0, 
    228, 128,   7,   0, 228, 160, 
      0,   0, 228, 144,  95,   0, 
      0,   3,   5,   0,  47, 128, 
      0,   0, 228, 128,   1,   8, 
    228, 160,   2,   0,   0,   3, 
      4,   0,   2, 128,   4,   0, 
     85, 128,   5,   0, 255, 128, 
      4,   0,   0,   4,   1,   0, 
     35, 128,   3,   0, 228, 128, 
      7,   0, 228, 161,   0,   0, 
    228, 144,  95,   0,   0,   3, 
      5,   0,  47, 128,   1,   0, 
    228, 128,   1,   8, 228, 160, 
      2,   0,   0,   3,   4,   0, 
      1, 128,   4,   0,   0, 128, 
      5,   0, 255, 128,   2,   0, 
      0,   3,   4,   0,   4, 128, 
      4,   0, 170, 128,   8,   0, 
    170, 160,  39,   0,   0,   0, 
      1,   0,   0,   2,   2,   0, 
      3, 128,   4,   0, 228, 128, 
      2,   0,   0,   3,   2,   0, 
      4, 128,   2,   0, 170, 128, 
      8,   0, 170, 160,  39,   0, 
      0,   0,   5,   0,   0,   3, 
      0,   0,   3, 128,   2,   0, 
    228, 128,   2,   0, 255, 160, 
      5,   0,   0,   3,   0,   0, 
      2, 128,   0,   0,  85, 128, 
      2,   0, 170, 160,   5,   0, 
      0,   3,   0,   0,  12, 128, 
      6,   0,  68, 160,   0,   0, 
     68, 144,  66,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    238, 128,   0,   8, 228, 160, 
      5,   0,   0,   3,   2,   0, 
     15, 128,   0,   0,   0, 128, 
      5,   0, 228, 160,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      4,   0, 228, 160,   0,   0, 
     85, 128,   2,   0, 228, 128, 
      2,   0,   0,   3,   2,   0, 
      1, 128,   1,   0, 255, 129, 
      8,   0, 170, 160,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      0,   0, 228, 128,   2,   0, 
      0, 128,   1,   0, 228, 128, 
      5,   0,   0,   3,   0,   0, 
      7, 128,   0,   0, 228, 128, 
      1,   0, 228, 160,   5,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 255, 128,   0,   0, 
    228, 160,   4,   0,   0,   4, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 255, 160, 
      1,   0, 228, 128,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   8,   0, 
    255, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      8,   0, 170, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FBox2Shadowonly.hlsl.h /Vn
//    pBinary_FBox2Shadowonly D3D9/FBox2Shadowonly.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 fsize;
//   float2 offset;
//   float4 scolor;
//   sampler2D tex;
//   float2 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   fsize        c2       1
//   offset       c3       1
//   scolor       c4       1
//   texscale     c5       1
//   tex          s0       1
//

    ps_3_0
    def c6, 0, 0, 1, 0
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    mov r0.zw, c6.x
    mov r1.x, c6.x
    mov r1.y, -c2.x
    rep i0
      break_lt c2.x, r1.y
      add r2.x, r1.y, c3.x
      mov r3.x, r1.x
      mov r3.y, -c2.y
      rep i0
        break_lt c2.y, r3.y
        add r2.y, r3.y, c3.y
        mad_pp r0.xy, r2, c5, v0
        texldl_pp r4, r0, s0
        add r3.x, r3.x, r4.w
        add r3.y, r3.y, c6.z
      endrep
      mov r1.x, r3.x
      add r1.y, r1.y, c6.z
    endrep
    mul r0.x, r1.x, c2.w
    mul r0.x, r0.x, c2.z
    mul r0, r0.x, c4
    mul r0.xyz, r0, c1
    mul r1, r0.w, c0
    mad oC0, r0, c1.w, r1

// approximately 36 instruction slots used (2 texture, 34 arithmetic)
#endif

const BYTE pBinary_FBox2Shadowonly[] =
{
      0,   3, 255, 255, 254, 255, 
     82,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  16,   1, 
      0,   0,   0,   3, 255, 255, 
      7,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
      9,   1,   0,   0, 168,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 176,   0, 
      0,   0,   0,   0,   0,   0, 
    192,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    176,   0,   0,   0,   0,   0, 
      0,   0, 198,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 176,   0,   0,   0, 
      0,   0,   0,   0, 204,   0, 
      0,   0,   2,   0,   3,   0, 
      1,   0,  14,   0, 212,   0, 
      0,   0,   0,   0,   0,   0, 
    228,   0,   0,   0,   2,   0, 
      4,   0,   1,   0,  18,   0, 
    176,   0,   0,   0,   0,   0, 
      0,   0, 235,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 240,   0,   0,   0, 
      0,   0,   0,   0,   0,   1, 
      0,   0,   2,   0,   5,   0, 
      1,   0,  22,   0, 212,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120,  97, 100, 100,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120, 109, 117, 108,   0, 
    102, 115, 105, 122, 101,   0, 
    111, 102, 102, 115, 101, 116, 
      0, 171,   1,   0,   3,   0, 
      1,   0,   2,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    115,  99, 111, 108, 111, 114, 
      0, 116, 101, 120,   0, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 115,  99,  97, 108, 101, 
      0, 112, 115,  95,  51,  95, 
     48,   0,  77, 105,  99, 114, 
    111, 115, 111, 102, 116,  32, 
     40,  82,  41,  32,  72,  76, 
     83,  76,  32,  83, 104,  97, 
    100, 101, 114,  32,  67, 111, 
    109, 112, 105, 108, 101, 114, 
     32,  57,  46,  50,  57,  46, 
     57,  53,  50,  46,  51,  49, 
     49,  49,   0, 171, 171, 171, 
     81,   0,   0,   5,   6,   0, 
     15, 160,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
    128,  63,   0,   0,   0,   0, 
     48,   0,   0,   5,   0,   0, 
     15, 240, 255,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   0,   8,  15, 160, 
      1,   0,   0,   2,   0,   0, 
     12, 128,   6,   0,   0, 160, 
      1,   0,   0,   2,   1,   0, 
      1, 128,   6,   0,   0, 160, 
      1,   0,   0,   2,   1,   0, 
      2, 128,   2,   0,   0, 161, 
     38,   0,   0,   1,   0,   0, 
    228, 240,  45,   0,   4,   2, 
      2,   0,   0, 160,   1,   0, 
     85, 128,   2,   0,   0,   3, 
      2,   0,   1, 128,   1,   0, 
     85, 128,   3,   0,   0, 160, 
      1,   0,   0,   2,   3,   0, 
      1, 128,   1,   0,   0, 128, 
      1,   0,   0,   2,   3,   0, 
      2, 128,   2,   0,  85, 161, 
     38,   0,   0,   1,   0,   0, 
    228, 240,  45,   0,   4,   2, 
      2,   0,  85, 160,   3,   0, 
     85, 128,   2,   0,   0,   3, 
      2,   0,   2, 128,   3,   0, 
     85, 128,   3,   0,  85, 160, 
      4,   0,   0,   4,   0,   0, 
     35, 128,   2,   0, 228, 128, 
      5,   0, 228, 160,   0,   0, 
    228, 144,  95,   0,   0,   3, 
      4,   0,  47, 128,   0,   0, 
    228, 128,   0,   8, 228, 160, 
      2,   0,   0,   3,   3,   0, 
      1, 128,   3,   0,   0, 128, 
      4,   0, 255, 128,   2,   0, 
      0,   3,   3,   0,   2, 128, 
      3,   0,  85, 128,   6,   0, 
    170, 160,  39,   0,   0,   0, 
      1,   0,   0,   2,   1,   0, 
      1, 128,   3,   0,   0, 128, 
      2,   0,   0,   3,   1,   0, 
      2, 128,   1,   0,  85, 128, 
      6,   0, 170, 160,  39,   0, 
      0,   0,   5,   0,   0,   3, 
      0,   0,   1, 128,   1,   0, 
      0, 128,   2,   0, 255, 160, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   0,   0,   0, 128, 
      2,   0, 170, 160,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0,   0, 128,   4,   0, 
    228, 160,   5,   0,   0,   3, 
      0,   0,   7, 128,   0,   0, 
    228, 128,   1,   0, 228, 160, 
      5,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 255, 128, 
      0,   0, 228, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    255, 160,   1,   0, 228, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FBox2ShadowonlyHighlight.hlsl.h /Vn
//    pBinary_FBox2ShadowonlyHighlight D3D9/FBox2ShadowonlyHighlight.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 fsize;
//   float2 offset;
//   float4 scolor;
//   sampler2D tex;
//   float2 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   fsize        c2       1
//   offset       c3       1
//   scolor       c4       1
//   texscale     c5       1
//   tex          s0       1
//

    ps_3_0
    def c6, 0, 0, 1, 0
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    mov r0.zw, c6.x
    mov r1.x, c6.x
    mov r1.y, -c2.x
    rep i0
      break_lt c2.x, r1.y
      add r2.x, r1.y, c3.x
      mov r3.x, r1.x
      mov r3.y, -c2.y
      rep i0
        break_lt c2.y, r3.y
        add r2.y, r3.y, c3.y
        mad_pp r0.xy, r2, c5, v0
        texldl_pp r4, r0, s0
        add r3.x, r3.x, r4.w
        add r3.y, r3.y, c6.z
      endrep
      mov r1.x, r3.x
      add r1.y, r1.y, c6.z
    endrep
    mul r0.x, r1.x, c2.w
    mul r0.x, r0.x, c2.z
    mul r0, r0.x, c4
    mul r0.xyz, r0, c1
    mul r1, r0.w, c0
    mad oC0, r0, c1.w, r1

// approximately 36 instruction slots used (2 texture, 34 arithmetic)
#endif

const BYTE pBinary_FBox2ShadowonlyHighlight[] =
{
      0,   3, 255, 255, 254, 255, 
     82,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  16,   1, 
      0,   0,   0,   3, 255, 255, 
      7,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
      9,   1,   0,   0, 168,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 176,   0, 
      0,   0,   0,   0,   0,   0, 
    192,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    176,   0,   0,   0,   0,   0, 
      0,   0, 198,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 176,   0,   0,   0, 
      0,   0,   0,   0, 204,   0, 
      0,   0,   2,   0,   3,   0, 
      1,   0,  14,   0, 212,   0, 
      0,   0,   0,   0,   0,   0, 
    228,   0,   0,   0,   2,   0, 
      4,   0,   1,   0,  18,   0, 
    176,   0,   0,   0,   0,   0, 
      0,   0, 235,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 240,   0,   0,   0, 
      0,   0,   0,   0,   0,   1, 
      0,   0,   2,   0,   5,   0, 
      1,   0,  22,   0, 212,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120,  97, 100, 100,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120, 109, 117, 108,   0, 
    102, 115, 105, 122, 101,   0, 
    111, 102, 102, 115, 101, 116, 
      0, 171,   1,   0,   3,   0, 
      1,   0,   2,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    115,  99, 111, 108, 111, 114, 
      0, 116, 101, 120,   0, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 115,  99,  97, 108, 101, 
      0, 112, 115,  95,  51,  95, 
     48,   0,  77, 105,  99, 114, 
    111, 115, 111, 102, 116,  32, 
     40,  82,  41,  32,  72,  76, 
     83,  76,  32,  83, 104,  97, 
    100, 101, 114,  32,  67, 111, 
    109, 112, 105, 108, 101, 114, 
     32,  57,  46,  50,  57,  46, 
     57,  53,  50,  46,  51,  49, 
     49,  49,   0, 171, 171, 171, 
     81,   0,   0,   5,   6,   0, 
     15, 160,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
    128,  63,   0,   0,   0,   0, 
     48,   0,   0,   5,   0,   0, 
     15, 240, 255,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   0,   8,  15, 160, 
      1,   0,   0,   2,   0,   0, 
     12, 128,   6,   0,   0, 160, 
      1,   0,   0,   2,   1,   0, 
      1, 128,   6,   0,   0, 160, 
      1,   0,   0,   2,   1,   0, 
      2, 128,   2,   0,   0, 161, 
     38,   0,   0,   1,   0,   0, 
    228, 240,  45,   0,   4,   2, 
      2,   0,   0, 160,   1,   0, 
     85, 128,   2,   0,   0,   3, 
      2,   0,   1, 128,   1,   0, 
     85, 128,   3,   0,   0, 160, 
      1,   0,   0,   2,   3,   0, 
      1, 128,   1,   0,   0, 128, 
      1,   0,   0,   2,   3,   0, 
      2, 128,   2,   0,  85, 161, 
     38,   0,   0,   1,   0,   0, 
    228, 240,  45,   0,   4,   2, 
      2,   0,  85, 160,   3,   0, 
     85, 128,   2,   0,   0,   3, 
      2,   0,   2, 128,   3,   0, 
     85, 128,   3,   0,  85, 160, 
      4,   0,   0,   4,   0,   0, 
     35, 128,   2,   0, 228, 128, 
      5,   0, 228, 160,   0,   0, 
    228, 144,  95,   0,   0,   3, 
      4,   0,  47, 128,   0,   0, 
    228, 128,   0,   8, 228, 160, 
      2,   0,   0,   3,   3,   0, 
      1, 128,   3,   0,   0, 128, 
      4,   0, 255, 128,   2,   0, 
      0,   3,   3,   0,   2, 128, 
      3,   0,  85, 128,   6,   0, 
    170, 160,  39,   0,   0,   0, 
      1,   0,   0,   2,   1,   0, 
      1, 128,   3,   0,   0, 128, 
      2,   0,   0,   3,   1,   0, 
      2, 128,   1,   0,  85, 128, 
      6,   0, 170, 160,  39,   0, 
      0,   0,   5,   0,   0,   3, 
      0,   0,   1, 128,   1,   0, 
      0, 128,   2,   0, 255, 160, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   0,   0,   0, 128, 
      2,   0, 170, 160,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0,   0, 128,   4,   0, 
    228, 160,   5,   0,   0,   3, 
      0,   0,   7, 128,   0,   0, 
    228, 128,   1,   0, 228, 160, 
      5,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 255, 128, 
      0,   0, 228, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    255, 160,   1,   0, 228, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FBox2ShadowonlyMul.hlsl.h /Vn
//    pBinary_FBox2ShadowonlyMul D3D9/FBox2ShadowonlyMul.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 fsize;
//   float2 offset;
//   float4 scolor;
//   sampler2D tex;
//   float2 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   fsize        c2       1
//   offset       c3       1
//   scolor       c4       1
//   texscale     c5       1
//   tex          s0       1
//

    ps_3_0
    def c6, 0, 0, 1, -1
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    mov r0.zw, c6.x
    mov r1.x, c6.x
    mov r1.y, -c2.x
    rep i0
      break_lt c2.x, r1.y
      add r2.x, r1.y, c3.x
      mov r3.x, r1.x
      mov r3.y, -c2.y
      rep i0
        break_lt c2.y, r3.y
        add r2.y, r3.y, c3.y
        mad_pp r0.xy, r2, c5, v0
        texldl_pp r4, r0, s0
        add r3.x, r3.x, r4.w
        add r3.y, r3.y, c6.z
      endrep
      mov r1.x, r3.x
      add r1.y, r1.y, c6.z
    endrep
    mul r0.x, r1.x, c2.w
    mul r0.x, r0.x, c2.z
    mul r0, r0.x, c4
    mul r0.xyz, r0, c1
    mul r1, r0.w, c0
    mad r0, r0, c1.w, r1
    add r1, r0, c6.w
    mad oC0, r0.w, r1, c6.z

// approximately 38 instruction slots used (2 texture, 36 arithmetic)
#endif

const BYTE pBinary_FBox2ShadowonlyMul[] =
{
      0,   3, 255, 255, 254, 255, 
     82,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  16,   1, 
      0,   0,   0,   3, 255, 255, 
      7,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
      9,   1,   0,   0, 168,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 176,   0, 
      0,   0,   0,   0,   0,   0, 
    192,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    176,   0,   0,   0,   0,   0, 
      0,   0, 198,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 176,   0,   0,   0, 
      0,   0,   0,   0, 204,   0, 
      0,   0,   2,   0,   3,   0, 
      1,   0,  14,   0, 212,   0, 
      0,   0,   0,   0,   0,   0, 
    228,   0,   0,   0,   2,   0, 
      4,   0,   1,   0,  18,   0, 
    176,   0,   0,   0,   0,   0, 
      0,   0, 235,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 240,   0,   0,   0, 
      0,   0,   0,   0,   0,   1, 
      0,   0,   2,   0,   5,   0, 
      1,   0,  22,   0, 212,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120,  97, 100, 100,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120, 109, 117, 108,   0, 
    102, 115, 105, 122, 101,   0, 
    111, 102, 102, 115, 101, 116, 
      0, 171,   1,   0,   3,   0, 
      1,   0,   2,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    115,  99, 111, 108, 111, 114, 
      0, 116, 101, 120,   0, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 115,  99,  97, 108, 101, 
      0, 112, 115,  95,  51,  95, 
     48,   0,  77, 105,  99, 114, 
    111, 115, 111, 102, 116,  32, 
     40,  82,  41,  32,  72,  76, 
     83,  76,  32,  83, 104,  97, 
    100, 101, 114,  32,  67, 111, 
    109, 112, 105, 108, 101, 114, 
     32,  57,  46,  50,  57,  46, 
     57,  53,  50,  46,  51,  49, 
     49,  49,   0, 171, 171, 171, 
     81,   0,   0,   5,   6,   0, 
     15, 160,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
    128,  63,   0,   0, 128, 191, 
     48,   0,   0,   5,   0,   0, 
     15, 240, 255,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   0,   8,  15, 160, 
      1,   0,   0,   2,   0,   0, 
     12, 128,   6,   0,   0, 160, 
      1,   0,   0,   2,   1,   0, 
      1, 128,   6,   0,   0, 160, 
      1,   0,   0,   2,   1,   0, 
      2, 128,   2,   0,   0, 161, 
     38,   0,   0,   1,   0,   0, 
    228, 240,  45,   0,   4,   2, 
      2,   0,   0, 160,   1,   0, 
     85, 128,   2,   0,   0,   3, 
      2,   0,   1, 128,   1,   0, 
     85, 128,   3,   0,   0, 160, 
      1,   0,   0,   2,   3,   0, 
      1, 128,   1,   0,   0, 128, 
      1,   0,   0,   2,   3,   0, 
      2, 128,   2,   0,  85, 161, 
     38,   0,   0,   1,   0,   0, 
    228, 240,  45,   0,   4,   2, 
      2,   0,  85, 160,   3,   0, 
     85, 128,   2,   0,   0,   3, 
      2,   0,   2, 128,   3,   0, 
     85, 128,   3,   0,  85, 160, 
      4,   0,   0,   4,   0,   0, 
     35, 128,   2,   0, 228, 128, 
      5,   0, 228, 160,   0,   0, 
    228, 144,  95,   0,   0,   3, 
      4,   0,  47, 128,   0,   0, 
    228, 128,   0,   8, 228, 160, 
      2,   0,   0,   3,   3,   0, 
      1, 128,   3,   0,   0, 128, 
      4,   0, 255, 128,   2,   0, 
      0,   3,   3,   0,   2, 128, 
      3,   0,  85, 128,   6,   0, 
    170, 160,  39,   0,   0,   0, 
      1,   0,   0,   2,   1,   0, 
      1, 128,   3,   0,   0, 128, 
      2,   0,   0,   3,   1,   0, 
      2, 128,   1,   0,  85, 128, 
      6,   0, 170, 160,  39,   0, 
      0,   0,   5,   0,   0,   3, 
      0,   0,   1, 128,   1,   0, 
      0, 128,   2,   0, 255, 160, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   0,   0,   0, 128, 
      2,   0, 170, 160,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0,   0, 128,   4,   0, 
    228, 160,   5,   0,   0,   3, 
      0,   0,   7, 128,   0,   0, 
    228, 128,   1,   0, 228, 160, 
      5,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 255, 128, 
      0,   0, 228, 160,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    255, 160,   1,   0, 228, 128, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      6,   0, 255, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   6,   0, 170, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FBox2ShadowonlyMulHighlight.hlsl.h
//    /Vn pBinary_FBox2ShadowonlyMulHighlight
//    D3D9/FBox2ShadowonlyMulHighlight.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 fsize;
//   float2 offset;
//   float4 scolor;
//   sampler2D tex;
//   float2 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   fsize        c2       1
//   offset       c3       1
//   scolor       c4       1
//   texscale     c5       1
//   tex          s0       1
//

    ps_3_0
    def c6, 0, 0, 1, -1
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    mov r0.zw, c6.x
    mov r1.x, c6.x
    mov r1.y, -c2.x
    rep i0
      break_lt c2.x, r1.y
      add r2.x, r1.y, c3.x
      mov r3.x, r1.x
      mov r3.y, -c2.y
      rep i0
        break_lt c2.y, r3.y
        add r2.y, r3.y, c3.y
        mad_pp r0.xy, r2, c5, v0
        texldl_pp r4, r0, s0
        add r3.x, r3.x, r4.w
        add r3.y, r3.y, c6.z
      endrep
      mov r1.x, r3.x
      add r1.y, r1.y, c6.z
    endrep
    mul r0.x, r1.x, c2.w
    mul r0.x, r0.x, c2.z
    mul r0, r0.x, c4
    mul r0.xyz, r0, c1
    mul r1, r0.w, c0
    mad r0, r0, c1.w, r1
    add r1, r0, c6.w
    mad oC0, r0.w, r1, c6.z

// approximately 38 instruction slots used (2 texture, 36 arithmetic)
#endif

const BYTE pBinary_FBox2ShadowonlyMulHighlight[] =
{
      0,   3, 255, 255, 254, 255, 
     82,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  16,   1, 
      0,   0,   0,   3, 255, 255, 
      7,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
      9,   1,   0,   0, 168,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 176,   0, 
      0,   0,   0,   0,   0,   0, 
    192,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    176,   0,   0,   0,   0,   0, 
      0,   0, 198,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 176,   0,   0,   0, 
      0,   0,   0,   0, 204,   0, 
      0,   0,   2,   0,   3,   0, 
      1,   0,  14,   0, 212,   0, 
      0,   0,   0,   0,   0,   0, 
    228,   0,   0,   0,   2,   0, 
      4,   0,   1,   0,  18,   0, 
    176,   0,   0,   0,   0,   0, 
      0,   0, 235,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 240,   0,   0,   0, 
      0,   0,   0,   0,   0,   1, 
      0,   0,   2,   0,   5,   0, 
      1,   0,  22,   0, 212,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120,  97, 100, 100,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120, 109, 117, 108,   0, 
    102, 115, 105, 122, 101,   0, 
    111, 102, 102, 115, 101, 116, 
      0, 171,   1,   0,   3,   0, 
      1,   0,   2,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    115,  99, 111, 108, 111, 114, 
      0, 116, 101, 120,   0, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 115,  99,  97, 108, 101, 
      0, 112, 115,  95,  51,  95, 
     48,   0,  77, 105,  99, 114, 
    111, 115, 111, 102, 116,  32, 
     40,  82,  41,  32,  72,  76, 
     83,  76,  32,  83, 104,  97, 
    100, 101, 114,  32,  67, 111, 
    109, 112, 105, 108, 101, 114, 
     32,  57,  46,  50,  57,  46, 
     57,  53,  50,  46,  51,  49, 
     49,  49,   0, 171, 171, 171, 
     81,   0,   0,   5,   6,   0, 
     15, 160,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
    128,  63,   0,   0, 128, 191, 
     48,   0,   0,   5,   0,   0, 
     15, 240, 255,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   0,   8,  15, 160, 
      1,   0,   0,   2,   0,   0, 
     12, 128,   6,   0,   0, 160, 
      1,   0,   0,   2,   1,   0, 
      1, 128,   6,   0,   0, 160, 
      1,   0,   0,   2,   1,   0, 
      2, 128,   2,   0,   0, 161, 
     38,   0,   0,   1,   0,   0, 
    228, 240,  45,   0,   4,   2, 
      2,   0,   0, 160,   1,   0, 
     85, 128,   2,   0,   0,   3, 
      2,   0,   1, 128,   1,   0, 
     85, 128,   3,   0,   0, 160, 
      1,   0,   0,   2,   3,   0, 
      1, 128,   1,   0,   0, 128, 
      1,   0,   0,   2,   3,   0, 
      2, 128,   2,   0,  85, 161, 
     38,   0,   0,   1,   0,   0, 
    228, 240,  45,   0,   4,   2, 
      2,   0,  85, 160,   3,   0, 
     85, 128,   2,   0,   0,   3, 
      2,   0,   2, 128,   3,   0, 
     85, 128,   3,   0,  85, 160, 
      4,   0,   0,   4,   0,   0, 
     35, 128,   2,   0, 228, 128, 
      5,   0, 228, 160,   0,   0, 
    228, 144,  95,   0,   0,   3, 
      4,   0,  47, 128,   0,   0, 
    228, 128,   0,   8, 228, 160, 
      2,   0,   0,   3,   3,   0, 
      1, 128,   3,   0,   0, 128, 
      4,   0, 255, 128,   2,   0, 
      0,   3,   3,   0,   2, 128, 
      3,   0,  85, 128,   6,   0, 
    170, 160,  39,   0,   0,   0, 
      1,   0,   0,   2,   1,   0, 
      1, 128,   3,   0,   0, 128, 
      2,   0,   0,   3,   1,   0, 
      2, 128,   1,   0,  85, 128, 
      6,   0, 170, 160,  39,   0, 
      0,   0,   5,   0,   0,   3, 
      0,   0,   1, 128,   1,   0, 
      0, 128,   2,   0, 255, 160, 
      5,   0,   0,   3,   0,   0, 
      1, 128,   0,   0,   0, 128, 
      2,   0, 170, 160,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0,   0, 128,   4,   0, 
    228, 160,   5,   0,   0,   3, 
      0,   0,   7, 128,   0,   0, 
    228, 128,   1,   0, 228, 160, 
      5,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 255, 128, 
      0,   0, 228, 160,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    255, 160,   1,   0, 228, 128, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      6,   0, 255, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   6,   0, 170, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VBox2.hlsl.h /Vn pBinary_VBox2
//    D3D9/VBox2.hlsl
//
//
// Parameters:
//
//   float4 mvp[2];
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//   texgen       c2       2
//

    vs_3_0
    dcl_position v0
    dcl_texcoord o0.xy
    dcl_position o1
    dp4 o0.x, v0, c2
    dp4 o0.y, v0, c3
    dp4 o1.x, v0, c0
    dp4 o1.y, v0, c1
    mov o1.zw, v0

// approximately 5 instruction slots used
#endif

const BYTE pBinary_VBox2[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      2,   0,   2,   0,  10,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      9,   0,   0,   3,   0,   0, 
      1, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   0,   0,   2, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   1, 224,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      2, 224,   0,   0, 228, 144, 
      1,   0, 228, 160,   1,   0, 
      0,   2,   1,   0,  12, 224, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FSolid.hlsl.h /Vn pBinary_FSolid
//    D3D9/FSolid.hlsl
//
//
// Parameters:
//
//   float4 cxmul;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxmul        c0       1
//

    ps_3_0
    mov oC0, c0

// approximately 1 instruction slot used
#endif

const BYTE pBinary_FSolid[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
     99, 120, 109, 117, 108,   0, 
    171, 171,   1,   0,   3,   0, 
      1,   0,   4,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,   1,   0,   0,   2, 
      0,   8,  15, 128,   0,   0, 
    228, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FSolidBatch.hlsl.h /Vn
//    pBinary_FSolidBatch D3D9/FSolidBatch.hlsl
//
    ps_3_0
    dcl_texcoord4 v0
    mov oC0, v0

// approximately 1 instruction slot used
#endif

const BYTE pBinary_FSolidBatch[] =
{
      0,   3, 255, 255, 254, 255, 
     22,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  35,   0, 
      0,   0,   0,   3, 255, 255, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   1,   0,   0, 
     28,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   0,   0,  15, 144, 
      1,   0,   0,   2,   0,   8, 
     15, 128,   0,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FText.hlsl.h /Vn pBinary_FText
//    D3D9/FText.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    dcl_texcoord v0.xy
    dcl_color_pp v1
    dcl_2d s0
    texld r0, v0, s0
    mul_pp oC0.w, r0.w, v1.w
    mov_pp oC0.xyz, v1

// approximately 3 instruction slots used (1 texture, 2 arithmetic)
#endif

const BYTE pBinary_FText[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
      3, 144,  31,   0,   0,   2, 
     10,   0,   0, 128,   1,   0, 
     47, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 144,   0,   8, 228, 160, 
      5,   0,   0,   3,   0,   8, 
     40, 128,   0,   0, 255, 128, 
      1,   0, 255, 144,   1,   0, 
      0,   2,   0,   8,  39, 128, 
      1,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTextBatch.hlsl.h /Vn
//    pBinary_FTextBatch D3D9/FTextBatch.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    dcl_texcoord v0.xy
    dcl_color_pp v1
    dcl_2d s0
    texld r0, v0, s0
    mul_pp oC0.w, r0.w, v1.w
    mov_pp oC0.xyz, v1

// approximately 3 instruction slots used (1 texture, 2 arithmetic)
#endif

const BYTE pBinary_FTextBatch[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
      3, 144,  31,   0,   0,   2, 
     10,   0,   0, 128,   1,   0, 
     47, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 144,   0,   8, 228, 160, 
      5,   0,   0,   3,   0,   8, 
     40, 128,   0,   0, 255, 128, 
      1,   0, 255, 144,   1,   0, 
      0,   2,   0,   8,  39, 128, 
      1,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTextBatchMul.hlsl.h /Vn
//    pBinary_FTextBatchMul D3D9/FTextBatchMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_texcoord v0.xy
    dcl_color_pp v1
    dcl_2d s0
    mov_pp r0.xyz, v1
    texld r1, v0, s0
    mul_pp r0.w, r1.w, v1.w
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 5 instruction slots used (1 texture, 4 arithmetic)
#endif

const BYTE pBinary_FTextBatchMul[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      0,   0,  15, 160,   0,   0, 
    128, 191,   0,   0, 128,  63, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
      3, 144,  31,   0,   0,   2, 
     10,   0,   0, 128,   1,   0, 
     47, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,   1,   0,   0,   2, 
      0,   0,  39, 128,   1,   0, 
    228, 144,  66,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 144,   0,   8, 228, 160, 
      5,   0,   0,   3,   0,   0, 
     40, 128,   1,   0, 255, 128, 
      1,   0, 255, 144,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   0,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      0,   0,  85, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTextMul.hlsl.h /Vn
//    pBinary_FTextMul D3D9/FTextMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_texcoord v0.xy
    dcl_color_pp v1
    dcl_2d s0
    mov_pp r0.xyz, v1
    texld r1, v0, s0
    mul_pp r0.w, r1.w, v1.w
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 5 instruction slots used (1 texture, 4 arithmetic)
#endif

const BYTE pBinary_FTextMul[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      0,   0,  15, 160,   0,   0, 
    128, 191,   0,   0, 128,  63, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
      3, 144,  31,   0,   0,   2, 
     10,   0,   0, 128,   1,   0, 
     47, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,   1,   0,   0,   2, 
      0,   0,  39, 128,   1,   0, 
    228, 144,  66,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 144,   0,   8, 228, 160, 
      5,   0,   0,   3,   0,   0, 
     40, 128,   1,   0, 255, 128, 
      1,   0, 255, 144,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   0,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      0,   0,  85, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTextColor.hlsl.h /Vn
//    pBinary_FTextColor D3D9/FTextColor.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    dcl_texcoord v0.xy
    dcl_2d s0
    texld oC0, v0, s0

// approximately 1 instruction slot used (1 texture, 0 arithmetic)
#endif

const BYTE pBinary_FTextColor[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   8,  15, 128,   0,   0, 
    228, 144,   0,   8, 228, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTextColorBatch.hlsl.h /Vn
//    pBinary_FTextColorBatch D3D9/FTextColorBatch.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    dcl_texcoord v0.xy
    dcl_2d s0
    texld oC0, v0, s0

// approximately 1 instruction slot used (1 texture, 0 arithmetic)
#endif

const BYTE pBinary_FTextColorBatch[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   8,  15, 128,   0,   0, 
    228, 144,   0,   8, 228, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTextColorBatchCxform.hlsl.h /Vn
//    pBinary_FTextColorBatchCxform D3D9/FTextColorBatchCxform.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    dcl_texcoord3 v0
    dcl_texcoord4 v1
    dcl_texcoord v2.xy
    dcl_2d s0
    texld r0, v2, s0
    mov r1, v1
    mad oC0, r0, r1, v0

// approximately 3 instruction slots used (1 texture, 2 arithmetic)
#endif

const BYTE pBinary_FTextColorBatchCxform[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  31,   0,   0,   2, 
      5,   0,   3, 128,   0,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   4, 128,   1,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   2,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   2,   0, 
    228, 144,   0,   8, 228, 160, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   1,   0, 228, 144, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   0,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTextColorBatchCxformMul.hlsl.h /Vn
//    pBinary_FTextColorBatchCxformMul D3D9/FTextColorBatchCxformMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_texcoord3 v0
    dcl_texcoord4 v1
    dcl_texcoord v2.xy
    dcl_2d s0
    texld r0, v2, s0
    mov r1, v1
    mad r0, r0, r1, v0
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 5 instruction slots used (1 texture, 4 arithmetic)
#endif

const BYTE pBinary_FTextColorBatchCxformMul[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      0,   0,  15, 160,   0,   0, 
    128, 191,   0,   0, 128,  63, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   3, 128,   0,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   4, 128,   1,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   2,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   2,   0, 
    228, 144,   0,   8, 228, 160, 
      1,   0,   0,   2,   1,   0, 
     15, 128,   1,   0, 228, 144, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 228, 128,   0,   0, 
    228, 144,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   0,   0,   0, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   0,   0, 
     85, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTextColorBatchMul.hlsl.h /Vn
//    pBinary_FTextColorBatchMul D3D9/FTextColorBatchMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    texld r0, v0, s0
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 3 instruction slots used (1 texture, 2 arithmetic)
#endif

const BYTE pBinary_FTextColorBatchMul[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      0,   0,  15, 160,   0,   0, 
    128, 191,   0,   0, 128,  63, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 144,   0,   8, 228, 160, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0,   0, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   0,   0,  85, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTextColorCxform.hlsl.h /Vn
//    pBinary_FTextColorCxform D3D9/FTextColorCxform.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   tex0         s0       1
//

    ps_3_0
    dcl_texcoord v0.xy
    dcl_2d s0
    texld r0, v0, s0
    mov r1, c1
    mad oC0, r0, r1, c0

// approximately 3 instruction slots used (1 texture, 2 arithmetic)
#endif

const BYTE pBinary_FTextColorCxform[] =
{
      0,   3, 255, 255, 254, 255, 
     50,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 147,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    140,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 118,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 124,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 116, 101, 
    120,  48,   0, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 144,   0,   8, 
    228, 160,   1,   0,   0,   2, 
      1,   0,  15, 128,   1,   0, 
    228, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      0,   0, 228, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTextColorCxformMul.hlsl.h /Vn
//    pBinary_FTextColorCxformMul D3D9/FTextColorCxformMul.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   tex0         s0       1
//

    ps_3_0
    def c2, -1, 1, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    texld r0, v0, s0
    mov r1, c1
    mad r0, r0, r1, c0
    add r1, r0, c2.x
    mad oC0, r0.w, r1, c2.y

// approximately 5 instruction slots used (1 texture, 4 arithmetic)
#endif

const BYTE pBinary_FTextColorCxformMul[] =
{
      0,   3, 255, 255, 254, 255, 
     50,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 147,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    140,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 118,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 124,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 116, 101, 
    120,  48,   0, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  81,   0, 
      0,   5,   2,   0,  15, 160, 
      0,   0, 128, 191,   0,   0, 
    128,  63,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 144,   0,   8, 
    228, 160,   1,   0,   0,   2, 
      1,   0,  15, 128,   1,   0, 
    228, 160,   4,   0,   0,   4, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      0,   0, 228, 160,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   2,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      2,   0,  85, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTextColorMul.hlsl.h /Vn
//    pBinary_FTextColorMul D3D9/FTextColorMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex0         s0       1
//

    ps_3_0
    def c0, -1, 1, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    texld r0, v0, s0
    add r1, r0, c0.x
    mad oC0, r0.w, r1, c0.y

// approximately 3 instruction slots used (1 texture, 2 arithmetic)
#endif

const BYTE pBinary_FTextColorMul[] =
{
      0,   3, 255, 255, 254, 255, 
     33,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  79,   0, 
      0,   0,   0,   3, 255, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     72,   0,   0,   0,  48,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  56,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  48,   0, 171, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      0,   0,  15, 160,   0,   0, 
    128, 191,   0,   0, 128,  63, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 144,   0,   8, 228, 160, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0,   0, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   0,   0,  85, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VBatchPosition3dCxformVatc.hlsl.h
//    /Vn pBinary_VBatchPosition3dCxformVatc
//    D3D9/VBatchPosition3dCxformVatc.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[72];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      72
//

    vs_3_0
    def c72, 3, 2, 0, 0
    dcl_position v0
    dcl_texcoord v1
    dcl_color1 v2
    dcl_texcoord3 o0
    dcl_texcoord4 o1
    dcl_texcoord o2.xy
    dcl_position o3
    mad r0.x, v2.x, c72.x, c72.y
    mul r0.y, c72.x, v2.x
    frc r0.y, r0.y
    add r0.x, r0.x, -r0.y
    mad r0.y, v2.x, c72.x, -r0.y
    mova a0.xy, r0.yxzw
    dp4 o3, v0, c0[a0.y]
    mov o0, c0[a0.x]
    mov o1, c1[a0.x]
    mov o2.xy, v1

// approximately 10 instruction slots used
#endif

const BYTE pBinary_VBatchPosition3dCxformVatc[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     72,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  72,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,  72,   0, 
     15, 160,   0,   0,  64,  64, 
      0,   0,   0,  64,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      1, 128,   2,   0,   0, 144, 
     72,   0,   0, 160,  72,   0, 
     85, 160,   5,   0,   0,   3, 
      0,   0,   2, 128,  72,   0, 
      0, 160,   2,   0,   0, 144, 
     19,   0,   0,   2,   0,   0, 
      2, 128,   0,   0,  85, 128, 
      2,   0,   0,   3,   0,   0, 
      1, 128,   0,   0,   0, 128, 
      0,   0,  85, 129,   4,   0, 
      0,   4,   0,   0,   2, 128, 
      2,   0,   0, 144,  72,   0, 
      0, 160,   0,   0,  85, 129, 
     46,   0,   0,   2,   0,   0, 
      3, 176,   0,   0, 225, 128, 
      9,   0,   0,   4,   3,   0, 
     15, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
     85, 176,   1,   0,   0,   3, 
      0,   0,  15, 224,   0,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   3,   1,   0, 
     15, 224,   1,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   2,   0,   3, 224, 
      1,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VBatchPosition3dVatc.hlsl.h /Vn
//    pBinary_VBatchPosition3dVatc D3D9/VBatchPosition3dVatc.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[24];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      24
//

    vs_3_0
    dcl_position v0
    dcl_texcoord v1
    dcl_color1 v2
    dcl_texcoord o0.xy
    dcl_position o1
    frc r0.x, v2.x
    add r0.x, -r0.x, v2.x
    mova a0.x, r0.x
    dp4 o1, v0, c0[a0.x]
    mov o0.xy, v1

// approximately 5 instruction slots used
#endif

const BYTE pBinary_VBatchPosition3dVatc[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     24,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  24,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
     19,   0,   0,   2,   0,   0, 
      1, 128,   2,   0,   0, 144, 
      2,   0,   0,   3,   0,   0, 
      1, 128,   0,   0,   0, 129, 
      2,   0,   0, 144,  46,   0, 
      0,   2,   0,   0,   1, 176, 
      0,   0,   0, 128,   9,   0, 
      0,   4,   1,   0,  15, 224, 
      0,   0, 228, 144,   0,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   2,   0,   0, 
      3, 224,   1,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VBatchPosition3d.hlsl.h /Vn
//    pBinary_VBatchPosition3d D3D9/VBatchPosition3d.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[48];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      48
//

    vs_3_0
    def c48, 2, 1, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_texcoord4 o0
    dcl_position o1
    mad r0.x, v1.x, c48.x, c48.y
    add r0.y, v1.x, v1.x
    frc r0.z, r0.y
    add r0.xy, r0, -r0.z
    mova a0.x, r0.x
    dp4 o1, v0, c0[a0.x]
    mova a0.x, r0.y
    mov o0, c0[a0.x]

// approximately 8 instruction slots used
#endif

const BYTE pBinary_VBatchPosition3d[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     48,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  48,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,  48,   0, 
     15, 160,   0,   0,   0,  64, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      1, 128,   1,   0,   0, 144, 
     48,   0,   0, 160,  48,   0, 
     85, 160,   2,   0,   0,   3, 
      0,   0,   2, 128,   1,   0, 
      0, 144,   1,   0,   0, 144, 
     19,   0,   0,   2,   0,   0, 
      4, 128,   0,   0,  85, 128, 
      2,   0,   0,   3,   0,   0, 
      3, 128,   0,   0, 228, 128, 
      0,   0, 170, 129,  46,   0, 
      0,   2,   0,   0,   1, 176, 
      0,   0,   0, 128,   9,   0, 
      0,   4,   1,   0,  15, 224, 
      0,   0, 228, 144,   0,  32, 
    228, 160,   0,   0,   0, 176, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,  85, 128, 
      1,   0,   0,   3,   0,   0, 
     15, 224,   0,  32, 228, 160, 
      0,   0,   0, 176, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VBatchCxformVatc.hlsl.h /Vn
//    pBinary_VBatchCxformVatc D3D9/VBatchCxformVatc.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[96];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      96
//

    vs_3_0
    def c96, 4, 2, 0, 0
    dcl_position v0
    dcl_texcoord v1
    dcl_color1 v2
    dcl_texcoord3 o0
    dcl_texcoord4 o1
    dcl_texcoord o2.xy
    dcl_position o3
    mad r0.x, v2.x, c96.x, c96.y
    mul r0.y, c96.x, v2.x
    frc r0.y, r0.y
    add r0.x, r0.x, -r0.y
    mad r0.y, v2.x, c96.x, -r0.y
    mova a0.xy, r0.yxzw
    dp4 o3.x, v0, c0[a0.y]
    dp4 o3.y, v0, c3[a0.x]
    mov o0, c0[a0.x]
    mov o1, c1[a0.x]
    mov o2.xy, v1
    mov o3.zw, v0

// approximately 12 instruction slots used
#endif

const BYTE pBinary_VBatchCxformVatc[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,  96,   0, 
     15, 160,   0,   0, 128,  64, 
      0,   0,   0,  64,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      1, 128,   2,   0,   0, 144, 
     96,   0,   0, 160,  96,   0, 
     85, 160,   5,   0,   0,   3, 
      0,   0,   2, 128,  96,   0, 
      0, 160,   2,   0,   0, 144, 
     19,   0,   0,   2,   0,   0, 
      2, 128,   0,   0,  85, 128, 
      2,   0,   0,   3,   0,   0, 
      1, 128,   0,   0,   0, 128, 
      0,   0,  85, 129,   4,   0, 
      0,   4,   0,   0,   2, 128, 
      2,   0,   0, 144,  96,   0, 
      0, 160,   0,   0,  85, 129, 
     46,   0,   0,   2,   0,   0, 
      3, 176,   0,   0, 225, 128, 
      9,   0,   0,   4,   3,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
     85, 176,   9,   0,   0,   4, 
      3,   0,   2, 224,   0,   0, 
    228, 144,   3,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   3,   0,   0,  15, 224, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   3, 
      1,   0,  15, 224,   1,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   2,   2,   0, 
      3, 224,   1,   0, 228, 144, 
      1,   0,   0,   2,   3,   0, 
     12, 224,   0,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VBatchVatc.hlsl.h /Vn
//    pBinary_VBatchVatc D3D9/VBatchVatc.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[48];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      48
//

    vs_3_0
    def c48, 2, 0, 0, 0
    dcl_position v0
    dcl_texcoord v1
    dcl_color1 v2
    dcl_texcoord o0.xy
    dcl_position o1
    add r0.x, v2.x, v2.x
    frc r0.x, r0.x
    mad r0.x, v2.x, c48.x, -r0.x
    mova a0.x, r0.x
    dp4 o1.x, v0, c0[a0.x]
    dp4 o1.y, v0, c1[a0.x]
    mov o0.xy, v1
    mov o1.zw, v0

// approximately 8 instruction slots used
#endif

const BYTE pBinary_VBatchVatc[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     48,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  48,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,  48,   0, 
     15, 160,   0,   0,   0,  64, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      2,   0,   0,   3,   0,   0, 
      1, 128,   2,   0,   0, 144, 
      2,   0,   0, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      2,   0,   0, 144,  48,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   1,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      1,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   0,   0,   3, 224, 
      1,   0, 228, 144,   1,   0, 
      0,   2,   1,   0,  12, 224, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VBatch.hlsl.h /Vn pBinary_VBatch
//    D3D9/VBatch.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[72];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      72
//

    vs_3_0
    def c72, 3, 1, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_texcoord4 o0
    dcl_position o1
    mad r0.x, v1.x, c72.x, c72.y
    mul r0.y, c72.x, v1.x
    frc r0.y, r0.y
    add r0.x, r0.x, -r0.y
    mad r0.y, v1.x, c72.x, -r0.y
    mova a0.xy, r0.yxzw
    dp4 o1.x, v0, c0[a0.y]
    dp4 o1.y, v0, c2[a0.x]
    mov o0, c0[a0.x]
    mov o1.zw, v0

// approximately 10 instruction slots used
#endif

const BYTE pBinary_VBatch[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     72,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  72,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,  72,   0, 
     15, 160,   0,   0,  64,  64, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      1, 128,   1,   0,   0, 144, 
     72,   0,   0, 160,  72,   0, 
     85, 160,   5,   0,   0,   3, 
      0,   0,   2, 128,  72,   0, 
      0, 160,   1,   0,   0, 144, 
     19,   0,   0,   2,   0,   0, 
      2, 128,   0,   0,  85, 128, 
      2,   0,   0,   3,   0,   0, 
      1, 128,   0,   0,   0, 128, 
      0,   0,  85, 129,   4,   0, 
      0,   4,   0,   0,   2, 128, 
      1,   0,   0, 144,  72,   0, 
      0, 160,   0,   0,  85, 129, 
     46,   0,   0,   2,   0,   0, 
      3, 176,   0,   0, 225, 128, 
      9,   0,   0,   4,   1,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
     85, 176,   9,   0,   0,   4, 
      1,   0,   2, 224,   0,   0, 
    228, 144,   2,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   3,   0,   0,  15, 224, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      1,   0,  12, 224,   0,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VPosition3d.hlsl.h /Vn
//    pBinary_VPosition3d D3D9/VPosition3d.hlsl
//
//
// Parameters:
//
//   float4x4 mvp;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//

    vs_3_0
    dcl_position v0
    dcl_position o0
    dp4 o0.x, v0, c0
    dp4 o0.y, v0, c1
    dp4 o0.z, v0, c2
    dp4 o0.w, v0, c3

// approximately 4 instruction slots used
#endif

const BYTE pBinary_VPosition3d[] =
{
      0,   3, 254, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    109, 118, 112,   0,   3,   0, 
      3,   0,   4,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      0,   0,  15, 224,   9,   0, 
      0,   3,   0,   0,   1, 224, 
      0,   0, 228, 144,   0,   0, 
    228, 160,   9,   0,   0,   3, 
      0,   0,   2, 224,   0,   0, 
    228, 144,   1,   0, 228, 160, 
      9,   0,   0,   3,   0,   0, 
      4, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   0,   0,   8, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VPosition3dCxformVatc.hlsl.h /Vn
//    pBinary_VPosition3dCxformVatc D3D9/VPosition3dCxformVatc.hlsl
//
//
// Parameters:
//
//   float4x4 mvp;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//

    vs_3_0
    dcl_position v0
    dcl_texcoord v1
    dcl_texcoord o0.xy
    dcl_position o1
    dp4 o1.x, v0, c0
    dp4 o1.y, v0, c1
    dp4 o1.z, v0, c2
    dp4 o1.w, v0, c3
    mov o0.xy, v1

// approximately 5 instruction slots used
#endif

const BYTE pBinary_VPosition3dCxformVatc[] =
{
      0,   3, 254, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    109, 118, 112,   0,   3,   0, 
      3,   0,   4,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 224,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      1,   0,  15, 224,   9,   0, 
      0,   3,   1,   0,   1, 224, 
      0,   0, 228, 144,   0,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   2, 224,   0,   0, 
    228, 144,   1,   0, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      4, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   8, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160,   1,   0,   0,   2, 
      0,   0,   3, 224,   1,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VPosition3dVatc.hlsl.h /Vn
//    pBinary_VPosition3dVatc D3D9/VPosition3dVatc.hlsl
//
//
// Parameters:
//
//   float4x4 mvp;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//

    vs_3_0
    dcl_position v0
    dcl_texcoord v1
    dcl_texcoord o0.xy
    dcl_position o1
    dp4 o1.x, v0, c0
    dp4 o1.y, v0, c1
    dp4 o1.z, v0, c2
    dp4 o1.w, v0, c3
    mov o0.xy, v1

// approximately 5 instruction slots used
#endif

const BYTE pBinary_VPosition3dVatc[] =
{
      0,   3, 254, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    109, 118, 112,   0,   3,   0, 
      3,   0,   4,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 224,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      1,   0,  15, 224,   9,   0, 
      0,   3,   1,   0,   1, 224, 
      0,   0, 228, 144,   0,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   2, 224,   0,   0, 
    228, 144,   1,   0, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      4, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   8, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160,   1,   0,   0,   2, 
      0,   0,   3, 224,   1,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VTextBatchPosition3d.hlsl.h /Vn
//    pBinary_VTextBatchPosition3d D3D9/VTextBatchPosition3d.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[72];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      72
//

    vs_3_0
    def c72, 3, 1, 0, 0
    dcl_position v0
    dcl_color v1
    dcl_texcoord v2
    dcl_color1 v3
    dcl_texcoord o0.xy
    dcl_color o1
    dcl_position o2
    mad r0.x, v3.x, c72.x, c72.y
    mul r0.y, c72.x, v3.x
    frc r0.y, r0.y
    add r0.x, r0.x, -r0.y
    mad r0.y, v3.x, c72.x, -r0.y
    mova a0.xy, r0.yxzw
    mov r0, c0[a0.y]
    mad o1, v1, r0, c0[a0.x]
    dp4 o2, v0, c2[a0.x]
    mov o0.xy, v2

// approximately 10 instruction slots used
#endif

const BYTE pBinary_VTextBatchPosition3d[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     72,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  72,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,  72,   0, 
     15, 160,   0,   0,  64,  64, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   3,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      1, 128,   3,   0,   0, 144, 
     72,   0,   0, 160,  72,   0, 
     85, 160,   5,   0,   0,   3, 
      0,   0,   2, 128,  72,   0, 
      0, 160,   3,   0,   0, 144, 
     19,   0,   0,   2,   0,   0, 
      2, 128,   0,   0,  85, 128, 
      2,   0,   0,   3,   0,   0, 
      1, 128,   0,   0,   0, 128, 
      0,   0,  85, 129,   4,   0, 
      0,   4,   0,   0,   2, 128, 
      3,   0,   0, 144,  72,   0, 
      0, 160,   0,   0,  85, 129, 
     46,   0,   0,   2,   0,   0, 
      3, 176,   0,   0, 225, 128, 
      1,   0,   0,   3,   0,   0, 
     15, 128,   0,  32, 228, 160, 
      0,   0,  85, 176,   4,   0, 
      0,   5,   1,   0,  15, 224, 
      1,   0, 228, 144,   0,   0, 
    228, 128,   0,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   2,   0,  15, 224, 
      0,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   2,   0,   0, 
      3, 224,   2,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VTextBatch.hlsl.h /Vn
//    pBinary_VTextBatch D3D9/VTextBatch.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[96];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      96
//

    vs_3_0
    def c96, 4, 1, 0, 0
    dcl_position v0
    dcl_color v1
    dcl_texcoord v2
    dcl_color1 v3
    dcl_texcoord o0.xy
    dcl_color o1
    dcl_position o2
    mad r0.x, v3.x, c96.x, c96.y
    mul r0.y, c96.x, v3.x
    frc r0.y, r0.y
    add r0.x, r0.x, -r0.y
    mad r0.y, v3.x, c96.x, -r0.y
    mova a0.xy, r0.yxzw
    mov r0, c0[a0.y]
    mad o1, v1, r0, c0[a0.x]
    dp4 o2.x, v0, c2[a0.x]
    dp4 o2.y, v0, c3[a0.x]
    mov o0.xy, v2
    mov o2.zw, v0

// approximately 12 instruction slots used
#endif

const BYTE pBinary_VTextBatch[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,  96,   0, 
     15, 160,   0,   0, 128,  64, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   3,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,  10,   0, 
      0, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      4,   0,   0,   4,   0,   0, 
      1, 128,   3,   0,   0, 144, 
     96,   0,   0, 160,  96,   0, 
     85, 160,   5,   0,   0,   3, 
      0,   0,   2, 128,  96,   0, 
      0, 160,   3,   0,   0, 144, 
     19,   0,   0,   2,   0,   0, 
      2, 128,   0,   0,  85, 128, 
      2,   0,   0,   3,   0,   0, 
      1, 128,   0,   0,   0, 128, 
      0,   0,  85, 129,   4,   0, 
      0,   4,   0,   0,   2, 128, 
      3,   0,   0, 144,  96,   0, 
      0, 160,   0,   0,  85, 129, 
     46,   0,   0,   2,   0,   0, 
      3, 176,   0,   0, 225, 128, 
      1,   0,   0,   3,   0,   0, 
     15, 128,   0,  32, 228, 160, 
      0,   0,  85, 176,   4,   0, 
      0,   5,   1,   0,  15, 224, 
      1,   0, 228, 144,   0,   0, 
    228, 128,   0,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   2,   0,   1, 224, 
      0,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   2,   0, 
      2, 224,   0,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      0,   0,   3, 224,   2,   0, 
    228, 144,   1,   0,   0,   2, 
      2,   0,  12, 224,   0,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VTextPosition3d.hlsl.h /Vn
//    pBinary_VTextPosition3d D3D9/VTextPosition3d.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4x4 mvp;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   mvp          c2       4
//

    vs_3_0
    dcl_position v0
    dcl_color v1
    dcl_texcoord v2
    dcl_texcoord o0.xy
    dcl_color o1
    dcl_position o2
    mov r0, c1
    mad o1, v1, r0, c0
    dp4 o2.x, v0, c2
    dp4 o2.y, v0, c3
    dp4 o2.z, v0, c4
    dp4 o2.w, v0, c5
    mov o0.xy, v2

// approximately 7 instruction slots used
#endif

const BYTE pBinary_VTextPosition3d[] =
{
      0,   3, 254, 255, 254, 255, 
     50,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 147,   0, 
      0,   0,   0,   3, 254, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    140,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 118,   0,   0,   0, 
      2,   0,   2,   0,   4,   0, 
     10,   0, 124,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 109, 118, 
    112,   0, 171, 171,   3,   0, 
      3,   0,   4,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      2,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 224,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      1,   0,  15, 224,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      2,   0,  15, 224,   1,   0, 
      0,   2,   0,   0,  15, 128, 
      1,   0, 228, 160,   4,   0, 
      0,   4,   1,   0,  15, 224, 
      1,   0, 228, 144,   0,   0, 
    228, 128,   0,   0, 228, 160, 
      9,   0,   0,   3,   2,   0, 
      1, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   2,   0,   2, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   4, 224,   0,   0, 
    228, 144,   4,   0, 228, 160, 
      9,   0,   0,   3,   2,   0, 
      8, 224,   0,   0, 228, 144, 
      5,   0, 228, 160,   1,   0, 
      0,   2,   0,   0,   3, 224, 
      2,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VText.hlsl.h /Vn pBinary_VText
//    D3D9/VText.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 mvp[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   mvp          c2       2
//

    vs_3_0
    dcl_position v0
    dcl_color v1
    dcl_texcoord v2
    dcl_texcoord o0.xy
    dcl_color o1
    dcl_position o2
    mov r0, c1
    mad o1, v1, r0, c0
    dp4 o2.x, v0, c2
    dp4 o2.y, v0, c3
    mov o0.xy, v2
    mov o2.zw, v0

// approximately 6 instruction slots used
#endif

const BYTE pBinary_VText[] =
{
      0,   3, 254, 255, 254, 255, 
     50,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 147,   0, 
      0,   0,   0,   3, 254, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    140,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 118,   0,   0,   0, 
      2,   0,   2,   0,   2,   0, 
     10,   0, 124,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 109, 118, 
    112,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      2,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 224,  31,   0, 
      0,   2,  10,   0,   0, 128, 
      1,   0,  15, 224,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      2,   0,  15, 224,   1,   0, 
      0,   2,   0,   0,  15, 128, 
      1,   0, 228, 160,   4,   0, 
      0,   4,   1,   0,  15, 224, 
      1,   0, 228, 144,   0,   0, 
    228, 128,   0,   0, 228, 160, 
      9,   0,   0,   3,   2,   0, 
      1, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   2,   0,   2, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160,   1,   0,   0,   2, 
      0,   0,   3, 224,   2,   0, 
    228, 144,   1,   0,   0,   2, 
      2,   0,  12, 224,   0,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/V.hlsl.h /Vn pBinary_V D3D9/V.hlsl
//
//
// Parameters:
//
//   float4 mvp[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//

    vs_3_0
    dcl_position v0
    dcl_position o0
    dp4 o0.x, v0, c0
    dp4 o0.y, v0, c1
    mov o0.zw, v0

// approximately 3 instruction slots used
#endif

const BYTE pBinary_V[] =
{
      0,   3, 254, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    109, 118, 112,   0,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      0,   0,  15, 224,   9,   0, 
      0,   3,   0,   0,   1, 224, 
      0,   0, 228, 144,   0,   0, 
    228, 160,   9,   0,   0,   3, 
      0,   0,   2, 224,   0,   0, 
    228, 144,   1,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
     12, 224,   0,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VCxformVatc.hlsl.h /Vn
//    pBinary_VCxformVatc D3D9/VCxformVatc.hlsl
//
//
// Parameters:
//
//   float4 mvp[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//

    vs_3_0
    dcl_position v0
    dcl_texcoord v1
    dcl_texcoord o0.xy
    dcl_position o1
    dp4 o1.x, v0, c0
    dp4 o1.y, v0, c1
    mov o0.xy, v1
    mov o1.zw, v0

// approximately 4 instruction slots used
#endif

const BYTE pBinary_VCxformVatc[] =
{
      0,   3, 254, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    109, 118, 112,   0,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 224,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      1,   0,  15, 224,   9,   0, 
      0,   3,   1,   0,   1, 224, 
      0,   0, 228, 144,   0,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   2, 224,   0,   0, 
    228, 144,   1,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
      3, 224,   1,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     12, 224,   0,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VVatc.hlsl.h /Vn pBinary_VVatc
//    D3D9/VVatc.hlsl
//
//
// Parameters:
//
//   float4 mvp[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//

    vs_3_0
    dcl_position v0
    dcl_texcoord v1
    dcl_texcoord o0.xy
    dcl_position o1
    dp4 o1.x, v0, c0
    dp4 o1.y, v0, c1
    mov o0.xy, v1
    mov o1.zw, v0

// approximately 4 instruction slots used
#endif

const BYTE pBinary_VVatc[] =
{
      0,   3, 254, 255, 254, 255, 
     32,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  75,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     68,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  52,   0, 
      0,   0,   0,   0,   0,   0, 
    109, 118, 112,   0,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      2,   0,   0,   0,   0,   0, 
      0,   0, 118, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      0,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,  15, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 224,  31,   0, 
      0,   2,   0,   0,   0, 128, 
      1,   0,  15, 224,   9,   0, 
      0,   3,   1,   0,   1, 224, 
      0,   0, 228, 144,   0,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   2, 224,   0,   0, 
    228, 144,   1,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
      3, 224,   1,   0, 228, 144, 
      1,   0,   0,   2,   1,   0, 
     12, 224,   0,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FBox1Blur.hlsl.h /Vn
//    pBinary_FBox1Blur D3D9/FBox1Blur.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 fsize;
//   sampler2D tex;
//   float2 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   fsize        c2       1
//   texscale     c3       1
//   tex          s0       1
//

    ps_3_0
    def c4, 0, 0, 1, 0
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    mov r0.zw, c4.x
    mov r1, c4.x
    mov r2.x, -c2.x
    rep i0
      break_lt c2.x, r2.x
      mad_pp r0.xy, r2.x, c3, v0
      texldl_pp r3, r0, s0
      add r1, r1, r3
      add r2.x, r2.x, c4.z
    endrep
    mul r0, r1, c2.w
    mul r0.xyz, r0, c1
    mul r1, r0.w, c0
    mad oC0, r0, c1.w, r1

// approximately 20 instruction slots used (2 texture, 18 arithmetic)
#endif

const BYTE pBinary_FBox1Blur[] =
{
      0,   3, 255, 255, 254, 255, 
     68,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 219,   0, 
      0,   0,   0,   3, 255, 255, 
      5,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    212,   0,   0,   0, 128,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 136,   0, 
      0,   0,   0,   0,   0,   0, 
    152,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    136,   0,   0,   0,   0,   0, 
      0,   0, 158,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 136,   0,   0,   0, 
      0,   0,   0,   0, 164,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0, 168,   0, 
      0,   0,   0,   0,   0,   0, 
    184,   0,   0,   0,   2,   0, 
      3,   0,   1,   0,  14,   0, 
    196,   0,   0,   0,   0,   0, 
      0,   0,  99, 120,  97, 100, 
    100,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,  99, 120, 109, 117, 
    108,   0, 102, 115, 105, 122, 
    101,   0, 116, 101, 120,   0, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 115,  99,  97, 108, 101, 
      0, 171, 171, 171,   1,   0, 
      3,   0,   1,   0,   2,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  81,   0, 
      0,   5,   4,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0, 128,  63, 
      0,   0,   0,   0,  48,   0, 
      0,   5,   0,   0,  15, 240, 
    255,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,   1,   0, 
      0,   2,   0,   0,  12, 128, 
      4,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,  15, 128, 
      4,   0,   0, 160,   1,   0, 
      0,   2,   2,   0,   1, 128, 
      2,   0,   0, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   2,   0, 
      0, 160,   2,   0,   0, 128, 
      4,   0,   0,   4,   0,   0, 
     35, 128,   2,   0,   0, 128, 
      3,   0, 228, 160,   0,   0, 
    228, 144,  95,   0,   0,   3, 
      3,   0,  47, 128,   0,   0, 
    228, 128,   0,   8, 228, 160, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   1,   0, 228, 128, 
      3,   0, 228, 128,   2,   0, 
      0,   3,   2,   0,   1, 128, 
      2,   0,   0, 128,   4,   0, 
    170, 160,  39,   0,   0,   0, 
      5,   0,   0,   3,   0,   0, 
     15, 128,   1,   0, 228, 128, 
      2,   0, 255, 160,   5,   0, 
      0,   3,   0,   0,   7, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 160,   5,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    255, 128,   0,   0, 228, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 255, 160,   1,   0, 
    228, 128, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FBox1BlurMul.hlsl.h /Vn
//    pBinary_FBox1BlurMul D3D9/FBox1BlurMul.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 fsize;
//   sampler2D tex;
//   float2 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   fsize        c2       1
//   texscale     c3       1
//   tex          s0       1
//

    ps_3_0
    def c4, 0, 0, 1, -1
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    mov r0.zw, c4.x
    mov r1, c4.x
    mov r2.x, -c2.x
    rep i0
      break_lt c2.x, r2.x
      mad_pp r0.xy, r2.x, c3, v0
      texldl_pp r3, r0, s0
      add r1, r1, r3
      add r2.x, r2.x, c4.z
    endrep
    mul r0, r1, c2.w
    mul r0.xyz, r0, c1
    mul r1, r0.w, c0
    mad r0, r0, c1.w, r1
    add r1, r0, c4.w
    mad oC0, r0.w, r1, c4.z

// approximately 22 instruction slots used (2 texture, 20 arithmetic)
#endif

const BYTE pBinary_FBox1BlurMul[] =
{
      0,   3, 255, 255, 254, 255, 
     68,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 219,   0, 
      0,   0,   0,   3, 255, 255, 
      5,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    212,   0,   0,   0, 128,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 136,   0, 
      0,   0,   0,   0,   0,   0, 
    152,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    136,   0,   0,   0,   0,   0, 
      0,   0, 158,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 136,   0,   0,   0, 
      0,   0,   0,   0, 164,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0, 168,   0, 
      0,   0,   0,   0,   0,   0, 
    184,   0,   0,   0,   2,   0, 
      3,   0,   1,   0,  14,   0, 
    196,   0,   0,   0,   0,   0, 
      0,   0,  99, 120,  97, 100, 
    100,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,  99, 120, 109, 117, 
    108,   0, 102, 115, 105, 122, 
    101,   0, 116, 101, 120,   0, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 115,  99,  97, 108, 101, 
      0, 171, 171, 171,   1,   0, 
      3,   0,   1,   0,   2,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  81,   0, 
      0,   5,   4,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0, 128,  63, 
      0,   0, 128, 191,  48,   0, 
      0,   5,   0,   0,  15, 240, 
    255,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,   1,   0, 
      0,   2,   0,   0,  12, 128, 
      4,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,  15, 128, 
      4,   0,   0, 160,   1,   0, 
      0,   2,   2,   0,   1, 128, 
      2,   0,   0, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   2,   0, 
      0, 160,   2,   0,   0, 128, 
      4,   0,   0,   4,   0,   0, 
     35, 128,   2,   0,   0, 128, 
      3,   0, 228, 160,   0,   0, 
    228, 144,  95,   0,   0,   3, 
      3,   0,  47, 128,   0,   0, 
    228, 128,   0,   8, 228, 160, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   1,   0, 228, 128, 
      3,   0, 228, 128,   2,   0, 
      0,   3,   2,   0,   1, 128, 
      2,   0,   0, 128,   4,   0, 
    170, 160,  39,   0,   0,   0, 
      5,   0,   0,   3,   0,   0, 
     15, 128,   1,   0, 228, 128, 
      2,   0, 255, 160,   5,   0, 
      0,   3,   0,   0,   7, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 160,   5,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    255, 128,   0,   0, 228, 160, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 128, 
      1,   0, 255, 160,   1,   0, 
    228, 128,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   4,   0, 255, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   4,   0, 
    170, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FBox2Blur.hlsl.h /Vn
//    pBinary_FBox2Blur D3D9/FBox2Blur.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 fsize;
//   sampler2D tex;
//   float2 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   fsize        c2       1
//   texscale     c3       1
//   tex          s0       1
//

    ps_3_0
    def c4, 0, 0, 1, 0
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    mov r0.zw, c4.x
    mov r1, c4.x
    mov r2.x, -c2.x
    rep i0
      break_lt c2.x, r2.x
      mov r3.x, r2.x
      mov r4, r1
      mov r2.y, -c2.y
      rep i0
        break_lt c2.y, r2.y
        mov r3.y, r2.y
        mad_pp r0.xy, r3, c3, v0
        texldl_pp r5, r0, s0
        add r4, r4, r5
        add r2.y, r2.y, c4.z
      endrep
      mov r1, r4
      add r2.x, r2.x, c4.z
    endrep
    mul r0, r1, c2.w
    mul r0.xyz, r0, c1
    mul r1, r0.w, c0
    mad oC0, r0, c1.w, r1

// approximately 34 instruction slots used (2 texture, 32 arithmetic)
#endif

const BYTE pBinary_FBox2Blur[] =
{
      0,   3, 255, 255, 254, 255, 
     68,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 219,   0, 
      0,   0,   0,   3, 255, 255, 
      5,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    212,   0,   0,   0, 128,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 136,   0, 
      0,   0,   0,   0,   0,   0, 
    152,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    136,   0,   0,   0,   0,   0, 
      0,   0, 158,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 136,   0,   0,   0, 
      0,   0,   0,   0, 164,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0, 168,   0, 
      0,   0,   0,   0,   0,   0, 
    184,   0,   0,   0,   2,   0, 
      3,   0,   1,   0,  14,   0, 
    196,   0,   0,   0,   0,   0, 
      0,   0,  99, 120,  97, 100, 
    100,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,  99, 120, 109, 117, 
    108,   0, 102, 115, 105, 122, 
    101,   0, 116, 101, 120,   0, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 115,  99,  97, 108, 101, 
      0, 171, 171, 171,   1,   0, 
      3,   0,   1,   0,   2,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  81,   0, 
      0,   5,   4,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0, 128,  63, 
      0,   0,   0,   0,  48,   0, 
      0,   5,   0,   0,  15, 240, 
    255,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,   1,   0, 
      0,   2,   0,   0,  12, 128, 
      4,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,  15, 128, 
      4,   0,   0, 160,   1,   0, 
      0,   2,   2,   0,   1, 128, 
      2,   0,   0, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   2,   0, 
      0, 160,   2,   0,   0, 128, 
      1,   0,   0,   2,   3,   0, 
      1, 128,   2,   0,   0, 128, 
      1,   0,   0,   2,   4,   0, 
     15, 128,   1,   0, 228, 128, 
      1,   0,   0,   2,   2,   0, 
      2, 128,   2,   0,  85, 161, 
     38,   0,   0,   1,   0,   0, 
    228, 240,  45,   0,   4,   2, 
      2,   0,  85, 160,   2,   0, 
     85, 128,   1,   0,   0,   2, 
      3,   0,   2, 128,   2,   0, 
     85, 128,   4,   0,   0,   4, 
      0,   0,  35, 128,   3,   0, 
    228, 128,   3,   0, 228, 160, 
      0,   0, 228, 144,  95,   0, 
      0,   3,   5,   0,  47, 128, 
      0,   0, 228, 128,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      4,   0,  15, 128,   4,   0, 
    228, 128,   5,   0, 228, 128, 
      2,   0,   0,   3,   2,   0, 
      2, 128,   2,   0,  85, 128, 
      4,   0, 170, 160,  39,   0, 
      0,   0,   1,   0,   0,   2, 
      1,   0,  15, 128,   4,   0, 
    228, 128,   2,   0,   0,   3, 
      2,   0,   1, 128,   2,   0, 
      0, 128,   4,   0, 170, 160, 
     39,   0,   0,   0,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 228, 128,   2,   0, 
    255, 160,   5,   0,   0,   3, 
      0,   0,   7, 128,   0,   0, 
    228, 128,   1,   0, 228, 160, 
      5,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 255, 128, 
      0,   0, 228, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    255, 160,   1,   0, 228, 128, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FBox2BlurMul.hlsl.h /Vn
//    pBinary_FBox2BlurMul D3D9/FBox2BlurMul.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   float4 fsize;
//   sampler2D tex;
//   float2 texscale;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   fsize        c2       1
//   texscale     c3       1
//   tex          s0       1
//

    ps_3_0
    def c4, 0, 0, 1, -1
    defi i0, 255, 0, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    mov r0.zw, c4.x
    mov r1, c4.x
    mov r2.x, -c2.x
    rep i0
      break_lt c2.x, r2.x
      mov r3.x, r2.x
      mov r4, r1
      mov r2.y, -c2.y
      rep i0
        break_lt c2.y, r2.y
        mov r3.y, r2.y
        mad_pp r0.xy, r3, c3, v0
        texldl_pp r5, r0, s0
        add r4, r4, r5
        add r2.y, r2.y, c4.z
      endrep
      mov r1, r4
      add r2.x, r2.x, c4.z
    endrep
    mul r0, r1, c2.w
    mul r0.xyz, r0, c1
    mul r1, r0.w, c0
    mad r0, r0, c1.w, r1
    add r1, r0, c4.w
    mad oC0, r0.w, r1, c4.z

// approximately 36 instruction slots used (2 texture, 34 arithmetic)
#endif

const BYTE pBinary_FBox2BlurMul[] =
{
      0,   3, 255, 255, 254, 255, 
     68,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 219,   0, 
      0,   0,   0,   3, 255, 255, 
      5,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    212,   0,   0,   0, 128,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 136,   0, 
      0,   0,   0,   0,   0,   0, 
    152,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    136,   0,   0,   0,   0,   0, 
      0,   0, 158,   0,   0,   0, 
      2,   0,   2,   0,   1,   0, 
     10,   0, 136,   0,   0,   0, 
      0,   0,   0,   0, 164,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0, 168,   0, 
      0,   0,   0,   0,   0,   0, 
    184,   0,   0,   0,   2,   0, 
      3,   0,   1,   0,  14,   0, 
    196,   0,   0,   0,   0,   0, 
      0,   0,  99, 120,  97, 100, 
    100,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,  99, 120, 109, 117, 
    108,   0, 102, 115, 105, 122, 
    101,   0, 116, 101, 120,   0, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 115,  99,  97, 108, 101, 
      0, 171, 171, 171,   1,   0, 
      3,   0,   1,   0,   2,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  81,   0, 
      0,   5,   4,   0,  15, 160, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0, 128,  63, 
      0,   0, 128, 191,  48,   0, 
      0,   5,   0,   0,  15, 240, 
    255,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,   1,   0, 
      0,   2,   0,   0,  12, 128, 
      4,   0,   0, 160,   1,   0, 
      0,   2,   1,   0,  15, 128, 
      4,   0,   0, 160,   1,   0, 
      0,   2,   2,   0,   1, 128, 
      2,   0,   0, 161,  38,   0, 
      0,   1,   0,   0, 228, 240, 
     45,   0,   4,   2,   2,   0, 
      0, 160,   2,   0,   0, 128, 
      1,   0,   0,   2,   3,   0, 
      1, 128,   2,   0,   0, 128, 
      1,   0,   0,   2,   4,   0, 
     15, 128,   1,   0, 228, 128, 
      1,   0,   0,   2,   2,   0, 
      2, 128,   2,   0,  85, 161, 
     38,   0,   0,   1,   0,   0, 
    228, 240,  45,   0,   4,   2, 
      2,   0,  85, 160,   2,   0, 
     85, 128,   1,   0,   0,   2, 
      3,   0,   2, 128,   2,   0, 
     85, 128,   4,   0,   0,   4, 
      0,   0,  35, 128,   3,   0, 
    228, 128,   3,   0, 228, 160, 
      0,   0, 228, 144,  95,   0, 
      0,   3,   5,   0,  47, 128, 
      0,   0, 228, 128,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      4,   0,  15, 128,   4,   0, 
    228, 128,   5,   0, 228, 128, 
      2,   0,   0,   3,   2,   0, 
      2, 128,   2,   0,  85, 128, 
      4,   0, 170, 160,  39,   0, 
      0,   0,   1,   0,   0,   2, 
      1,   0,  15, 128,   4,   0, 
    228, 128,   2,   0,   0,   3, 
      2,   0,   1, 128,   2,   0, 
      0, 128,   4,   0, 170, 160, 
     39,   0,   0,   0,   5,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 228, 128,   2,   0, 
    255, 160,   5,   0,   0,   3, 
      0,   0,   7, 128,   0,   0, 
    228, 128,   1,   0, 228, 160, 
      5,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 255, 128, 
      0,   0, 228, 160,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    255, 160,   1,   0, 228, 128, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      4,   0, 255, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   4,   0, 170, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VBox1.hlsl.h /Vn pBinary_VBox1
//    D3D9/VBox1.hlsl
//
//
// Parameters:
//
//   float4 mvp[2];
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//   texgen       c2       2
//

    vs_3_0
    dcl_position v0
    dcl_texcoord o0.xy
    dcl_position o1
    dp4 o0.x, v0, c2
    dp4 o0.y, v0, c3
    dp4 o1.x, v0, c0
    dp4 o1.y, v0, c1
    mov o1.zw, v0

// approximately 5 instruction slots used
#endif

const BYTE pBinary_VBox1[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      2,   0,   2,   0,  10,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      9,   0,   0,   3,   0,   0, 
      1, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   0,   0,   2, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   1, 224,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      2, 224,   0,   0, 228, 144, 
      1,   0, 228, 160,   1,   0, 
      0,   2,   1,   0,  12, 224, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGCMatrixAc.hlsl.h /Vn
//    pBinary_FTexTGCMatrixAc D3D9/FTexTGCMatrixAc.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4x4 cxmul;
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       4
//   tex0         s0       1
//

    ps_3_0
    dcl_texcoord v0.xy
    dcl_2d s0
    texld r0, v0, s0
    dp4 r1.x, r0, c1
    dp4 r1.y, r0, c2
    dp4 r1.z, r0, c3
    dp4 r1.w, r0, c4
    add r0.x, r0.w, c0.w
    mad oC0, c0, r0.x, r1

// approximately 7 instruction slots used (1 texture, 6 arithmetic)
#endif

const BYTE pBinary_FTexTGCMatrixAc[] =
{
      0,   3, 255, 255, 254, 255, 
     55,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 167,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    160,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   2,   0, 
      1,   0,   4,   0,   6,   0, 
    120,   0,   0,   0,   0,   0, 
      0,   0, 136,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 144,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 171, 171, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  48,   0, 171, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   0,   8,  15, 160, 
     66,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 144, 
      0,   8, 228, 160,   9,   0, 
      0,   3,   1,   0,   1, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   2, 128,   0,   0, 
    228, 128,   2,   0, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      4, 128,   0,   0, 228, 128, 
      3,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   8, 128, 
      0,   0, 228, 128,   4,   0, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
    255, 128,   0,   0, 255, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 228, 160, 
      0,   0,   0, 128,   1,   0, 
    228, 128, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FTexTGCMatrixAcMul.hlsl.h /Vn
//    pBinary_FTexTGCMatrixAcMul D3D9/FTexTGCMatrixAcMul.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4x4 cxmul;
//   sampler2D tex0;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       4
//   tex0         s0       1
//

    ps_3_0
    def c5, -1, 1, 0, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    texld r0, v0, s0
    dp4 r1.x, r0, c1
    dp4 r1.y, r0, c2
    dp4 r1.z, r0, c3
    dp4 r1.w, r0, c4
    add r0.x, r0.w, c0.w
    mad r0, c0, r0.x, r1
    add r1, r0, c5.x
    mad oC0, r0.w, r1, c5.y

// approximately 9 instruction slots used (1 texture, 8 arithmetic)
#endif

const BYTE pBinary_FTexTGCMatrixAcMul[] =
{
      0,   3, 255, 255, 254, 255, 
     55,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 167,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    160,   0,   0,   0,  88,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   2,   0, 
      1,   0,   4,   0,   6,   0, 
    120,   0,   0,   0,   0,   0, 
      0,   0, 136,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 144,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 171, 171, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  48,   0, 171, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,   5,   0, 
     15, 160,   0,   0, 128, 191, 
      0,   0, 128,  63,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   0,   8,  15, 160, 
     66,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 144, 
      0,   8, 228, 160,   9,   0, 
      0,   3,   1,   0,   1, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   2, 128,   0,   0, 
    228, 128,   2,   0, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      4, 128,   0,   0, 228, 128, 
      3,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   8, 128, 
      0,   0, 228, 128,   4,   0, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   1, 128,   0,   0, 
    255, 128,   0,   0, 255, 160, 
      4,   0,   0,   4,   0,   0, 
     15, 128,   0,   0, 228, 160, 
      0,   0,   0, 128,   1,   0, 
    228, 128,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   5,   0,   0, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   5,   0, 
     85, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUV.hlsl.h /Vn pBinary_FYUV
//    D3D9/FYUV.hlsl
//
//
// Parameters:
//
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex_u        s0       1
//   tex_v        s1       1
//   tex_y        s2       1
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, 1
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    texld r0, v0, s1
    add_pp r0.x, r0.w, c0.y
    mul_pp r0.xyz, r0.x, c1
    texld r1, v0, s2
    add r0.w, r1.w, c0.x
    mad_pp r0.xyz, r0.w, c0.z, r0
    texld r1, v0, s0
    add_pp r0.w, r1.w, c0.y
    mad_pp oC0.xyz, r0.w, c2, r0
    mov_pp oC0.w, c0.w

// approximately 10 instruction slots used (3 texture, 7 arithmetic)
#endif

const BYTE pBinary_FYUV[] =
{
      0,   3, 255, 255, 254, 255, 
     55,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 167,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    160,   0,   0,   0,  88,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    120,   0,   0,   0,   0,   0, 
      0,   0, 136,   0,   0,   0, 
      3,   0,   2,   0,   1,   0, 
     10,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 117,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 118,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 121,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,   0,   0, 
     15, 160, 129, 128, 128, 189, 
    129, 128,   0, 191, 244, 253, 
    148,  63,   0,   0, 128,  63, 
     81,   0,   0,   5,   1,   0, 
     15, 160, 186,  73, 204,  63, 
    197,  32,  80, 191,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     81,   0,   0,   5,   2,   0, 
     15, 160,   0,   0,   0,   0, 
     57, 180, 200, 190, 135,  22, 
      1,  64,   0,   0,   0,   0, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   0,   8,  15, 160, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   1,   8,  15, 160, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   2,   8,  15, 160, 
     66,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 144, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,  33, 128, 
      0,   0, 255, 128,   0,   0, 
     85, 160,   5,   0,   0,   3, 
      0,   0,  39, 128,   0,   0, 
      0, 128,   1,   0, 228, 160, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 144, 
      2,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,   8, 128, 
      1,   0, 255, 128,   0,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   0,  39, 128,   0,   0, 
    255, 128,   0,   0, 170, 160, 
      0,   0, 228, 128,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  40, 128,   1,   0, 
    255, 128,   0,   0,  85, 160, 
      4,   0,   0,   4,   0,   8, 
     39, 128,   0,   0, 255, 128, 
      2,   0, 228, 160,   0,   0, 
    228, 128,   1,   0,   0,   2, 
      0,   8,  40, 128,   0,   0, 
    255, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVBatch.hlsl.h /Vn
//    pBinary_FYUVBatch D3D9/FYUVBatch.hlsl
//
//
// Parameters:
//
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex_u        s0       1
//   tex_v        s1       1
//   tex_y        s2       1
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, 1
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    texld r0, v0, s1
    add_pp r0.x, r0.w, c0.y
    mul_pp r0.xyz, r0.x, c1
    texld r1, v0, s2
    add r0.w, r1.w, c0.x
    mad_pp r0.xyz, r0.w, c0.z, r0
    texld r1, v0, s0
    add_pp r0.w, r1.w, c0.y
    mad_pp oC0.xyz, r0.w, c2, r0
    mov_pp oC0.w, c0.w

// approximately 10 instruction slots used (3 texture, 7 arithmetic)
#endif

const BYTE pBinary_FYUVBatch[] =
{
      0,   3, 255, 255, 254, 255, 
     55,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 167,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    160,   0,   0,   0,  88,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    120,   0,   0,   0,   0,   0, 
      0,   0, 136,   0,   0,   0, 
      3,   0,   2,   0,   1,   0, 
     10,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 117,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 118,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 121,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,   0,   0, 
     15, 160, 129, 128, 128, 189, 
    129, 128,   0, 191, 244, 253, 
    148,  63,   0,   0, 128,  63, 
     81,   0,   0,   5,   1,   0, 
     15, 160, 186,  73, 204,  63, 
    197,  32,  80, 191,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     81,   0,   0,   5,   2,   0, 
     15, 160,   0,   0,   0,   0, 
     57, 180, 200, 190, 135,  22, 
      1,  64,   0,   0,   0,   0, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   0,   8,  15, 160, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   1,   8,  15, 160, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   2,   8,  15, 160, 
     66,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 144, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,  33, 128, 
      0,   0, 255, 128,   0,   0, 
     85, 160,   5,   0,   0,   3, 
      0,   0,  39, 128,   0,   0, 
      0, 128,   1,   0, 228, 160, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 144, 
      2,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,   8, 128, 
      1,   0, 255, 128,   0,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   0,  39, 128,   0,   0, 
    255, 128,   0,   0, 170, 160, 
      0,   0, 228, 128,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  40, 128,   1,   0, 
    255, 128,   0,   0,  85, 160, 
      4,   0,   0,   4,   0,   8, 
     39, 128,   0,   0, 255, 128, 
      2,   0, 228, 160,   0,   0, 
    228, 128,   1,   0,   0,   2, 
      0,   8,  40, 128,   0,   0, 
    255, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVBatchCxform.hlsl.h /Vn
//    pBinary_FYUVBatchCxform D3D9/FYUVBatchCxform.hlsl
//
//
// Parameters:
//
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex_u        s0       1
//   tex_v        s1       1
//   tex_y        s2       1
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, 1
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_texcoord3 v0
    dcl_texcoord4 v1
    dcl_texcoord v2.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    texld r0, v2, s1
    add_pp r0.x, r0.w, c0.y
    mul_pp r0.xyz, r0.x, c1
    texld r1, v2, s2
    add r0.w, r1.w, c0.x
    mad_pp r0.xyz, r0.w, c0.z, r0
    texld r1, v2, s0
    add_pp r0.w, r1.w, c0.y
    mad_pp r0.xyz, r0.w, c2, r0
    mov_pp r0.w, c0.w
    mov r1, v1
    mad oC0, r0, r1, v0

// approximately 12 instruction slots used (3 texture, 9 arithmetic)
#endif

const BYTE pBinary_FYUVBatchCxform[] =
{
      0,   3, 255, 255, 254, 255, 
     55,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 167,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    160,   0,   0,   0,  88,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    120,   0,   0,   0,   0,   0, 
      0,   0, 136,   0,   0,   0, 
      3,   0,   2,   0,   1,   0, 
     10,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 117,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 118,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 121,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,   0,   0, 
     15, 160, 129, 128, 128, 189, 
    129, 128,   0, 191, 244, 253, 
    148,  63,   0,   0, 128,  63, 
     81,   0,   0,   5,   1,   0, 
     15, 160, 186,  73, 204,  63, 
    197,  32,  80, 191,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     81,   0,   0,   5,   2,   0, 
     15, 160,   0,   0,   0,   0, 
     57, 180, 200, 190, 135,  22, 
      1,  64,   0,   0,   0,   0, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,   3, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   0,   8,  15, 160, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   1,   8,  15, 160, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   2,   8,  15, 160, 
     66,   0,   0,   3,   0,   0, 
     15, 128,   2,   0, 228, 144, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,  33, 128, 
      0,   0, 255, 128,   0,   0, 
     85, 160,   5,   0,   0,   3, 
      0,   0,  39, 128,   0,   0, 
      0, 128,   1,   0, 228, 160, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   2,   0, 228, 144, 
      2,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,   8, 128, 
      1,   0, 255, 128,   0,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   0,  39, 128,   0,   0, 
    255, 128,   0,   0, 170, 160, 
      0,   0, 228, 128,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      2,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  40, 128,   1,   0, 
    255, 128,   0,   0,  85, 160, 
      4,   0,   0,   4,   0,   0, 
     39, 128,   0,   0, 255, 128, 
      2,   0, 228, 160,   0,   0, 
    228, 128,   1,   0,   0,   2, 
      0,   0,  40, 128,   0,   0, 
    255, 160,   1,   0,   0,   2, 
      1,   0,  15, 128,   1,   0, 
    228, 144,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVBatchCxformEAlpha.hlsl.h /Vn
//    pBinary_FYUVBatchCxformEAlpha D3D9/FYUVBatchCxformEAlpha.hlsl
//
//
// Parameters:
//
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex_u        s0       1
//   tex_v        s1       1
//   tex_y        s2       1
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, 1
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_color1 v0.w
    dcl_texcoord3 v1
    dcl_texcoord4 v2
    dcl_texcoord v3.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    texld r0, v3, s1
    add_pp r0.x, r0.w, c0.y
    mul_pp r0.xyz, r0.x, c1
    texld r1, v3, s2
    add r0.w, r1.w, c0.x
    mad_pp r0.xyz, r0.w, c0.z, r0
    texld r1, v3, s0
    add_pp r0.w, r1.w, c0.y
    mad_pp r0.xyz, r0.w, c2, r0
    mov_pp r0.w, c0.w
    mov r1, v2
    mad r0, r0, r1, v1
    mul oC0.w, r0.w, v0.w
    mov oC0.xyz, r0

// approximately 14 instruction slots used (3 texture, 11 arithmetic)
#endif

const BYTE pBinary_FYUVBatchCxformEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     55,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 167,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    160,   0,   0,   0,  88,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    120,   0,   0,   0,   0,   0, 
      0,   0, 136,   0,   0,   0, 
      3,   0,   2,   0,   1,   0, 
     10,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 117,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 118,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 121,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,   0,   0, 
     15, 160, 129, 128, 128, 189, 
    129, 128,   0, 191, 244, 253, 
    148,  63,   0,   0, 128,  63, 
     81,   0,   0,   5,   1,   0, 
     15, 160, 186,  73, 204,  63, 
    197,  32,  80, 191,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     81,   0,   0,   5,   2,   0, 
     15, 160,   0,   0,   0,   0, 
     57, 180, 200, 190, 135,  22, 
      1,  64,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,   8, 144, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   3,   0,   3, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   0,   8,  15, 160, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   1,   8,  15, 160, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   2,   8,  15, 160, 
     66,   0,   0,   3,   0,   0, 
     15, 128,   3,   0, 228, 144, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,  33, 128, 
      0,   0, 255, 128,   0,   0, 
     85, 160,   5,   0,   0,   3, 
      0,   0,  39, 128,   0,   0, 
      0, 128,   1,   0, 228, 160, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   3,   0, 228, 144, 
      2,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,   8, 128, 
      1,   0, 255, 128,   0,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   0,  39, 128,   0,   0, 
    255, 128,   0,   0, 170, 160, 
      0,   0, 228, 128,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      3,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  40, 128,   1,   0, 
    255, 128,   0,   0,  85, 160, 
      4,   0,   0,   4,   0,   0, 
     39, 128,   0,   0, 255, 128, 
      2,   0, 228, 160,   0,   0, 
    228, 128,   1,   0,   0,   2, 
      0,   0,  40, 128,   0,   0, 
    255, 160,   1,   0,   0,   2, 
      1,   0,  15, 128,   2,   0, 
    228, 144,   4,   0,   0,   4, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      1,   0, 228, 144,   5,   0, 
      0,   3,   0,   8,   8, 128, 
      0,   0, 255, 128,   0,   0, 
    255, 144,   1,   0,   0,   2, 
      0,   8,   7, 128,   0,   0, 
    228, 128, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVBatchCxformEAlphaMul.hlsl.h /Vn
//    pBinary_FYUVBatchCxformEAlphaMul D3D9/FYUVBatchCxformEAlphaMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex_u        s0       1
//   tex_v        s1       1
//   tex_y        s2       1
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, 1
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_color1 v0.w
    dcl_texcoord3 v1
    dcl_texcoord4 v2
    dcl_texcoord v3.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    texld r0, v3, s1
    add_pp r0.x, r0.w, c0.y
    mul_pp r0.xyz, r0.x, c1
    texld r1, v3, s2
    add r0.w, r1.w, c0.x
    mad_pp r0.xyz, r0.w, c0.z, r0
    texld r1, v3, s0
    add_pp r0.w, r1.w, c0.y
    mad_pp r0.xyz, r0.w, c2, r0
    mov_pp r0.w, c0.w
    mov r1, v2
    mad r0, r0, r1, v1
    mul r0.w, r0.w, v0.w
    add r1, r0, -c0.w
    mad oC0, r0.w, r1, c0.w

// approximately 15 instruction slots used (3 texture, 12 arithmetic)
#endif

const BYTE pBinary_FYUVBatchCxformEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     55,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 167,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    160,   0,   0,   0,  88,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    120,   0,   0,   0,   0,   0, 
      0,   0, 136,   0,   0,   0, 
      3,   0,   2,   0,   1,   0, 
     10,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 117,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 118,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 121,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,   0,   0, 
     15, 160, 129, 128, 128, 189, 
    129, 128,   0, 191, 244, 253, 
    148,  63,   0,   0, 128,  63, 
     81,   0,   0,   5,   1,   0, 
     15, 160, 186,  73, 204,  63, 
    197,  32,  80, 191,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     81,   0,   0,   5,   2,   0, 
     15, 160,   0,   0,   0,   0, 
     57, 180, 200, 190, 135,  22, 
      1,  64,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,   8, 144, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   2,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   3,   0,   3, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   0,   8,  15, 160, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   1,   8,  15, 160, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   2,   8,  15, 160, 
     66,   0,   0,   3,   0,   0, 
     15, 128,   3,   0, 228, 144, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,  33, 128, 
      0,   0, 255, 128,   0,   0, 
     85, 160,   5,   0,   0,   3, 
      0,   0,  39, 128,   0,   0, 
      0, 128,   1,   0, 228, 160, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   3,   0, 228, 144, 
      2,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,   8, 128, 
      1,   0, 255, 128,   0,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   0,  39, 128,   0,   0, 
    255, 128,   0,   0, 170, 160, 
      0,   0, 228, 128,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      3,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  40, 128,   1,   0, 
    255, 128,   0,   0,  85, 160, 
      4,   0,   0,   4,   0,   0, 
     39, 128,   0,   0, 255, 128, 
      2,   0, 228, 160,   0,   0, 
    228, 128,   1,   0,   0,   2, 
      0,   0,  40, 128,   0,   0, 
    255, 160,   1,   0,   0,   2, 
      1,   0,  15, 128,   2,   0, 
    228, 144,   4,   0,   0,   4, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      1,   0, 228, 144,   5,   0, 
      0,   3,   0,   0,   8, 128, 
      0,   0, 255, 128,   0,   0, 
    255, 144,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   0,   0, 255, 161, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   0,   0, 
    255, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVBatchCxformMul.hlsl.h /Vn
//    pBinary_FYUVBatchCxformMul D3D9/FYUVBatchCxformMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex_u        s0       1
//   tex_v        s1       1
//   tex_y        s2       1
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, 1
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_texcoord3 v0
    dcl_texcoord4 v1
    dcl_texcoord v2.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    texld r0, v2, s1
    add_pp r0.x, r0.w, c0.y
    mul_pp r0.xyz, r0.x, c1
    texld r1, v2, s2
    add r0.w, r1.w, c0.x
    mad_pp r0.xyz, r0.w, c0.z, r0
    texld r1, v2, s0
    add_pp r0.w, r1.w, c0.y
    mad_pp r0.xyz, r0.w, c2, r0
    mov_pp r0.w, c0.w
    mov r1, v1
    mad r0, r0, r1, v0
    add r1, r0, -c0.w
    mad oC0, r0.w, r1, c0.w

// approximately 14 instruction slots used (3 texture, 11 arithmetic)
#endif

const BYTE pBinary_FYUVBatchCxformMul[] =
{
      0,   3, 255, 255, 254, 255, 
     55,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 167,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    160,   0,   0,   0,  88,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    120,   0,   0,   0,   0,   0, 
      0,   0, 136,   0,   0,   0, 
      3,   0,   2,   0,   1,   0, 
     10,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 117,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 118,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 121,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,   0,   0, 
     15, 160, 129, 128, 128, 189, 
    129, 128,   0, 191, 244, 253, 
    148,  63,   0,   0, 128,  63, 
     81,   0,   0,   5,   1,   0, 
     15, 160, 186,  73, 204,  63, 
    197,  32,  80, 191,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     81,   0,   0,   5,   2,   0, 
     15, 160,   0,   0,   0,   0, 
     57, 180, 200, 190, 135,  22, 
      1,  64,   0,   0,   0,   0, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,   3, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   0,   8,  15, 160, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   1,   8,  15, 160, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   2,   8,  15, 160, 
     66,   0,   0,   3,   0,   0, 
     15, 128,   2,   0, 228, 144, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,  33, 128, 
      0,   0, 255, 128,   0,   0, 
     85, 160,   5,   0,   0,   3, 
      0,   0,  39, 128,   0,   0, 
      0, 128,   1,   0, 228, 160, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   2,   0, 228, 144, 
      2,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,   8, 128, 
      1,   0, 255, 128,   0,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   0,  39, 128,   0,   0, 
    255, 128,   0,   0, 170, 160, 
      0,   0, 228, 128,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      2,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  40, 128,   1,   0, 
    255, 128,   0,   0,  85, 160, 
      4,   0,   0,   4,   0,   0, 
     39, 128,   0,   0, 255, 128, 
      2,   0, 228, 160,   0,   0, 
    228, 128,   1,   0,   0,   2, 
      0,   0,  40, 128,   0,   0, 
    255, 160,   1,   0,   0,   2, 
      1,   0,  15, 128,   1,   0, 
    228, 144,   4,   0,   0,   4, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      0,   0, 228, 144,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   0,   0, 
    255, 161,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      0,   0, 255, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVBatchEAlpha.hlsl.h /Vn
//    pBinary_FYUVBatchEAlpha D3D9/FYUVBatchEAlpha.hlsl
//
//
// Parameters:
//
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex_u        s0       1
//   tex_v        s1       1
//   tex_y        s2       1
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, 0
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_color1 v0.w
    dcl_texcoord v1.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    texld r0, v1, s1
    add_pp r0.x, r0.w, c0.y
    mul_pp r0.xyz, r0.x, c1
    texld r1, v1, s2
    add r0.w, r1.w, c0.x
    mad_pp r0.xyz, r0.w, c0.z, r0
    texld r1, v1, s0
    add_pp r0.w, r1.w, c0.y
    mad_pp oC0.xyz, r0.w, c2, r0
    mov oC0.w, v0.w

// approximately 10 instruction slots used (3 texture, 7 arithmetic)
#endif

const BYTE pBinary_FYUVBatchEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     55,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 167,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    160,   0,   0,   0,  88,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    120,   0,   0,   0,   0,   0, 
      0,   0, 136,   0,   0,   0, 
      3,   0,   2,   0,   1,   0, 
     10,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 117,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 118,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 121,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,   0,   0, 
     15, 160, 129, 128, 128, 189, 
    129, 128,   0, 191, 244, 253, 
    148,  63,   0,   0,   0,   0, 
     81,   0,   0,   5,   1,   0, 
     15, 160, 186,  73, 204,  63, 
    197,  32,  80, 191,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     81,   0,   0,   5,   2,   0, 
     15, 160,   0,   0,   0,   0, 
     57, 180, 200, 190, 135,  22, 
      1,  64,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,   8, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   0,   8,  15, 160, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   1,   8,  15, 160, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   2,   8,  15, 160, 
     66,   0,   0,   3,   0,   0, 
     15, 128,   1,   0, 228, 144, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,  33, 128, 
      0,   0, 255, 128,   0,   0, 
     85, 160,   5,   0,   0,   3, 
      0,   0,  39, 128,   0,   0, 
      0, 128,   1,   0, 228, 160, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   1,   0, 228, 144, 
      2,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,   8, 128, 
      1,   0, 255, 128,   0,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   0,  39, 128,   0,   0, 
    255, 128,   0,   0, 170, 160, 
      0,   0, 228, 128,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      1,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  40, 128,   1,   0, 
    255, 128,   0,   0,  85, 160, 
      4,   0,   0,   4,   0,   8, 
     39, 128,   0,   0, 255, 128, 
      2,   0, 228, 160,   0,   0, 
    228, 128,   1,   0,   0,   2, 
      0,   8,   8, 128,   0,   0, 
    255, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVBatchEAlphaMul.hlsl.h /Vn
//    pBinary_FYUVBatchEAlphaMul D3D9/FYUVBatchEAlphaMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex_u        s0       1
//   tex_v        s1       1
//   tex_y        s2       1
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, -1
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_color1 v0.w
    dcl_texcoord v1.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    texld r0, v1, s1
    add_pp r0.x, r0.w, c0.y
    mul_pp r0.xyz, r0.x, c1
    texld r1, v1, s2
    add r0.w, r1.w, c0.x
    mad_pp r0.xyz, r0.w, c0.z, r0
    texld r1, v1, s0
    add_pp r0.w, r1.w, c0.y
    mad_pp r0.xyz, r0.w, c2, r0
    mov r0.w, v0.w
    add r0, r0, c0.w
    mad oC0, v0.w, r0, -c0.w

// approximately 12 instruction slots used (3 texture, 9 arithmetic)
#endif

const BYTE pBinary_FYUVBatchEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     55,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 167,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    160,   0,   0,   0,  88,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    120,   0,   0,   0,   0,   0, 
      0,   0, 136,   0,   0,   0, 
      3,   0,   2,   0,   1,   0, 
     10,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 117,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 118,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 121,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,   0,   0, 
     15, 160, 129, 128, 128, 189, 
    129, 128,   0, 191, 244, 253, 
    148,  63,   0,   0, 128, 191, 
     81,   0,   0,   5,   1,   0, 
     15, 160, 186,  73, 204,  63, 
    197,  32,  80, 191,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     81,   0,   0,   5,   2,   0, 
     15, 160,   0,   0,   0,   0, 
     57, 180, 200, 190, 135,  22, 
      1,  64,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,   8, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   0,   8,  15, 160, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   1,   8,  15, 160, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   2,   8,  15, 160, 
     66,   0,   0,   3,   0,   0, 
     15, 128,   1,   0, 228, 144, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,  33, 128, 
      0,   0, 255, 128,   0,   0, 
     85, 160,   5,   0,   0,   3, 
      0,   0,  39, 128,   0,   0, 
      0, 128,   1,   0, 228, 160, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   1,   0, 228, 144, 
      2,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,   8, 128, 
      1,   0, 255, 128,   0,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   0,  39, 128,   0,   0, 
    255, 128,   0,   0, 170, 160, 
      0,   0, 228, 128,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      1,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  40, 128,   1,   0, 
    255, 128,   0,   0,  85, 160, 
      4,   0,   0,   4,   0,   0, 
     39, 128,   0,   0, 255, 128, 
      2,   0, 228, 160,   0,   0, 
    228, 128,   1,   0,   0,   2, 
      0,   0,   8, 128,   0,   0, 
    255, 144,   2,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   0,   0, 255, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 144, 
      0,   0, 228, 128,   0,   0, 
    255, 161, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVBatchMul.hlsl.h /Vn
//    pBinary_FYUVBatchMul D3D9/FYUVBatchMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex_u        s0       1
//   tex_v        s1       1
//   tex_y        s2       1
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, 1
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    texld r0, v0, s1
    add_pp r0.x, r0.w, c0.y
    mul_pp r0.xyz, r0.x, c1
    texld r1, v0, s2
    add r0.w, r1.w, c0.x
    mad_pp r0.xyz, r0.w, c0.z, r0
    texld r1, v0, s0
    add_pp r0.w, r1.w, c0.y
    mad oC0.xyz, r0.w, c2, r0
    mov_pp oC0.w, c0.w

// approximately 10 instruction slots used (3 texture, 7 arithmetic)
#endif

const BYTE pBinary_FYUVBatchMul[] =
{
      0,   3, 255, 255, 254, 255, 
     55,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 167,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    160,   0,   0,   0,  88,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    120,   0,   0,   0,   0,   0, 
      0,   0, 136,   0,   0,   0, 
      3,   0,   2,   0,   1,   0, 
     10,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 117,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 118,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 121,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,   0,   0, 
     15, 160, 129, 128, 128, 189, 
    129, 128,   0, 191, 244, 253, 
    148,  63,   0,   0, 128,  63, 
     81,   0,   0,   5,   1,   0, 
     15, 160, 186,  73, 204,  63, 
    197,  32,  80, 191,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     81,   0,   0,   5,   2,   0, 
     15, 160,   0,   0,   0,   0, 
     57, 180, 200, 190, 135,  22, 
      1,  64,   0,   0,   0,   0, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   0,   8,  15, 160, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   1,   8,  15, 160, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   2,   8,  15, 160, 
     66,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 144, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,  33, 128, 
      0,   0, 255, 128,   0,   0, 
     85, 160,   5,   0,   0,   3, 
      0,   0,  39, 128,   0,   0, 
      0, 128,   1,   0, 228, 160, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 144, 
      2,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,   8, 128, 
      1,   0, 255, 128,   0,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   0,  39, 128,   0,   0, 
    255, 128,   0,   0, 170, 160, 
      0,   0, 228, 128,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  40, 128,   1,   0, 
    255, 128,   0,   0,  85, 160, 
      4,   0,   0,   4,   0,   8, 
      7, 128,   0,   0, 255, 128, 
      2,   0, 228, 160,   0,   0, 
    228, 128,   1,   0,   0,   2, 
      0,   8,  40, 128,   0,   0, 
    255, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVBatchYUVA.hlsl.h /Vn
//    pBinary_FYUVBatchYUVA D3D9/FYUVBatchYUVA.hlsl
//
//
// Parameters:
//
//   sampler2D tex_a;
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex_a        s0       1
//   tex_u        s1       1
//   tex_v        s2       1
//   tex_y        s3       1
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, 0
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    texld r0, v0, s2
    add_pp r0.x, r0.w, c0.y
    mul_pp r0.xyz, r0.x, c1
    texld r1, v0, s3
    add r0.w, r1.w, c0.x
    mad_pp r0.xyz, r0.w, c0.z, r0
    texld r1, v0, s1
    add_pp r0.w, r1.w, c0.y
    mad_pp oC0.xyz, r0.w, c2, r0
    texld r0, v0, s0
    mov oC0.w, r0.w

// approximately 11 instruction slots used (4 texture, 7 arithmetic)
#endif

const BYTE pBinary_FYUVBatchYUVA[] =
{
      0,   3, 255, 255, 254, 255, 
     66,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 211,   0, 
      0,   0,   0,   3, 255, 255, 
      4,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    204,   0,   0,   0, 108,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0, 116,   0, 
      0,   0,   0,   0,   0,   0, 
    132,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    140,   0,   0,   0,   0,   0, 
      0,   0, 156,   0,   0,   0, 
      3,   0,   2,   0,   1,   0, 
     10,   0, 164,   0,   0,   0, 
      0,   0,   0,   0, 180,   0, 
      0,   0,   3,   0,   3,   0, 
      1,   0,  14,   0, 188,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95,  97,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 117,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 118,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 121,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      0,   0,  15, 160, 129, 128, 
    128, 189, 129, 128,   0, 191, 
    244, 253, 148,  63,   0,   0, 
      0,   0,  81,   0,   0,   5, 
      1,   0,  15, 160, 186,  73, 
    204,  63, 197,  32,  80, 191, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  81,   0,   0,   5, 
      2,   0,  15, 160,   0,   0, 
      0,   0,  57, 180, 200, 190, 
    135,  22,   1,  64,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   2,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   3,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 144,   2,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     33, 128,   0,   0, 255, 128, 
      0,   0,  85, 160,   5,   0, 
      0,   3,   0,   0,  39, 128, 
      0,   0,   0, 128,   1,   0, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 144,   3,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      0,   0,   0, 160,   4,   0, 
      0,   4,   0,   0,  39, 128, 
      0,   0, 255, 128,   0,   0, 
    170, 160,   0,   0, 228, 128, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 144, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,  40, 128, 
      1,   0, 255, 128,   0,   0, 
     85, 160,   4,   0,   0,   4, 
      0,   8,  39, 128,   0,   0, 
    255, 128,   2,   0, 228, 160, 
      0,   0, 228, 128,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 144,   0,   8, 
    228, 160,   1,   0,   0,   2, 
      0,   8,   8, 128,   0,   0, 
    255, 128, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVBatchYUVACxform.hlsl.h /Vn
//    pBinary_FYUVBatchYUVACxform D3D9/FYUVBatchYUVACxform.hlsl
//
//
// Parameters:
//
//   sampler2D tex_a;
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex_a        s0       1
//   tex_u        s1       1
//   tex_v        s2       1
//   tex_y        s3       1
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, 0
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_texcoord3 v0
    dcl_texcoord4 v1
    dcl_texcoord v2.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    texld r0, v2, s2
    add_pp r0.x, r0.w, c0.y
    mul_pp r0.xyz, r0.x, c1
    texld r1, v2, s3
    add r0.w, r1.w, c0.x
    mad_pp r0.xyz, r0.w, c0.z, r0
    texld r1, v2, s1
    add_pp r0.w, r1.w, c0.y
    mad_pp r0.xyz, r0.w, c2, r0
    texld r1, v2, s0
    mov r0.w, r1.w
    mov r1, v1
    mad oC0, r0, r1, v0

// approximately 13 instruction slots used (4 texture, 9 arithmetic)
#endif

const BYTE pBinary_FYUVBatchYUVACxform[] =
{
      0,   3, 255, 255, 254, 255, 
     66,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 211,   0, 
      0,   0,   0,   3, 255, 255, 
      4,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    204,   0,   0,   0, 108,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0, 116,   0, 
      0,   0,   0,   0,   0,   0, 
    132,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    140,   0,   0,   0,   0,   0, 
      0,   0, 156,   0,   0,   0, 
      3,   0,   2,   0,   1,   0, 
     10,   0, 164,   0,   0,   0, 
      0,   0,   0,   0, 180,   0, 
      0,   0,   3,   0,   3,   0, 
      1,   0,  14,   0, 188,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95,  97,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 117,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 118,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 121,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      0,   0,  15, 160, 129, 128, 
    128, 189, 129, 128,   0, 191, 
    244, 253, 148,  63,   0,   0, 
      0,   0,  81,   0,   0,   5, 
      1,   0,  15, 160, 186,  73, 
    204,  63, 197,  32,  80, 191, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  81,   0,   0,   5, 
      2,   0,  15, 160,   0,   0, 
      0,   0,  57, 180, 200, 190, 
    135,  22,   1,  64,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   3, 128,   0,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   4, 128,   1,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   2,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   2,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   3,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   2,   0, 
    228, 144,   2,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     33, 128,   0,   0, 255, 128, 
      0,   0,  85, 160,   5,   0, 
      0,   3,   0,   0,  39, 128, 
      0,   0,   0, 128,   1,   0, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   2,   0, 
    228, 144,   3,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      0,   0,   0, 160,   4,   0, 
      0,   4,   0,   0,  39, 128, 
      0,   0, 255, 128,   0,   0, 
    170, 160,   0,   0, 228, 128, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   2,   0, 228, 144, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,  40, 128, 
      1,   0, 255, 128,   0,   0, 
     85, 160,   4,   0,   0,   4, 
      0,   0,  39, 128,   0,   0, 
    255, 128,   2,   0, 228, 160, 
      0,   0, 228, 128,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      2,   0, 228, 144,   0,   8, 
    228, 160,   1,   0,   0,   2, 
      0,   0,   8, 128,   1,   0, 
    255, 128,   1,   0,   0,   2, 
      1,   0,  15, 128,   1,   0, 
    228, 144,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVBatchYUVACxformEAlpha.hlsl.h
//    /Vn pBinary_FYUVBatchYUVACxformEAlpha
//    D3D9/FYUVBatchYUVACxformEAlpha.hlsl
//
//
// Parameters:
//
//   sampler2D tex_a;
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex_a        s0       1
//   tex_u        s1       1
//   tex_v        s2       1
//   tex_y        s3       1
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, 0
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_color1 v0.w
    dcl_texcoord3 v1
    dcl_texcoord4 v2
    dcl_texcoord v3.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    texld r0, v3, s2
    add_pp r0.x, r0.w, c0.y
    mul_pp r0.xyz, r0.x, c1
    texld r1, v3, s3
    add r0.w, r1.w, c0.x
    mad_pp r0.xyz, r0.w, c0.z, r0
    texld r1, v3, s1
    add_pp r0.w, r1.w, c0.y
    mad_pp r0.xyz, r0.w, c2, r0
    texld r1, v3, s0
    mov r0.w, r1.w
    mov r1, v2
    mad r0, r0, r1, v1
    mul oC0.w, r0.w, v0.w
    mov oC0.xyz, r0

// approximately 15 instruction slots used (4 texture, 11 arithmetic)
#endif

const BYTE pBinary_FYUVBatchYUVACxformEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     66,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 211,   0, 
      0,   0,   0,   3, 255, 255, 
      4,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    204,   0,   0,   0, 108,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0, 116,   0, 
      0,   0,   0,   0,   0,   0, 
    132,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    140,   0,   0,   0,   0,   0, 
      0,   0, 156,   0,   0,   0, 
      3,   0,   2,   0,   1,   0, 
     10,   0, 164,   0,   0,   0, 
      0,   0,   0,   0, 180,   0, 
      0,   0,   3,   0,   3,   0, 
      1,   0,  14,   0, 188,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95,  97,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 117,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 118,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 121,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      0,   0,  15, 160, 129, 128, 
    128, 189, 129, 128,   0, 191, 
    244, 253, 148,  63,   0,   0, 
      0,   0,  81,   0,   0,   5, 
      1,   0,  15, 160, 186,  73, 
    204,  63, 197,  32,  80, 191, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  81,   0,   0,   5, 
      2,   0,  15, 160,   0,   0, 
      0,   0,  57, 180, 200, 190, 
    135,  22,   1,  64,   0,   0, 
      0,   0,  31,   0,   0,   2, 
     10,   0,   1, 128,   0,   0, 
      8, 144,  31,   0,   0,   2, 
      5,   0,   3, 128,   1,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   4, 128,   2,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   3,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   2,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   3,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   3,   0, 
    228, 144,   2,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     33, 128,   0,   0, 255, 128, 
      0,   0,  85, 160,   5,   0, 
      0,   3,   0,   0,  39, 128, 
      0,   0,   0, 128,   1,   0, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   3,   0, 
    228, 144,   3,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      0,   0,   0, 160,   4,   0, 
      0,   4,   0,   0,  39, 128, 
      0,   0, 255, 128,   0,   0, 
    170, 160,   0,   0, 228, 128, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   3,   0, 228, 144, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,  40, 128, 
      1,   0, 255, 128,   0,   0, 
     85, 160,   4,   0,   0,   4, 
      0,   0,  39, 128,   0,   0, 
    255, 128,   2,   0, 228, 160, 
      0,   0, 228, 128,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      3,   0, 228, 144,   0,   8, 
    228, 160,   1,   0,   0,   2, 
      0,   0,   8, 128,   1,   0, 
    255, 128,   1,   0,   0,   2, 
      1,   0,  15, 128,   2,   0, 
    228, 144,   4,   0,   0,   4, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      1,   0, 228, 144,   5,   0, 
      0,   3,   0,   8,   8, 128, 
      0,   0, 255, 128,   0,   0, 
    255, 144,   1,   0,   0,   2, 
      0,   8,   7, 128,   0,   0, 
    228, 128, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVBatchYUVACxformEAlphaMul.hlsl.h
//    /Vn pBinary_FYUVBatchYUVACxformEAlphaMul
//    D3D9/FYUVBatchYUVACxformEAlphaMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex_a;
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex_a        s0       1
//   tex_u        s1       1
//   tex_v        s2       1
//   tex_y        s3       1
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, -1
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_color1 v0.w
    dcl_texcoord3 v1
    dcl_texcoord4 v2
    dcl_texcoord v3.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    texld r0, v3, s2
    add_pp r0.x, r0.w, c0.y
    mul_pp r0.xyz, r0.x, c1
    texld r1, v3, s3
    add r0.w, r1.w, c0.x
    mad_pp r0.xyz, r0.w, c0.z, r0
    texld r1, v3, s1
    add_pp r0.w, r1.w, c0.y
    mad_pp r0.xyz, r0.w, c2, r0
    texld r1, v3, s0
    mov r0.w, r1.w
    mov r1, v2
    mad r0, r0, r1, v1
    mul r0.w, r0.w, v0.w
    add r1, r0, c0.w
    mad oC0, r0.w, r1, -c0.w

// approximately 16 instruction slots used (4 texture, 12 arithmetic)
#endif

const BYTE pBinary_FYUVBatchYUVACxformEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     66,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 211,   0, 
      0,   0,   0,   3, 255, 255, 
      4,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    204,   0,   0,   0, 108,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0, 116,   0, 
      0,   0,   0,   0,   0,   0, 
    132,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    140,   0,   0,   0,   0,   0, 
      0,   0, 156,   0,   0,   0, 
      3,   0,   2,   0,   1,   0, 
     10,   0, 164,   0,   0,   0, 
      0,   0,   0,   0, 180,   0, 
      0,   0,   3,   0,   3,   0, 
      1,   0,  14,   0, 188,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95,  97,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 117,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 118,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 121,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      0,   0,  15, 160, 129, 128, 
    128, 189, 129, 128,   0, 191, 
    244, 253, 148,  63,   0,   0, 
    128, 191,  81,   0,   0,   5, 
      1,   0,  15, 160, 186,  73, 
    204,  63, 197,  32,  80, 191, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  81,   0,   0,   5, 
      2,   0,  15, 160,   0,   0, 
      0,   0,  57, 180, 200, 190, 
    135,  22,   1,  64,   0,   0, 
      0,   0,  31,   0,   0,   2, 
     10,   0,   1, 128,   0,   0, 
      8, 144,  31,   0,   0,   2, 
      5,   0,   3, 128,   1,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   4, 128,   2,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   3,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   2,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   3,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   3,   0, 
    228, 144,   2,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     33, 128,   0,   0, 255, 128, 
      0,   0,  85, 160,   5,   0, 
      0,   3,   0,   0,  39, 128, 
      0,   0,   0, 128,   1,   0, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   3,   0, 
    228, 144,   3,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      0,   0,   0, 160,   4,   0, 
      0,   4,   0,   0,  39, 128, 
      0,   0, 255, 128,   0,   0, 
    170, 160,   0,   0, 228, 128, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   3,   0, 228, 144, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,  40, 128, 
      1,   0, 255, 128,   0,   0, 
     85, 160,   4,   0,   0,   4, 
      0,   0,  39, 128,   0,   0, 
    255, 128,   2,   0, 228, 160, 
      0,   0, 228, 128,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      3,   0, 228, 144,   0,   8, 
    228, 160,   1,   0,   0,   2, 
      0,   0,   8, 128,   1,   0, 
    255, 128,   1,   0,   0,   2, 
      1,   0,  15, 128,   2,   0, 
    228, 144,   4,   0,   0,   4, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      1,   0, 228, 144,   5,   0, 
      0,   3,   0,   0,   8, 128, 
      0,   0, 255, 128,   0,   0, 
    255, 144,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   0,   0, 255, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   0,   0, 
    255, 161, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVBatchYUVACxformMul.hlsl.h /Vn
//    pBinary_FYUVBatchYUVACxformMul D3D9/FYUVBatchYUVACxformMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex_a;
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex_a        s0       1
//   tex_u        s1       1
//   tex_v        s2       1
//   tex_y        s3       1
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, -1
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_texcoord3 v0
    dcl_texcoord4 v1
    dcl_texcoord v2.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    texld r0, v2, s2
    add_pp r0.x, r0.w, c0.y
    mul_pp r0.xyz, r0.x, c1
    texld r1, v2, s3
    add r0.w, r1.w, c0.x
    mad_pp r0.xyz, r0.w, c0.z, r0
    texld r1, v2, s1
    add_pp r0.w, r1.w, c0.y
    mad_pp r0.xyz, r0.w, c2, r0
    texld r1, v2, s0
    mov r0.w, r1.w
    mov r1, v1
    mad r0, r0, r1, v0
    add r1, r0, c0.w
    mad oC0, r0.w, r1, -c0.w

// approximately 15 instruction slots used (4 texture, 11 arithmetic)
#endif

const BYTE pBinary_FYUVBatchYUVACxformMul[] =
{
      0,   3, 255, 255, 254, 255, 
     66,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 211,   0, 
      0,   0,   0,   3, 255, 255, 
      4,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    204,   0,   0,   0, 108,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0, 116,   0, 
      0,   0,   0,   0,   0,   0, 
    132,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    140,   0,   0,   0,   0,   0, 
      0,   0, 156,   0,   0,   0, 
      3,   0,   2,   0,   1,   0, 
     10,   0, 164,   0,   0,   0, 
      0,   0,   0,   0, 180,   0, 
      0,   0,   3,   0,   3,   0, 
      1,   0,  14,   0, 188,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95,  97,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 117,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 118,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 121,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      0,   0,  15, 160, 129, 128, 
    128, 189, 129, 128,   0, 191, 
    244, 253, 148,  63,   0,   0, 
    128, 191,  81,   0,   0,   5, 
      1,   0,  15, 160, 186,  73, 
    204,  63, 197,  32,  80, 191, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  81,   0,   0,   5, 
      2,   0,  15, 160,   0,   0, 
      0,   0,  57, 180, 200, 190, 
    135,  22,   1,  64,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   3, 128,   0,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   4, 128,   1,   0, 
     15, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   2,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   2,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   3,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   2,   0, 
    228, 144,   2,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     33, 128,   0,   0, 255, 128, 
      0,   0,  85, 160,   5,   0, 
      0,   3,   0,   0,  39, 128, 
      0,   0,   0, 128,   1,   0, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   2,   0, 
    228, 144,   3,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      0,   0,   0, 160,   4,   0, 
      0,   4,   0,   0,  39, 128, 
      0,   0, 255, 128,   0,   0, 
    170, 160,   0,   0, 228, 128, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   2,   0, 228, 144, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,  40, 128, 
      1,   0, 255, 128,   0,   0, 
     85, 160,   4,   0,   0,   4, 
      0,   0,  39, 128,   0,   0, 
    255, 128,   2,   0, 228, 160, 
      0,   0, 228, 128,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      2,   0, 228, 144,   0,   8, 
    228, 160,   1,   0,   0,   2, 
      0,   0,   8, 128,   1,   0, 
    255, 128,   1,   0,   0,   2, 
      1,   0,  15, 128,   1,   0, 
    228, 144,   4,   0,   0,   4, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   1,   0, 228, 128, 
      0,   0, 228, 144,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   0,   0, 
    255, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      0,   0, 255, 161, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVBatchYUVAEAlpha.hlsl.h /Vn
//    pBinary_FYUVBatchYUVAEAlpha D3D9/FYUVBatchYUVAEAlpha.hlsl
//
//
// Parameters:
//
//   sampler2D tex_a;
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex_a        s0       1
//   tex_u        s1       1
//   tex_v        s2       1
//   tex_y        s3       1
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, 0
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_color1 v0.w
    dcl_texcoord v1.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    texld r0, v1, s2
    add_pp r0.x, r0.w, c0.y
    mul_pp r0.xyz, r0.x, c1
    texld r1, v1, s3
    add r0.w, r1.w, c0.x
    mad_pp r0.xyz, r0.w, c0.z, r0
    texld r1, v1, s1
    add_pp r0.w, r1.w, c0.y
    mad_pp oC0.xyz, r0.w, c2, r0
    texld r0, v1, s0
    mul oC0.w, r0.w, v0.w

// approximately 11 instruction slots used (4 texture, 7 arithmetic)
#endif

const BYTE pBinary_FYUVBatchYUVAEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     66,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 211,   0, 
      0,   0,   0,   3, 255, 255, 
      4,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    204,   0,   0,   0, 108,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0, 116,   0, 
      0,   0,   0,   0,   0,   0, 
    132,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    140,   0,   0,   0,   0,   0, 
      0,   0, 156,   0,   0,   0, 
      3,   0,   2,   0,   1,   0, 
     10,   0, 164,   0,   0,   0, 
      0,   0,   0,   0, 180,   0, 
      0,   0,   3,   0,   3,   0, 
      1,   0,  14,   0, 188,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95,  97,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 117,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 118,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 121,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      0,   0,  15, 160, 129, 128, 
    128, 189, 129, 128,   0, 191, 
    244, 253, 148,  63,   0,   0, 
      0,   0,  81,   0,   0,   5, 
      1,   0,  15, 160, 186,  73, 
    204,  63, 197,  32,  80, 191, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  81,   0,   0,   5, 
      2,   0,  15, 160,   0,   0, 
      0,   0,  57, 180, 200, 190, 
    135,  22,   1,  64,   0,   0, 
      0,   0,  31,   0,   0,   2, 
     10,   0,   1, 128,   0,   0, 
      8, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   1,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   2,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   3,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   1,   0, 
    228, 144,   2,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     33, 128,   0,   0, 255, 128, 
      0,   0,  85, 160,   5,   0, 
      0,   3,   0,   0,  39, 128, 
      0,   0,   0, 128,   1,   0, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   1,   0, 
    228, 144,   3,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      0,   0,   0, 160,   4,   0, 
      0,   4,   0,   0,  39, 128, 
      0,   0, 255, 128,   0,   0, 
    170, 160,   0,   0, 228, 128, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   1,   0, 228, 144, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,  40, 128, 
      1,   0, 255, 128,   0,   0, 
     85, 160,   4,   0,   0,   4, 
      0,   8,  39, 128,   0,   0, 
    255, 128,   2,   0, 228, 160, 
      0,   0, 228, 128,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 228, 144,   0,   8, 
    228, 160,   5,   0,   0,   3, 
      0,   8,   8, 128,   0,   0, 
    255, 128,   0,   0, 255, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVBatchYUVAEAlphaMul.hlsl.h /Vn
//    pBinary_FYUVBatchYUVAEAlphaMul D3D9/FYUVBatchYUVAEAlphaMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex_a;
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex_a        s0       1
//   tex_u        s1       1
//   tex_v        s2       1
//   tex_y        s3       1
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, -1
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_color1 v0.w
    dcl_texcoord v1.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    texld r0, v1, s2
    add_pp r0.x, r0.w, c0.y
    mul_pp r0.xyz, r0.x, c1
    texld r1, v1, s3
    add r0.w, r1.w, c0.x
    mad_pp r0.xyz, r0.w, c0.z, r0
    texld r1, v1, s1
    add_pp r0.w, r1.w, c0.y
    mad_pp r0.xyz, r0.w, c2, r0
    texld r1, v1, s0
    mul r0.w, r1.w, v0.w
    add r1, r0, c0.w
    mad oC0, r0.w, r1, -c0.w

// approximately 13 instruction slots used (4 texture, 9 arithmetic)
#endif

const BYTE pBinary_FYUVBatchYUVAEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     66,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 211,   0, 
      0,   0,   0,   3, 255, 255, 
      4,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    204,   0,   0,   0, 108,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0, 116,   0, 
      0,   0,   0,   0,   0,   0, 
    132,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    140,   0,   0,   0,   0,   0, 
      0,   0, 156,   0,   0,   0, 
      3,   0,   2,   0,   1,   0, 
     10,   0, 164,   0,   0,   0, 
      0,   0,   0,   0, 180,   0, 
      0,   0,   3,   0,   3,   0, 
      1,   0,  14,   0, 188,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95,  97,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 117,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 118,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 121,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      0,   0,  15, 160, 129, 128, 
    128, 189, 129, 128,   0, 191, 
    244, 253, 148,  63,   0,   0, 
    128, 191,  81,   0,   0,   5, 
      1,   0,  15, 160, 186,  73, 
    204,  63, 197,  32,  80, 191, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  81,   0,   0,   5, 
      2,   0,  15, 160,   0,   0, 
      0,   0,  57, 180, 200, 190, 
    135,  22,   1,  64,   0,   0, 
      0,   0,  31,   0,   0,   2, 
     10,   0,   1, 128,   0,   0, 
      8, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   1,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   2,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   3,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   1,   0, 
    228, 144,   2,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     33, 128,   0,   0, 255, 128, 
      0,   0,  85, 160,   5,   0, 
      0,   3,   0,   0,  39, 128, 
      0,   0,   0, 128,   1,   0, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   1,   0, 
    228, 144,   3,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      0,   0,   0, 160,   4,   0, 
      0,   4,   0,   0,  39, 128, 
      0,   0, 255, 128,   0,   0, 
    170, 160,   0,   0, 228, 128, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   1,   0, 228, 144, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,  40, 128, 
      1,   0, 255, 128,   0,   0, 
     85, 160,   4,   0,   0,   4, 
      0,   0,  39, 128,   0,   0, 
    255, 128,   2,   0, 228, 160, 
      0,   0, 228, 128,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      1,   0, 228, 144,   0,   8, 
    228, 160,   5,   0,   0,   3, 
      0,   0,   8, 128,   1,   0, 
    255, 128,   0,   0, 255, 144, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0, 255, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   0,   0, 255, 161, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVBatchYUVAMul.hlsl.h /Vn
//    pBinary_FYUVBatchYUVAMul D3D9/FYUVBatchYUVAMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex_a;
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex_a        s0       1
//   tex_u        s1       1
//   tex_v        s2       1
//   tex_y        s3       1
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, -1
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    texld r0, v0, s2
    add_pp r0.x, r0.w, c0.y
    mul_pp r0.xyz, r0.x, c1
    texld r1, v0, s3
    add r0.w, r1.w, c0.x
    mad_pp r0.xyz, r0.w, c0.z, r0
    texld r1, v0, s1
    add_pp r0.w, r1.w, c0.y
    mad_pp r0.xyz, r0.w, c2, r0
    texld r1, v0, s0
    mov r0.w, r1.w
    add r1, r0, c0.w
    mad oC0, r0.w, r1, -c0.w

// approximately 13 instruction slots used (4 texture, 9 arithmetic)
#endif

const BYTE pBinary_FYUVBatchYUVAMul[] =
{
      0,   3, 255, 255, 254, 255, 
     66,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 211,   0, 
      0,   0,   0,   3, 255, 255, 
      4,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    204,   0,   0,   0, 108,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0, 116,   0, 
      0,   0,   0,   0,   0,   0, 
    132,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    140,   0,   0,   0,   0,   0, 
      0,   0, 156,   0,   0,   0, 
      3,   0,   2,   0,   1,   0, 
     10,   0, 164,   0,   0,   0, 
      0,   0,   0,   0, 180,   0, 
      0,   0,   3,   0,   3,   0, 
      1,   0,  14,   0, 188,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95,  97,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 117,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 118,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 121,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      0,   0,  15, 160, 129, 128, 
    128, 189, 129, 128,   0, 191, 
    244, 253, 148,  63,   0,   0, 
    128, 191,  81,   0,   0,   5, 
      1,   0,  15, 160, 186,  73, 
    204,  63, 197,  32,  80, 191, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  81,   0,   0,   5, 
      2,   0,  15, 160,   0,   0, 
      0,   0,  57, 180, 200, 190, 
    135,  22,   1,  64,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   2,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   3,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 144,   2,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     33, 128,   0,   0, 255, 128, 
      0,   0,  85, 160,   5,   0, 
      0,   3,   0,   0,  39, 128, 
      0,   0,   0, 128,   1,   0, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 144,   3,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      0,   0,   0, 160,   4,   0, 
      0,   4,   0,   0,  39, 128, 
      0,   0, 255, 128,   0,   0, 
    170, 160,   0,   0, 228, 128, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 144, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,  40, 128, 
      1,   0, 255, 128,   0,   0, 
     85, 160,   4,   0,   0,   4, 
      0,   0,  39, 128,   0,   0, 
    255, 128,   2,   0, 228, 160, 
      0,   0, 228, 128,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 144,   0,   8, 
    228, 160,   1,   0,   0,   2, 
      0,   0,   8, 128,   1,   0, 
    255, 128,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   0,   0, 255, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   0,   0, 
    255, 161, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVCxform.hlsl.h /Vn
//    pBinary_FYUVCxform D3D9/FYUVCxform.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   tex_u        s0       1
//   tex_v        s1       1
//   tex_y        s2       1
//

    ps_3_0
    def c2, -0.0627451017, -0.501960814, 1.16400003, 1
    def c3, 1.59599996, -0.813000023, 0, 0
    def c4, 0, -0.39199999, 2.01699996, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    texld r0, v0, s1
    add_pp r0.x, r0.w, c2.y
    mul_pp r0.xyz, r0.x, c3
    texld r1, v0, s2
    add r0.w, r1.w, c2.x
    mad_pp r0.xyz, r0.w, c2.z, r0
    texld r1, v0, s0
    add_pp r0.w, r1.w, c2.y
    mad_pp r0.xyz, r0.w, c4, r0
    mov_pp r0.w, c2.w
    mov r1, c1
    mad oC0, r0, r1, c0

// approximately 12 instruction slots used (3 texture, 9 arithmetic)
#endif

const BYTE pBinary_FYUVCxform[] =
{
      0,   3, 255, 255, 254, 255, 
     72,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 235,   0, 
      0,   0,   0,   3, 255, 255, 
      5,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    228,   0,   0,   0, 128,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 136,   0, 
      0,   0,   0,   0,   0,   0, 
    152,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    136,   0,   0,   0,   0,   0, 
      0,   0, 158,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 164,   0,   0,   0, 
      0,   0,   0,   0, 180,   0, 
      0,   0,   3,   0,   1,   0, 
      1,   0,   6,   0, 188,   0, 
      0,   0,   0,   0,   0,   0, 
    204,   0,   0,   0,   3,   0, 
      2,   0,   1,   0,  10,   0, 
    212,   0,   0,   0,   0,   0, 
      0,   0,  99, 120,  97, 100, 
    100,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,  99, 120, 109, 117, 
    108,   0, 116, 101, 120,  95, 
    117,   0,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 118,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 121,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      2,   0,  15, 160, 129, 128, 
    128, 189, 129, 128,   0, 191, 
    244, 253, 148,  63,   0,   0, 
    128,  63,  81,   0,   0,   5, 
      3,   0,  15, 160, 186,  73, 
    204,  63, 197,  32,  80, 191, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  81,   0,   0,   5, 
      4,   0,  15, 160,   0,   0, 
      0,   0,  57, 180, 200, 190, 
    135,  22,   1,  64,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   2,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     33, 128,   0,   0, 255, 128, 
      2,   0,  85, 160,   5,   0, 
      0,   3,   0,   0,  39, 128, 
      0,   0,   0, 128,   3,   0, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 144,   2,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      2,   0,   0, 160,   4,   0, 
      0,   4,   0,   0,  39, 128, 
      0,   0, 255, 128,   2,   0, 
    170, 160,   0,   0, 228, 128, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 144, 
      0,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,  40, 128, 
      1,   0, 255, 128,   2,   0, 
     85, 160,   4,   0,   0,   4, 
      0,   0,  39, 128,   0,   0, 
    255, 128,   4,   0, 228, 160, 
      0,   0, 228, 128,   1,   0, 
      0,   2,   0,   0,  40, 128, 
      2,   0, 255, 160,   1,   0, 
      0,   2,   1,   0,  15, 128, 
      1,   0, 228, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   0,   0, 228, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVCxformEAlpha.hlsl.h /Vn
//    pBinary_FYUVCxformEAlpha D3D9/FYUVCxformEAlpha.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   tex_u        s0       1
//   tex_v        s1       1
//   tex_y        s2       1
//

    ps_3_0
    def c2, -0.0627451017, -0.501960814, 1.16400003, 1
    def c3, 1.59599996, -0.813000023, 0, 0
    def c4, 0, -0.39199999, 2.01699996, 0
    dcl_color1 v0.w
    dcl_texcoord v1.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    texld r0, v1, s1
    add_pp r0.x, r0.w, c2.y
    mul_pp r0.xyz, r0.x, c3
    texld r1, v1, s2
    add r0.w, r1.w, c2.x
    mad_pp r0.xyz, r0.w, c2.z, r0
    texld r1, v1, s0
    add_pp r0.w, r1.w, c2.y
    mad_pp r0.xyz, r0.w, c4, r0
    mov_pp r0.w, c2.w
    mov r1, c1
    mad r0, r0, r1, c0
    mul oC0.w, r0.w, v0.w
    mov oC0.xyz, r0

// approximately 14 instruction slots used (3 texture, 11 arithmetic)
#endif

const BYTE pBinary_FYUVCxformEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     72,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 235,   0, 
      0,   0,   0,   3, 255, 255, 
      5,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    228,   0,   0,   0, 128,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 136,   0, 
      0,   0,   0,   0,   0,   0, 
    152,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    136,   0,   0,   0,   0,   0, 
      0,   0, 158,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 164,   0,   0,   0, 
      0,   0,   0,   0, 180,   0, 
      0,   0,   3,   0,   1,   0, 
      1,   0,   6,   0, 188,   0, 
      0,   0,   0,   0,   0,   0, 
    204,   0,   0,   0,   3,   0, 
      2,   0,   1,   0,  10,   0, 
    212,   0,   0,   0,   0,   0, 
      0,   0,  99, 120,  97, 100, 
    100,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,  99, 120, 109, 117, 
    108,   0, 116, 101, 120,  95, 
    117,   0,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 118,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 121,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      2,   0,  15, 160, 129, 128, 
    128, 189, 129, 128,   0, 191, 
    244, 253, 148,  63,   0,   0, 
    128,  63,  81,   0,   0,   5, 
      3,   0,  15, 160, 186,  73, 
    204,  63, 197,  32,  80, 191, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  81,   0,   0,   5, 
      4,   0,  15, 160,   0,   0, 
      0,   0,  57, 180, 200, 190, 
    135,  22,   1,  64,   0,   0, 
      0,   0,  31,   0,   0,   2, 
     10,   0,   1, 128,   0,   0, 
      8, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   1,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   2,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   1,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     33, 128,   0,   0, 255, 128, 
      2,   0,  85, 160,   5,   0, 
      0,   3,   0,   0,  39, 128, 
      0,   0,   0, 128,   3,   0, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   1,   0, 
    228, 144,   2,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      2,   0,   0, 160,   4,   0, 
      0,   4,   0,   0,  39, 128, 
      0,   0, 255, 128,   2,   0, 
    170, 160,   0,   0, 228, 128, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   1,   0, 228, 144, 
      0,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,  40, 128, 
      1,   0, 255, 128,   2,   0, 
     85, 160,   4,   0,   0,   4, 
      0,   0,  39, 128,   0,   0, 
    255, 128,   4,   0, 228, 160, 
      0,   0, 228, 128,   1,   0, 
      0,   2,   0,   0,  40, 128, 
      2,   0, 255, 160,   1,   0, 
      0,   2,   1,   0,  15, 128, 
      1,   0, 228, 160,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   0,   0, 228, 160, 
      5,   0,   0,   3,   0,   8, 
      8, 128,   0,   0, 255, 128, 
      0,   0, 255, 144,   1,   0, 
      0,   2,   0,   8,   7, 128, 
      0,   0, 228, 128, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVCxformEAlphaMul.hlsl.h /Vn
//    pBinary_FYUVCxformEAlphaMul D3D9/FYUVCxformEAlphaMul.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   tex_u        s0       1
//   tex_v        s1       1
//   tex_y        s2       1
//

    ps_3_0
    def c2, -0.0627451017, -0.501960814, 1.16400003, 1
    def c3, 1.59599996, -0.813000023, 0, 0
    def c4, 0, -0.39199999, 2.01699996, 0
    dcl_color1 v0.w
    dcl_texcoord v1.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    texld r0, v1, s1
    add_pp r0.x, r0.w, c2.y
    mul_pp r0.xyz, r0.x, c3
    texld r1, v1, s2
    add r0.w, r1.w, c2.x
    mad_pp r0.xyz, r0.w, c2.z, r0
    texld r1, v1, s0
    add_pp r0.w, r1.w, c2.y
    mad_pp r0.xyz, r0.w, c4, r0
    mov_pp r0.w, c2.w
    mov r1, c1
    mad r0, r0, r1, c0
    mul r0.w, r0.w, v0.w
    add r1, r0, -c2.w
    mad oC0, r0.w, r1, c2.w

// approximately 15 instruction slots used (3 texture, 12 arithmetic)
#endif

const BYTE pBinary_FYUVCxformEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     72,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 235,   0, 
      0,   0,   0,   3, 255, 255, 
      5,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    228,   0,   0,   0, 128,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 136,   0, 
      0,   0,   0,   0,   0,   0, 
    152,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    136,   0,   0,   0,   0,   0, 
      0,   0, 158,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 164,   0,   0,   0, 
      0,   0,   0,   0, 180,   0, 
      0,   0,   3,   0,   1,   0, 
      1,   0,   6,   0, 188,   0, 
      0,   0,   0,   0,   0,   0, 
    204,   0,   0,   0,   3,   0, 
      2,   0,   1,   0,  10,   0, 
    212,   0,   0,   0,   0,   0, 
      0,   0,  99, 120,  97, 100, 
    100,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,  99, 120, 109, 117, 
    108,   0, 116, 101, 120,  95, 
    117,   0,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 118,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 121,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      2,   0,  15, 160, 129, 128, 
    128, 189, 129, 128,   0, 191, 
    244, 253, 148,  63,   0,   0, 
    128,  63,  81,   0,   0,   5, 
      3,   0,  15, 160, 186,  73, 
    204,  63, 197,  32,  80, 191, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  81,   0,   0,   5, 
      4,   0,  15, 160,   0,   0, 
      0,   0,  57, 180, 200, 190, 
    135,  22,   1,  64,   0,   0, 
      0,   0,  31,   0,   0,   2, 
     10,   0,   1, 128,   0,   0, 
      8, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   1,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   2,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   1,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     33, 128,   0,   0, 255, 128, 
      2,   0,  85, 160,   5,   0, 
      0,   3,   0,   0,  39, 128, 
      0,   0,   0, 128,   3,   0, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   1,   0, 
    228, 144,   2,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      2,   0,   0, 160,   4,   0, 
      0,   4,   0,   0,  39, 128, 
      0,   0, 255, 128,   2,   0, 
    170, 160,   0,   0, 228, 128, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   1,   0, 228, 144, 
      0,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,  40, 128, 
      1,   0, 255, 128,   2,   0, 
     85, 160,   4,   0,   0,   4, 
      0,   0,  39, 128,   0,   0, 
    255, 128,   4,   0, 228, 160, 
      0,   0, 228, 128,   1,   0, 
      0,   2,   0,   0,  40, 128, 
      2,   0, 255, 160,   1,   0, 
      0,   2,   1,   0,  15, 128, 
      1,   0, 228, 160,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   0,   0, 228, 160, 
      5,   0,   0,   3,   0,   0, 
      8, 128,   0,   0, 255, 128, 
      0,   0, 255, 144,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   2,   0, 
    255, 161,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      2,   0, 255, 160, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVCxformMul.hlsl.h /Vn
//    pBinary_FYUVCxformMul D3D9/FYUVCxformMul.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   tex_u        s0       1
//   tex_v        s1       1
//   tex_y        s2       1
//

    ps_3_0
    def c2, -0.0627451017, -0.501960814, 1.16400003, 1
    def c3, 1.59599996, -0.813000023, 0, 0
    def c4, 0, -0.39199999, 2.01699996, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    texld r0, v0, s1
    add_pp r0.x, r0.w, c2.y
    mul_pp r0.xyz, r0.x, c3
    texld r1, v0, s2
    add r0.w, r1.w, c2.x
    mad_pp r0.xyz, r0.w, c2.z, r0
    texld r1, v0, s0
    add_pp r0.w, r1.w, c2.y
    mad_pp r0.xyz, r0.w, c4, r0
    mov_pp r0.w, c2.w
    mov r1, c1
    mad r0, r0, r1, c0
    add r1, r0, -c2.w
    mad oC0, r0.w, r1, c2.w

// approximately 14 instruction slots used (3 texture, 11 arithmetic)
#endif

const BYTE pBinary_FYUVCxformMul[] =
{
      0,   3, 255, 255, 254, 255, 
     72,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 235,   0, 
      0,   0,   0,   3, 255, 255, 
      5,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    228,   0,   0,   0, 128,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 136,   0, 
      0,   0,   0,   0,   0,   0, 
    152,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    136,   0,   0,   0,   0,   0, 
      0,   0, 158,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 164,   0,   0,   0, 
      0,   0,   0,   0, 180,   0, 
      0,   0,   3,   0,   1,   0, 
      1,   0,   6,   0, 188,   0, 
      0,   0,   0,   0,   0,   0, 
    204,   0,   0,   0,   3,   0, 
      2,   0,   1,   0,  10,   0, 
    212,   0,   0,   0,   0,   0, 
      0,   0,  99, 120,  97, 100, 
    100,   0, 171, 171,   1,   0, 
      3,   0,   1,   0,   4,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0,  99, 120, 109, 117, 
    108,   0, 116, 101, 120,  95, 
    117,   0,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 118,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 121,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      2,   0,  15, 160, 129, 128, 
    128, 189, 129, 128,   0, 191, 
    244, 253, 148,  63,   0,   0, 
    128,  63,  81,   0,   0,   5, 
      3,   0,  15, 160, 186,  73, 
    204,  63, 197,  32,  80, 191, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  81,   0,   0,   5, 
      4,   0,  15, 160,   0,   0, 
      0,   0,  57, 180, 200, 190, 
    135,  22,   1,  64,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   2,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     33, 128,   0,   0, 255, 128, 
      2,   0,  85, 160,   5,   0, 
      0,   3,   0,   0,  39, 128, 
      0,   0,   0, 128,   3,   0, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 144,   2,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      2,   0,   0, 160,   4,   0, 
      0,   4,   0,   0,  39, 128, 
      0,   0, 255, 128,   2,   0, 
    170, 160,   0,   0, 228, 128, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 144, 
      0,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,  40, 128, 
      1,   0, 255, 128,   2,   0, 
     85, 160,   4,   0,   0,   4, 
      0,   0,  39, 128,   0,   0, 
    255, 128,   4,   0, 228, 160, 
      0,   0, 228, 128,   1,   0, 
      0,   2,   0,   0,  40, 128, 
      2,   0, 255, 160,   1,   0, 
      0,   2,   1,   0,  15, 128, 
      1,   0, 228, 160,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   0,   0, 228, 160, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      2,   0, 255, 161,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   2,   0, 255, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVEAlpha.hlsl.h /Vn
//    pBinary_FYUVEAlpha D3D9/FYUVEAlpha.hlsl
//
//
// Parameters:
//
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex_u        s0       1
//   tex_v        s1       1
//   tex_y        s2       1
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, 0
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_color1 v0.w
    dcl_texcoord v1.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    texld r0, v1, s1
    add_pp r0.x, r0.w, c0.y
    mul_pp r0.xyz, r0.x, c1
    texld r1, v1, s2
    add r0.w, r1.w, c0.x
    mad_pp r0.xyz, r0.w, c0.z, r0
    texld r1, v1, s0
    add_pp r0.w, r1.w, c0.y
    mad_pp oC0.xyz, r0.w, c2, r0
    mov oC0.w, v0.w

// approximately 10 instruction slots used (3 texture, 7 arithmetic)
#endif

const BYTE pBinary_FYUVEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     55,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 167,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    160,   0,   0,   0,  88,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    120,   0,   0,   0,   0,   0, 
      0,   0, 136,   0,   0,   0, 
      3,   0,   2,   0,   1,   0, 
     10,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 117,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 118,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 121,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,   0,   0, 
     15, 160, 129, 128, 128, 189, 
    129, 128,   0, 191, 244, 253, 
    148,  63,   0,   0,   0,   0, 
     81,   0,   0,   5,   1,   0, 
     15, 160, 186,  73, 204,  63, 
    197,  32,  80, 191,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     81,   0,   0,   5,   2,   0, 
     15, 160,   0,   0,   0,   0, 
     57, 180, 200, 190, 135,  22, 
      1,  64,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,   8, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   0,   8,  15, 160, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   1,   8,  15, 160, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   2,   8,  15, 160, 
     66,   0,   0,   3,   0,   0, 
     15, 128,   1,   0, 228, 144, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,  33, 128, 
      0,   0, 255, 128,   0,   0, 
     85, 160,   5,   0,   0,   3, 
      0,   0,  39, 128,   0,   0, 
      0, 128,   1,   0, 228, 160, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   1,   0, 228, 144, 
      2,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,   8, 128, 
      1,   0, 255, 128,   0,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   0,  39, 128,   0,   0, 
    255, 128,   0,   0, 170, 160, 
      0,   0, 228, 128,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      1,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  40, 128,   1,   0, 
    255, 128,   0,   0,  85, 160, 
      4,   0,   0,   4,   0,   8, 
     39, 128,   0,   0, 255, 128, 
      2,   0, 228, 160,   0,   0, 
    228, 128,   1,   0,   0,   2, 
      0,   8,   8, 128,   0,   0, 
    255, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVEAlphaMul.hlsl.h /Vn
//    pBinary_FYUVEAlphaMul D3D9/FYUVEAlphaMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex_u        s0       1
//   tex_v        s1       1
//   tex_y        s2       1
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, -1
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_color1 v0.w
    dcl_texcoord v1.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    texld r0, v1, s1
    add_pp r0.x, r0.w, c0.y
    mul_pp r0.xyz, r0.x, c1
    texld r1, v1, s2
    add r0.w, r1.w, c0.x
    mad_pp r0.xyz, r0.w, c0.z, r0
    texld r1, v1, s0
    add_pp r0.w, r1.w, c0.y
    mad_pp r0.xyz, r0.w, c2, r0
    mov r0.w, v0.w
    add r0, r0, c0.w
    mad oC0, v0.w, r0, -c0.w

// approximately 12 instruction slots used (3 texture, 9 arithmetic)
#endif

const BYTE pBinary_FYUVEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     55,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 167,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    160,   0,   0,   0,  88,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    120,   0,   0,   0,   0,   0, 
      0,   0, 136,   0,   0,   0, 
      3,   0,   2,   0,   1,   0, 
     10,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 117,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 118,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 121,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,   0,   0, 
     15, 160, 129, 128, 128, 189, 
    129, 128,   0, 191, 244, 253, 
    148,  63,   0,   0, 128, 191, 
     81,   0,   0,   5,   1,   0, 
     15, 160, 186,  73, 204,  63, 
    197,  32,  80, 191,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     81,   0,   0,   5,   2,   0, 
     15, 160,   0,   0,   0,   0, 
     57, 180, 200, 190, 135,  22, 
      1,  64,   0,   0,   0,   0, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,   8, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   0,   8,  15, 160, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   1,   8,  15, 160, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   2,   8,  15, 160, 
     66,   0,   0,   3,   0,   0, 
     15, 128,   1,   0, 228, 144, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,  33, 128, 
      0,   0, 255, 128,   0,   0, 
     85, 160,   5,   0,   0,   3, 
      0,   0,  39, 128,   0,   0, 
      0, 128,   1,   0, 228, 160, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   1,   0, 228, 144, 
      2,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,   8, 128, 
      1,   0, 255, 128,   0,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   0,  39, 128,   0,   0, 
    255, 128,   0,   0, 170, 160, 
      0,   0, 228, 128,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      1,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  40, 128,   1,   0, 
    255, 128,   0,   0,  85, 160, 
      4,   0,   0,   4,   0,   0, 
     39, 128,   0,   0, 255, 128, 
      2,   0, 228, 160,   0,   0, 
    228, 128,   1,   0,   0,   2, 
      0,   0,   8, 128,   0,   0, 
    255, 144,   2,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 128,   0,   0, 255, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 144, 
      0,   0, 228, 128,   0,   0, 
    255, 161, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVMul.hlsl.h /Vn pBinary_FYUVMul
//    D3D9/FYUVMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex_u        s0       1
//   tex_v        s1       1
//   tex_y        s2       1
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, 1
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    texld r0, v0, s1
    add_pp r0.x, r0.w, c0.y
    mul_pp r0.xyz, r0.x, c1
    texld r1, v0, s2
    add r0.w, r1.w, c0.x
    mad_pp r0.xyz, r0.w, c0.z, r0
    texld r1, v0, s0
    add_pp r0.w, r1.w, c0.y
    mad oC0.xyz, r0.w, c2, r0
    mov_pp oC0.w, c0.w

// approximately 10 instruction slots used (3 texture, 7 arithmetic)
#endif

const BYTE pBinary_FYUVMul[] =
{
      0,   3, 255, 255, 254, 255, 
     55,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 167,   0, 
      0,   0,   0,   3, 255, 255, 
      3,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    160,   0,   0,   0,  88,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0,  96,   0, 
      0,   0,   0,   0,   0,   0, 
    112,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    120,   0,   0,   0,   0,   0, 
      0,   0, 136,   0,   0,   0, 
      3,   0,   2,   0,   1,   0, 
     10,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 117,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 118,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120,  95, 121,   0, 171, 171, 
      4,   0,  12,   0,   1,   0, 
      1,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 112, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,   0,   0, 
     15, 160, 129, 128, 128, 189, 
    129, 128,   0, 191, 244, 253, 
    148,  63,   0,   0, 128,  63, 
     81,   0,   0,   5,   1,   0, 
     15, 160, 186,  73, 204,  63, 
    197,  32,  80, 191,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     81,   0,   0,   5,   2,   0, 
     15, 160,   0,   0,   0,   0, 
     57, 180, 200, 190, 135,  22, 
      1,  64,   0,   0,   0,   0, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 144, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   0,   8,  15, 160, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   1,   8,  15, 160, 
     31,   0,   0,   2,   0,   0, 
      0, 144,   2,   8,  15, 160, 
     66,   0,   0,   3,   0,   0, 
     15, 128,   0,   0, 228, 144, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,  33, 128, 
      0,   0, 255, 128,   0,   0, 
     85, 160,   5,   0,   0,   3, 
      0,   0,  39, 128,   0,   0, 
      0, 128,   1,   0, 228, 160, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 144, 
      2,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,   8, 128, 
      1,   0, 255, 128,   0,   0, 
      0, 160,   4,   0,   0,   4, 
      0,   0,  39, 128,   0,   0, 
    255, 128,   0,   0, 170, 160, 
      0,   0, 228, 128,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 144,   0,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  40, 128,   1,   0, 
    255, 128,   0,   0,  85, 160, 
      4,   0,   0,   4,   0,   8, 
      7, 128,   0,   0, 255, 128, 
      2,   0, 228, 160,   0,   0, 
    228, 128,   1,   0,   0,   2, 
      0,   8,  40, 128,   0,   0, 
    255, 160, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVYUVA.hlsl.h /Vn
//    pBinary_FYUVYUVA D3D9/FYUVYUVA.hlsl
//
//
// Parameters:
//
//   sampler2D tex_a;
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex_a        s0       1
//   tex_u        s1       1
//   tex_v        s2       1
//   tex_y        s3       1
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, 0
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    texld r0, v0, s2
    add_pp r0.x, r0.w, c0.y
    mul_pp r0.xyz, r0.x, c1
    texld r1, v0, s3
    add r0.w, r1.w, c0.x
    mad_pp r0.xyz, r0.w, c0.z, r0
    texld r1, v0, s1
    add_pp r0.w, r1.w, c0.y
    mad_pp oC0.xyz, r0.w, c2, r0
    texld r0, v0, s0
    mov oC0.w, r0.w

// approximately 11 instruction slots used (4 texture, 7 arithmetic)
#endif

const BYTE pBinary_FYUVYUVA[] =
{
      0,   3, 255, 255, 254, 255, 
     66,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 211,   0, 
      0,   0,   0,   3, 255, 255, 
      4,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    204,   0,   0,   0, 108,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0, 116,   0, 
      0,   0,   0,   0,   0,   0, 
    132,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    140,   0,   0,   0,   0,   0, 
      0,   0, 156,   0,   0,   0, 
      3,   0,   2,   0,   1,   0, 
     10,   0, 164,   0,   0,   0, 
      0,   0,   0,   0, 180,   0, 
      0,   0,   3,   0,   3,   0, 
      1,   0,  14,   0, 188,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95,  97,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 117,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 118,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 121,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      0,   0,  15, 160, 129, 128, 
    128, 189, 129, 128,   0, 191, 
    244, 253, 148,  63,   0,   0, 
      0,   0,  81,   0,   0,   5, 
      1,   0,  15, 160, 186,  73, 
    204,  63, 197,  32,  80, 191, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  81,   0,   0,   5, 
      2,   0,  15, 160,   0,   0, 
      0,   0,  57, 180, 200, 190, 
    135,  22,   1,  64,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   2,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   3,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 144,   2,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     33, 128,   0,   0, 255, 128, 
      0,   0,  85, 160,   5,   0, 
      0,   3,   0,   0,  39, 128, 
      0,   0,   0, 128,   1,   0, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 144,   3,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      0,   0,   0, 160,   4,   0, 
      0,   4,   0,   0,  39, 128, 
      0,   0, 255, 128,   0,   0, 
    170, 160,   0,   0, 228, 128, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 144, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,  40, 128, 
      1,   0, 255, 128,   0,   0, 
     85, 160,   4,   0,   0,   4, 
      0,   8,  39, 128,   0,   0, 
    255, 128,   2,   0, 228, 160, 
      0,   0, 228, 128,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 144,   0,   8, 
    228, 160,   1,   0,   0,   2, 
      0,   8,   8, 128,   0,   0, 
    255, 128, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVYUVACxform.hlsl.h /Vn
//    pBinary_FYUVYUVACxform D3D9/FYUVYUVACxform.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   sampler2D tex_a;
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   tex_a        s0       1
//   tex_u        s1       1
//   tex_v        s2       1
//   tex_y        s3       1
//

    ps_3_0
    def c2, -0.0627451017, -0.501960814, 1.16400003, 0
    def c3, 1.59599996, -0.813000023, 0, 0
    def c4, 0, -0.39199999, 2.01699996, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    texld r0, v0, s2
    add_pp r0.x, r0.w, c2.y
    mul_pp r0.xyz, r0.x, c3
    texld r1, v0, s3
    add r0.w, r1.w, c2.x
    mad_pp r0.xyz, r0.w, c2.z, r0
    texld r1, v0, s1
    add_pp r0.w, r1.w, c2.y
    mad_pp r0.xyz, r0.w, c4, r0
    texld r1, v0, s0
    mov r0.w, r1.w
    mov r1, c1
    mad oC0, r0, r1, c0

// approximately 13 instruction slots used (4 texture, 9 arithmetic)
#endif

const BYTE pBinary_FYUVYUVACxform[] =
{
      0,   3, 255, 255, 254, 255, 
     83,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  23,   1, 
      0,   0,   0,   3, 255, 255, 
      6,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     16,   1,   0,   0, 148,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 156,   0, 
      0,   0,   0,   0,   0,   0, 
    172,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    156,   0,   0,   0,   0,   0, 
      0,   0, 178,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 184,   0,   0,   0, 
      0,   0,   0,   0, 200,   0, 
      0,   0,   3,   0,   1,   0, 
      1,   0,   6,   0, 208,   0, 
      0,   0,   0,   0,   0,   0, 
    224,   0,   0,   0,   3,   0, 
      2,   0,   1,   0,  10,   0, 
    232,   0,   0,   0,   0,   0, 
      0,   0, 248,   0,   0,   0, 
      3,   0,   3,   0,   1,   0, 
     14,   0,   0,   1,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 116, 101, 
    120,  95,  97,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  95, 
    117,   0, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  95, 
    118,   0, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  95, 
    121,   0, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  81,   0, 
      0,   5,   2,   0,  15, 160, 
    129, 128, 128, 189, 129, 128, 
      0, 191, 244, 253, 148,  63, 
      0,   0,   0,   0,  81,   0, 
      0,   5,   3,   0,  15, 160, 
    186,  73, 204,  63, 197,  32, 
     80, 191,   0,   0,   0,   0, 
      0,   0,   0,   0,  81,   0, 
      0,   5,   4,   0,  15, 160, 
      0,   0,   0,   0,  57, 180, 
    200, 190, 135,  22,   1,  64, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      2,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      3,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 144,   2,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  33, 128,   0,   0, 
    255, 128,   2,   0,  85, 160, 
      5,   0,   0,   3,   0,   0, 
     39, 128,   0,   0,   0, 128, 
      3,   0, 228, 160,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 144,   3,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   8, 128,   1,   0, 
    255, 128,   2,   0,   0, 160, 
      4,   0,   0,   4,   0,   0, 
     39, 128,   0,   0, 255, 128, 
      2,   0, 170, 160,   0,   0, 
    228, 128,  66,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     40, 128,   1,   0, 255, 128, 
      2,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,  39, 128, 
      0,   0, 255, 128,   4,   0, 
    228, 160,   0,   0, 228, 128, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 144, 
      0,   8, 228, 160,   1,   0, 
      0,   2,   0,   0,   8, 128, 
      1,   0, 255, 128,   1,   0, 
      0,   2,   1,   0,  15, 128, 
      1,   0, 228, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   0,   0, 228, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVYUVACxformEAlpha.hlsl.h /Vn
//    pBinary_FYUVYUVACxformEAlpha D3D9/FYUVYUVACxformEAlpha.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   sampler2D tex_a;
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   tex_a        s0       1
//   tex_u        s1       1
//   tex_v        s2       1
//   tex_y        s3       1
//

    ps_3_0
    def c2, -0.0627451017, -0.501960814, 1.16400003, 0
    def c3, 1.59599996, -0.813000023, 0, 0
    def c4, 0, -0.39199999, 2.01699996, 0
    dcl_color1 v0.w
    dcl_texcoord v1.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    texld r0, v1, s2
    add_pp r0.x, r0.w, c2.y
    mul_pp r0.xyz, r0.x, c3
    texld r1, v1, s3
    add r0.w, r1.w, c2.x
    mad_pp r0.xyz, r0.w, c2.z, r0
    texld r1, v1, s1
    add_pp r0.w, r1.w, c2.y
    mad_pp r0.xyz, r0.w, c4, r0
    texld r1, v1, s0
    mov r0.w, r1.w
    mov r1, c1
    mad r0, r0, r1, c0
    mul oC0.w, r0.w, v0.w
    mov oC0.xyz, r0

// approximately 15 instruction slots used (4 texture, 11 arithmetic)
#endif

const BYTE pBinary_FYUVYUVACxformEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     83,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  23,   1, 
      0,   0,   0,   3, 255, 255, 
      6,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     16,   1,   0,   0, 148,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 156,   0, 
      0,   0,   0,   0,   0,   0, 
    172,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    156,   0,   0,   0,   0,   0, 
      0,   0, 178,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 184,   0,   0,   0, 
      0,   0,   0,   0, 200,   0, 
      0,   0,   3,   0,   1,   0, 
      1,   0,   6,   0, 208,   0, 
      0,   0,   0,   0,   0,   0, 
    224,   0,   0,   0,   3,   0, 
      2,   0,   1,   0,  10,   0, 
    232,   0,   0,   0,   0,   0, 
      0,   0, 248,   0,   0,   0, 
      3,   0,   3,   0,   1,   0, 
     14,   0,   0,   1,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 116, 101, 
    120,  95,  97,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  95, 
    117,   0, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  95, 
    118,   0, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  95, 
    121,   0, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  81,   0, 
      0,   5,   2,   0,  15, 160, 
    129, 128, 128, 189, 129, 128, 
      0, 191, 244, 253, 148,  63, 
      0,   0,   0,   0,  81,   0, 
      0,   5,   3,   0,  15, 160, 
    186,  73, 204,  63, 197,  32, 
     80, 191,   0,   0,   0,   0, 
      0,   0,   0,   0,  81,   0, 
      0,   5,   4,   0,  15, 160, 
      0,   0,   0,   0,  57, 180, 
    200, 190, 135,  22,   1,  64, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      0,   0,   8, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      2,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      3,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 228, 144,   2,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  33, 128,   0,   0, 
    255, 128,   2,   0,  85, 160, 
      5,   0,   0,   3,   0,   0, 
     39, 128,   0,   0,   0, 128, 
      3,   0, 228, 160,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      1,   0, 228, 144,   3,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   8, 128,   1,   0, 
    255, 128,   2,   0,   0, 160, 
      4,   0,   0,   4,   0,   0, 
     39, 128,   0,   0, 255, 128, 
      2,   0, 170, 160,   0,   0, 
    228, 128,  66,   0,   0,   3, 
      1,   0,  15, 128,   1,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     40, 128,   1,   0, 255, 128, 
      2,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,  39, 128, 
      0,   0, 255, 128,   4,   0, 
    228, 160,   0,   0, 228, 128, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   1,   0, 228, 144, 
      0,   8, 228, 160,   1,   0, 
      0,   2,   0,   0,   8, 128, 
      1,   0, 255, 128,   1,   0, 
      0,   2,   1,   0,  15, 128, 
      1,   0, 228, 160,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   0,   0, 228, 160, 
      5,   0,   0,   3,   0,   8, 
      8, 128,   0,   0, 255, 128, 
      0,   0, 255, 144,   1,   0, 
      0,   2,   0,   8,   7, 128, 
      0,   0, 228, 128, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVYUVACxformEAlphaMul.hlsl.h /Vn
//    pBinary_FYUVYUVACxformEAlphaMul D3D9/FYUVYUVACxformEAlphaMul.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   sampler2D tex_a;
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   tex_a        s0       1
//   tex_u        s1       1
//   tex_v        s2       1
//   tex_y        s3       1
//

    ps_3_0
    def c2, -0.0627451017, -0.501960814, 1.16400003, -1
    def c3, 1.59599996, -0.813000023, 0, 0
    def c4, 0, -0.39199999, 2.01699996, 0
    dcl_color1 v0.w
    dcl_texcoord v1.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    texld r0, v1, s2
    add_pp r0.x, r0.w, c2.y
    mul_pp r0.xyz, r0.x, c3
    texld r1, v1, s3
    add r0.w, r1.w, c2.x
    mad_pp r0.xyz, r0.w, c2.z, r0
    texld r1, v1, s1
    add_pp r0.w, r1.w, c2.y
    mad_pp r0.xyz, r0.w, c4, r0
    texld r1, v1, s0
    mov r0.w, r1.w
    mov r1, c1
    mad r0, r0, r1, c0
    mul r0.w, r0.w, v0.w
    add r1, r0, c2.w
    mad oC0, r0.w, r1, -c2.w

// approximately 16 instruction slots used (4 texture, 12 arithmetic)
#endif

const BYTE pBinary_FYUVYUVACxformEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     83,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  23,   1, 
      0,   0,   0,   3, 255, 255, 
      6,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     16,   1,   0,   0, 148,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 156,   0, 
      0,   0,   0,   0,   0,   0, 
    172,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    156,   0,   0,   0,   0,   0, 
      0,   0, 178,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 184,   0,   0,   0, 
      0,   0,   0,   0, 200,   0, 
      0,   0,   3,   0,   1,   0, 
      1,   0,   6,   0, 208,   0, 
      0,   0,   0,   0,   0,   0, 
    224,   0,   0,   0,   3,   0, 
      2,   0,   1,   0,  10,   0, 
    232,   0,   0,   0,   0,   0, 
      0,   0, 248,   0,   0,   0, 
      3,   0,   3,   0,   1,   0, 
     14,   0,   0,   1,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 116, 101, 
    120,  95,  97,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  95, 
    117,   0, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  95, 
    118,   0, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  95, 
    121,   0, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  81,   0, 
      0,   5,   2,   0,  15, 160, 
    129, 128, 128, 189, 129, 128, 
      0, 191, 244, 253, 148,  63, 
      0,   0, 128, 191,  81,   0, 
      0,   5,   3,   0,  15, 160, 
    186,  73, 204,  63, 197,  32, 
     80, 191,   0,   0,   0,   0, 
      0,   0,   0,   0,  81,   0, 
      0,   5,   4,   0,  15, 160, 
      0,   0,   0,   0,  57, 180, 
    200, 190, 135,  22,   1,  64, 
      0,   0,   0,   0,  31,   0, 
      0,   2,  10,   0,   1, 128, 
      0,   0,   8, 144,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      1,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      2,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      3,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 228, 144,   2,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  33, 128,   0,   0, 
    255, 128,   2,   0,  85, 160, 
      5,   0,   0,   3,   0,   0, 
     39, 128,   0,   0,   0, 128, 
      3,   0, 228, 160,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      1,   0, 228, 144,   3,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   8, 128,   1,   0, 
    255, 128,   2,   0,   0, 160, 
      4,   0,   0,   4,   0,   0, 
     39, 128,   0,   0, 255, 128, 
      2,   0, 170, 160,   0,   0, 
    228, 128,  66,   0,   0,   3, 
      1,   0,  15, 128,   1,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     40, 128,   1,   0, 255, 128, 
      2,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,  39, 128, 
      0,   0, 255, 128,   4,   0, 
    228, 160,   0,   0, 228, 128, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   1,   0, 228, 144, 
      0,   8, 228, 160,   1,   0, 
      0,   2,   0,   0,   8, 128, 
      1,   0, 255, 128,   1,   0, 
      0,   2,   1,   0,  15, 128, 
      1,   0, 228, 160,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   0,   0, 228, 160, 
      5,   0,   0,   3,   0,   0, 
      8, 128,   0,   0, 255, 128, 
      0,   0, 255, 144,   2,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 128,   2,   0, 
    255, 160,   4,   0,   0,   4, 
      0,   8,  15, 128,   0,   0, 
    255, 128,   1,   0, 228, 128, 
      2,   0, 255, 161, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVYUVACxformMul.hlsl.h /Vn
//    pBinary_FYUVYUVACxformMul D3D9/FYUVYUVACxformMul.hlsl
//
//
// Parameters:
//
//   float4 cxadd;
//   float4 cxmul;
//   sampler2D tex_a;
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   cxadd        c0       1
//   cxmul        c1       1
//   tex_a        s0       1
//   tex_u        s1       1
//   tex_v        s2       1
//   tex_y        s3       1
//

    ps_3_0
    def c2, -0.0627451017, -0.501960814, 1.16400003, -1
    def c3, 1.59599996, -0.813000023, 0, 0
    def c4, 0, -0.39199999, 2.01699996, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    texld r0, v0, s2
    add_pp r0.x, r0.w, c2.y
    mul_pp r0.xyz, r0.x, c3
    texld r1, v0, s3
    add r0.w, r1.w, c2.x
    mad_pp r0.xyz, r0.w, c2.z, r0
    texld r1, v0, s1
    add_pp r0.w, r1.w, c2.y
    mad_pp r0.xyz, r0.w, c4, r0
    texld r1, v0, s0
    mov r0.w, r1.w
    mov r1, c1
    mad r0, r0, r1, c0
    add r1, r0, c2.w
    mad oC0, r0.w, r1, -c2.w

// approximately 15 instruction slots used (4 texture, 11 arithmetic)
#endif

const BYTE pBinary_FYUVYUVACxformMul[] =
{
      0,   3, 255, 255, 254, 255, 
     83,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  23,   1, 
      0,   0,   0,   3, 255, 255, 
      6,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     16,   1,   0,   0, 148,   0, 
      0,   0,   2,   0,   0,   0, 
      1,   0,   2,   0, 156,   0, 
      0,   0,   0,   0,   0,   0, 
    172,   0,   0,   0,   2,   0, 
      1,   0,   1,   0,   6,   0, 
    156,   0,   0,   0,   0,   0, 
      0,   0, 178,   0,   0,   0, 
      3,   0,   0,   0,   1,   0, 
      2,   0, 184,   0,   0,   0, 
      0,   0,   0,   0, 200,   0, 
      0,   0,   3,   0,   1,   0, 
      1,   0,   6,   0, 208,   0, 
      0,   0,   0,   0,   0,   0, 
    224,   0,   0,   0,   3,   0, 
      2,   0,   1,   0,  10,   0, 
    232,   0,   0,   0,   0,   0, 
      0,   0, 248,   0,   0,   0, 
      3,   0,   3,   0,   1,   0, 
     14,   0,   0,   1,   0,   0, 
      0,   0,   0,   0,  99, 120, 
     97, 100, 100,   0, 171, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0,  99, 120, 
    109, 117, 108,   0, 116, 101, 
    120,  95,  97,   0,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  95, 
    117,   0, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  95, 
    118,   0, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 116, 101, 120,  95, 
    121,   0, 171, 171,   4,   0, 
     12,   0,   1,   0,   1,   0, 
      1,   0,   0,   0,   0,   0, 
      0,   0, 112, 115,  95,  51, 
     95,  48,   0,  77, 105,  99, 
    114, 111, 115, 111, 102, 116, 
     32,  40,  82,  41,  32,  72, 
     76,  83,  76,  32,  83, 104, 
     97, 100, 101, 114,  32,  67, 
    111, 109, 112, 105, 108, 101, 
    114,  32,  57,  46,  50,  57, 
     46,  57,  53,  50,  46,  51, 
     49,  49,  49,   0,  81,   0, 
      0,   5,   2,   0,  15, 160, 
    129, 128, 128, 189, 129, 128, 
      0, 191, 244, 253, 148,  63, 
      0,   0, 128, 191,  81,   0, 
      0,   5,   3,   0,  15, 160, 
    186,  73, 204,  63, 197,  32, 
     80, 191,   0,   0,   0,   0, 
      0,   0,   0,   0,  81,   0, 
      0,   5,   4,   0,  15, 160, 
      0,   0,   0,   0,  57, 180, 
    200, 190, 135,  22,   1,  64, 
      0,   0,   0,   0,  31,   0, 
      0,   2,   5,   0,   0, 128, 
      0,   0,   3, 144,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      0,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      1,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      2,   8,  15, 160,  31,   0, 
      0,   2,   0,   0,   0, 144, 
      3,   8,  15, 160,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      0,   0, 228, 144,   2,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,  33, 128,   0,   0, 
    255, 128,   2,   0,  85, 160, 
      5,   0,   0,   3,   0,   0, 
     39, 128,   0,   0,   0, 128, 
      3,   0, 228, 160,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 144,   3,   8, 
    228, 160,   2,   0,   0,   3, 
      0,   0,   8, 128,   1,   0, 
    255, 128,   2,   0,   0, 160, 
      4,   0,   0,   4,   0,   0, 
     39, 128,   0,   0, 255, 128, 
      2,   0, 170, 160,   0,   0, 
    228, 128,  66,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 144,   1,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     40, 128,   1,   0, 255, 128, 
      2,   0,  85, 160,   4,   0, 
      0,   4,   0,   0,  39, 128, 
      0,   0, 255, 128,   4,   0, 
    228, 160,   0,   0, 228, 128, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 144, 
      0,   8, 228, 160,   1,   0, 
      0,   2,   0,   0,   8, 128, 
      1,   0, 255, 128,   1,   0, 
      0,   2,   1,   0,  15, 128, 
      1,   0, 228, 160,   4,   0, 
      0,   4,   0,   0,  15, 128, 
      0,   0, 228, 128,   1,   0, 
    228, 128,   0,   0, 228, 160, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      2,   0, 255, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   2,   0, 255, 161, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVYUVAEAlpha.hlsl.h /Vn
//    pBinary_FYUVYUVAEAlpha D3D9/FYUVYUVAEAlpha.hlsl
//
//
// Parameters:
//
//   sampler2D tex_a;
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex_a        s0       1
//   tex_u        s1       1
//   tex_v        s2       1
//   tex_y        s3       1
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, 0
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_color1 v0.w
    dcl_texcoord v1.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    texld r0, v1, s2
    add_pp r0.x, r0.w, c0.y
    mul_pp r0.xyz, r0.x, c1
    texld r1, v1, s3
    add r0.w, r1.w, c0.x
    mad_pp r0.xyz, r0.w, c0.z, r0
    texld r1, v1, s1
    add_pp r0.w, r1.w, c0.y
    mad_pp oC0.xyz, r0.w, c2, r0
    texld r0, v1, s0
    mul oC0.w, r0.w, v0.w

// approximately 11 instruction slots used (4 texture, 7 arithmetic)
#endif

const BYTE pBinary_FYUVYUVAEAlpha[] =
{
      0,   3, 255, 255, 254, 255, 
     66,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 211,   0, 
      0,   0,   0,   3, 255, 255, 
      4,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    204,   0,   0,   0, 108,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0, 116,   0, 
      0,   0,   0,   0,   0,   0, 
    132,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    140,   0,   0,   0,   0,   0, 
      0,   0, 156,   0,   0,   0, 
      3,   0,   2,   0,   1,   0, 
     10,   0, 164,   0,   0,   0, 
      0,   0,   0,   0, 180,   0, 
      0,   0,   3,   0,   3,   0, 
      1,   0,  14,   0, 188,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95,  97,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 117,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 118,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 121,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      0,   0,  15, 160, 129, 128, 
    128, 189, 129, 128,   0, 191, 
    244, 253, 148,  63,   0,   0, 
      0,   0,  81,   0,   0,   5, 
      1,   0,  15, 160, 186,  73, 
    204,  63, 197,  32,  80, 191, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  81,   0,   0,   5, 
      2,   0,  15, 160,   0,   0, 
      0,   0,  57, 180, 200, 190, 
    135,  22,   1,  64,   0,   0, 
      0,   0,  31,   0,   0,   2, 
     10,   0,   1, 128,   0,   0, 
      8, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   1,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   2,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   3,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   1,   0, 
    228, 144,   2,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     33, 128,   0,   0, 255, 128, 
      0,   0,  85, 160,   5,   0, 
      0,   3,   0,   0,  39, 128, 
      0,   0,   0, 128,   1,   0, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   1,   0, 
    228, 144,   3,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      0,   0,   0, 160,   4,   0, 
      0,   4,   0,   0,  39, 128, 
      0,   0, 255, 128,   0,   0, 
    170, 160,   0,   0, 228, 128, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   1,   0, 228, 144, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,  40, 128, 
      1,   0, 255, 128,   0,   0, 
     85, 160,   4,   0,   0,   4, 
      0,   8,  39, 128,   0,   0, 
    255, 128,   2,   0, 228, 160, 
      0,   0, 228, 128,  66,   0, 
      0,   3,   0,   0,  15, 128, 
      1,   0, 228, 144,   0,   8, 
    228, 160,   5,   0,   0,   3, 
      0,   8,   8, 128,   0,   0, 
    255, 128,   0,   0, 255, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVYUVAEAlphaMul.hlsl.h /Vn
//    pBinary_FYUVYUVAEAlphaMul D3D9/FYUVYUVAEAlphaMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex_a;
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex_a        s0       1
//   tex_u        s1       1
//   tex_v        s2       1
//   tex_y        s3       1
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, -1
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_color1 v0.w
    dcl_texcoord v1.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    texld r0, v1, s2
    add_pp r0.x, r0.w, c0.y
    mul_pp r0.xyz, r0.x, c1
    texld r1, v1, s3
    add r0.w, r1.w, c0.x
    mad_pp r0.xyz, r0.w, c0.z, r0
    texld r1, v1, s1
    add_pp r0.w, r1.w, c0.y
    mad_pp r0.xyz, r0.w, c2, r0
    texld r1, v1, s0
    mul r0.w, r1.w, v0.w
    add r1, r0, c0.w
    mad oC0, r0.w, r1, -c0.w

// approximately 13 instruction slots used (4 texture, 9 arithmetic)
#endif

const BYTE pBinary_FYUVYUVAEAlphaMul[] =
{
      0,   3, 255, 255, 254, 255, 
     66,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 211,   0, 
      0,   0,   0,   3, 255, 255, 
      4,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    204,   0,   0,   0, 108,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0, 116,   0, 
      0,   0,   0,   0,   0,   0, 
    132,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    140,   0,   0,   0,   0,   0, 
      0,   0, 156,   0,   0,   0, 
      3,   0,   2,   0,   1,   0, 
     10,   0, 164,   0,   0,   0, 
      0,   0,   0,   0, 180,   0, 
      0,   0,   3,   0,   3,   0, 
      1,   0,  14,   0, 188,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95,  97,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 117,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 118,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 121,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      0,   0,  15, 160, 129, 128, 
    128, 189, 129, 128,   0, 191, 
    244, 253, 148,  63,   0,   0, 
    128, 191,  81,   0,   0,   5, 
      1,   0,  15, 160, 186,  73, 
    204,  63, 197,  32,  80, 191, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  81,   0,   0,   5, 
      2,   0,  15, 160,   0,   0, 
      0,   0,  57, 180, 200, 190, 
    135,  22,   1,  64,   0,   0, 
      0,   0,  31,   0,   0,   2, 
     10,   0,   1, 128,   0,   0, 
      8, 144,  31,   0,   0,   2, 
      5,   0,   0, 128,   1,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   2,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   3,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   1,   0, 
    228, 144,   2,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     33, 128,   0,   0, 255, 128, 
      0,   0,  85, 160,   5,   0, 
      0,   3,   0,   0,  39, 128, 
      0,   0,   0, 128,   1,   0, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   1,   0, 
    228, 144,   3,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      0,   0,   0, 160,   4,   0, 
      0,   4,   0,   0,  39, 128, 
      0,   0, 255, 128,   0,   0, 
    170, 160,   0,   0, 228, 128, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   1,   0, 228, 144, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,  40, 128, 
      1,   0, 255, 128,   0,   0, 
     85, 160,   4,   0,   0,   4, 
      0,   0,  39, 128,   0,   0, 
    255, 128,   2,   0, 228, 160, 
      0,   0, 228, 128,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      1,   0, 228, 144,   0,   8, 
    228, 160,   5,   0,   0,   3, 
      0,   0,   8, 128,   1,   0, 
    255, 128,   0,   0, 255, 144, 
      2,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 128, 
      0,   0, 255, 160,   4,   0, 
      0,   4,   0,   8,  15, 128, 
      0,   0, 255, 128,   1,   0, 
    228, 128,   0,   0, 255, 161, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T ps_3_0 /Fh D3D9/FYUVYUVAMul.hlsl.h /Vn
//    pBinary_FYUVYUVAMul D3D9/FYUVYUVAMul.hlsl
//
//
// Parameters:
//
//   sampler2D tex_a;
//   sampler2D tex_u;
//   sampler2D tex_v;
//   sampler2D tex_y;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   tex_a        s0       1
//   tex_u        s1       1
//   tex_v        s2       1
//   tex_y        s3       1
//

    ps_3_0
    def c0, -0.0627451017, -0.501960814, 1.16400003, -1
    def c1, 1.59599996, -0.813000023, 0, 0
    def c2, 0, -0.39199999, 2.01699996, 0
    dcl_texcoord v0.xy
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    texld r0, v0, s2
    add_pp r0.x, r0.w, c0.y
    mul_pp r0.xyz, r0.x, c1
    texld r1, v0, s3
    add r0.w, r1.w, c0.x
    mad_pp r0.xyz, r0.w, c0.z, r0
    texld r1, v0, s1
    add_pp r0.w, r1.w, c0.y
    mad_pp r0.xyz, r0.w, c2, r0
    texld r1, v0, s0
    mov r0.w, r1.w
    add r1, r0, c0.w
    mad oC0, r0.w, r1, -c0.w

// approximately 13 instruction slots used (4 texture, 9 arithmetic)
#endif

const BYTE pBinary_FYUVYUVAMul[] =
{
      0,   3, 255, 255, 254, 255, 
     66,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 211,   0, 
      0,   0,   0,   3, 255, 255, 
      4,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    204,   0,   0,   0, 108,   0, 
      0,   0,   3,   0,   0,   0, 
      1,   0,   2,   0, 116,   0, 
      0,   0,   0,   0,   0,   0, 
    132,   0,   0,   0,   3,   0, 
      1,   0,   1,   0,   6,   0, 
    140,   0,   0,   0,   0,   0, 
      0,   0, 156,   0,   0,   0, 
      3,   0,   2,   0,   1,   0, 
     10,   0, 164,   0,   0,   0, 
      0,   0,   0,   0, 180,   0, 
      0,   0,   3,   0,   3,   0, 
      1,   0,  14,   0, 188,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95,  97,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 117,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 118,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    116, 101, 120,  95, 121,   0, 
    171, 171,   4,   0,  12,   0, 
      1,   0,   1,   0,   1,   0, 
      0,   0,   0,   0,   0,   0, 
    112, 115,  95,  51,  95,  48, 
      0,  77, 105,  99, 114, 111, 
    115, 111, 102, 116,  32,  40, 
     82,  41,  32,  72,  76,  83, 
     76,  32,  83, 104,  97, 100, 
    101, 114,  32,  67, 111, 109, 
    112, 105, 108, 101, 114,  32, 
     57,  46,  50,  57,  46,  57, 
     53,  50,  46,  51,  49,  49, 
     49,   0,  81,   0,   0,   5, 
      0,   0,  15, 160, 129, 128, 
    128, 189, 129, 128,   0, 191, 
    244, 253, 148,  63,   0,   0, 
    128, 191,  81,   0,   0,   5, 
      1,   0,  15, 160, 186,  73, 
    204,  63, 197,  32,  80, 191, 
      0,   0,   0,   0,   0,   0, 
      0,   0,  81,   0,   0,   5, 
      2,   0,  15, 160,   0,   0, 
      0,   0,  57, 180, 200, 190, 
    135,  22,   1,  64,   0,   0, 
      0,   0,  31,   0,   0,   2, 
      5,   0,   0, 128,   0,   0, 
      3, 144,  31,   0,   0,   2, 
      0,   0,   0, 144,   0,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   1,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   2,   8, 
     15, 160,  31,   0,   0,   2, 
      0,   0,   0, 144,   3,   8, 
     15, 160,  66,   0,   0,   3, 
      0,   0,  15, 128,   0,   0, 
    228, 144,   2,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
     33, 128,   0,   0, 255, 128, 
      0,   0,  85, 160,   5,   0, 
      0,   3,   0,   0,  39, 128, 
      0,   0,   0, 128,   1,   0, 
    228, 160,  66,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 144,   3,   8, 228, 160, 
      2,   0,   0,   3,   0,   0, 
      8, 128,   1,   0, 255, 128, 
      0,   0,   0, 160,   4,   0, 
      0,   4,   0,   0,  39, 128, 
      0,   0, 255, 128,   0,   0, 
    170, 160,   0,   0, 228, 128, 
     66,   0,   0,   3,   1,   0, 
     15, 128,   0,   0, 228, 144, 
      1,   8, 228, 160,   2,   0, 
      0,   3,   0,   0,  40, 128, 
      1,   0, 255, 128,   0,   0, 
     85, 160,   4,   0,   0,   4, 
      0,   0,  39, 128,   0,   0, 
    255, 128,   2,   0, 228, 160, 
      0,   0, 228, 128,  66,   0, 
      0,   3,   1,   0,  15, 128, 
      0,   0, 228, 144,   0,   8, 
    228, 160,   1,   0,   0,   2, 
      0,   0,   8, 128,   1,   0, 
    255, 128,   2,   0,   0,   3, 
      1,   0,  15, 128,   0,   0, 
    228, 128,   0,   0, 255, 160, 
      4,   0,   0,   4,   0,   8, 
     15, 128,   0,   0, 255, 128, 
      1,   0, 228, 128,   0,   0, 
    255, 161, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VYUVBatchPosition3d.hlsl.h /Vn
//    pBinary_VYUVBatchPosition3d D3D9/VYUVBatchPosition3d.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[72];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      72
//

    vs_3_0
    def c72, 3, 0, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_texcoord o0.xy
    dcl_position o1
    mul r0.x, c72.x, v1.x
    frc r0.x, r0.x
    mad r0.x, v1.x, c72.x, -r0.x
    mova a0.x, r0.x
    dp4 o0.x, v0, c0[a0.x]
    dp4 o0.y, v0, c1[a0.x]
    dp4 o1, v0, c2[a0.x]

// approximately 7 instruction slots used
#endif

const BYTE pBinary_VYUVBatchPosition3d[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     72,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  72,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,  72,   0, 
     15, 160,   0,   0,  64,  64, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128,  72,   0,   0, 160, 
      1,   0,   0, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      1,   0,   0, 144,  72,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   0,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      0,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   1,   0,  15, 224, 
      0,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh
//    D3D9/VYUVBatchPosition3dCxformVafactor.hlsl.h /Vn
//    pBinary_VYUVBatchPosition3dCxformVafactor
//    D3D9/VYUVBatchPosition3dCxformVafactor.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[120];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0     120
//

    vs_3_0
    def c120, 1275.05005, 0, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord3 o1
    dcl_texcoord4 o2
    dcl_texcoord o3.xy
    dcl_position o4
    mul r0.x, c120.x, v1.z
    frc r0.x, r0.x
    mad r0.x, v1.z, c120.x, -r0.x
    mova a0.x, r0.x
    dp4 o3.x, v0, c0[a0.x]
    dp4 o3.y, v0, c1[a0.x]
    dp4 o4, v0, c4[a0.x]
    mov o0, v1
    mov o1, c2[a0.x]
    mov o2, c3[a0.x]

// approximately 10 instruction slots used
#endif

const BYTE pBinary_VYUVBatchPosition3dCxformVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
    120,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0, 120,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5, 120,   0, 
     15, 160, 154,  97, 159,  68, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   3,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   4,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128, 120,   0,   0, 160, 
      1,   0, 170, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      1,   0, 170, 144, 120,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   3,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      3,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   4,   0,  15, 224, 
      0,   0, 228, 144,   4,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   1,   0, 228, 144, 
      1,   0,   0,   3,   1,   0, 
     15, 224,   2,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   3,   2,   0,  15, 224, 
      3,  32, 228, 160,   0,   0, 
      0, 176, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VYUVBatchPosition3dCxform.hlsl.h
//    /Vn pBinary_VYUVBatchPosition3dCxform
//    D3D9/VYUVBatchPosition3dCxform.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[120];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0     120
//

    vs_3_0
    def c120, 5, 0, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_texcoord3 o0
    dcl_texcoord4 o1
    dcl_texcoord o2.xy
    dcl_position o3
    mul r0.x, c120.x, v1.x
    frc r0.x, r0.x
    mad r0.x, v1.x, c120.x, -r0.x
    mova a0.x, r0.x
    dp4 o2.x, v0, c0[a0.x]
    dp4 o2.y, v0, c1[a0.x]
    dp4 o3, v0, c4[a0.x]
    mov o0, c2[a0.x]
    mov o1, c3[a0.x]

// approximately 9 instruction slots used
#endif

const BYTE pBinary_VYUVBatchPosition3dCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
    120,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0, 120,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5, 120,   0, 
     15, 160,   0,   0, 160,  64, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128, 120,   0,   0, 160, 
      1,   0,   0, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      1,   0,   0, 144, 120,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   2,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      2,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   3,   0,  15, 224, 
      0,   0, 228, 144,   4,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   3,   0,   0, 
     15, 224,   2,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   3,   1,   0,  15, 224, 
      3,  32, 228, 160,   0,   0, 
      0, 176, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VYUVBatchPosition3dVafactor.hlsl.h
//    /Vn pBinary_VYUVBatchPosition3dVafactor
//    D3D9/VYUVBatchPosition3dVafactor.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[72];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      72
//

    vs_3_0
    def c72, 765.030029, 0, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord o1.xy
    dcl_position o2
    mul r0.x, c72.x, v1.z
    frc r0.x, r0.x
    mad r0.x, v1.z, c72.x, -r0.x
    mova a0.x, r0.x
    dp4 o1.x, v0, c0[a0.x]
    dp4 o1.y, v0, c1[a0.x]
    dp4 o2, v0, c2[a0.x]
    mov o0, v1

// approximately 8 instruction slots used
#endif

const BYTE pBinary_VYUVBatchPosition3dVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     72,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  72,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,  72,   0, 
     15, 160, 236,  65,  63,  68, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128,  72,   0,   0, 160, 
      1,   0, 170, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      1,   0, 170, 144,  72,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   1,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      1,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   2,   0,  15, 224, 
      0,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   1,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VYUVBatchPosition3dYUVA.hlsl.h /Vn
//    pBinary_VYUVBatchPosition3dYUVA D3D9/VYUVBatchPosition3dYUVA.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[72];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      72
//

    vs_3_0
    def c72, 3, 0, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_texcoord o0.xy
    dcl_position o1
    mul r0.x, c72.x, v1.x
    frc r0.x, r0.x
    mad r0.x, v1.x, c72.x, -r0.x
    mova a0.x, r0.x
    dp4 o0.x, v0, c0[a0.x]
    dp4 o0.y, v0, c1[a0.x]
    dp4 o1, v0, c2[a0.x]

// approximately 7 instruction slots used
#endif

const BYTE pBinary_VYUVBatchPosition3dYUVA[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     72,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  72,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,  72,   0, 
     15, 160,   0,   0,  64,  64, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128,  72,   0,   0, 160, 
      1,   0,   0, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      1,   0,   0, 144,  72,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   0,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      0,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   1,   0,  15, 224, 
      0,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh
//    D3D9/VYUVBatchPosition3dYUVACxformVafactor.hlsl.h /Vn
//    pBinary_VYUVBatchPosition3dYUVACxformVafactor
//    D3D9/VYUVBatchPosition3dYUVACxformVafactor.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[120];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0     120
//

    vs_3_0
    def c120, 1275.05005, 0, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord3 o1
    dcl_texcoord4 o2
    dcl_texcoord o3.xy
    dcl_position o4
    mul r0.x, c120.x, v1.z
    frc r0.x, r0.x
    mad r0.x, v1.z, c120.x, -r0.x
    mova a0.x, r0.x
    dp4 o3.x, v0, c0[a0.x]
    dp4 o3.y, v0, c1[a0.x]
    dp4 o4, v0, c4[a0.x]
    mov o0, v1
    mov o1, c2[a0.x]
    mov o2, c3[a0.x]

// approximately 10 instruction slots used
#endif

const BYTE pBinary_VYUVBatchPosition3dYUVACxformVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
    120,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0, 120,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5, 120,   0, 
     15, 160, 154,  97, 159,  68, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   3,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   4,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128, 120,   0,   0, 160, 
      1,   0, 170, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      1,   0, 170, 144, 120,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   3,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      3,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   4,   0,  15, 224, 
      0,   0, 228, 144,   4,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   1,   0, 228, 144, 
      1,   0,   0,   3,   1,   0, 
     15, 224,   2,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   3,   2,   0,  15, 224, 
      3,  32, 228, 160,   0,   0, 
      0, 176, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh
//    D3D9/VYUVBatchPosition3dYUVACxform.hlsl.h /Vn
//    pBinary_VYUVBatchPosition3dYUVACxform
//    D3D9/VYUVBatchPosition3dYUVACxform.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[120];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0     120
//

    vs_3_0
    def c120, 5, 0, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_texcoord3 o0
    dcl_texcoord4 o1
    dcl_texcoord o2.xy
    dcl_position o3
    mul r0.x, c120.x, v1.x
    frc r0.x, r0.x
    mad r0.x, v1.x, c120.x, -r0.x
    mova a0.x, r0.x
    dp4 o2.x, v0, c0[a0.x]
    dp4 o2.y, v0, c1[a0.x]
    dp4 o3, v0, c4[a0.x]
    mov o0, c2[a0.x]
    mov o1, c3[a0.x]

// approximately 9 instruction slots used
#endif

const BYTE pBinary_VYUVBatchPosition3dYUVACxform[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
    120,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0, 120,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5, 120,   0, 
     15, 160,   0,   0, 160,  64, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128, 120,   0,   0, 160, 
      1,   0,   0, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      1,   0,   0, 144, 120,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   2,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      2,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   3,   0,  15, 224, 
      0,   0, 228, 144,   4,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   3,   0,   0, 
     15, 224,   2,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   3,   1,   0,  15, 224, 
      3,  32, 228, 160,   0,   0, 
      0, 176, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh
//    D3D9/VYUVBatchPosition3dYUVAVafactor.hlsl.h /Vn
//    pBinary_VYUVBatchPosition3dYUVAVafactor
//    D3D9/VYUVBatchPosition3dYUVAVafactor.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[72];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      72
//

    vs_3_0
    def c72, 765.030029, 0, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord o1.xy
    dcl_position o2
    mul r0.x, c72.x, v1.z
    frc r0.x, r0.x
    mad r0.x, v1.z, c72.x, -r0.x
    mova a0.x, r0.x
    dp4 o1.x, v0, c0[a0.x]
    dp4 o1.y, v0, c1[a0.x]
    dp4 o2, v0, c2[a0.x]
    mov o0, v1

// approximately 8 instruction slots used
#endif

const BYTE pBinary_VYUVBatchPosition3dYUVAVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     72,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  72,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,  72,   0, 
     15, 160, 236,  65,  63,  68, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128,  72,   0,   0, 160, 
      1,   0, 170, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      1,   0, 170, 144,  72,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   1,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      1,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   2,   0,  15, 224, 
      0,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   1,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VYUVBatch.hlsl.h /Vn
//    pBinary_VYUVBatch D3D9/VYUVBatch.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[96];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      96
//

    vs_3_0
    def c96, 4, 0, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_texcoord o0.xy
    dcl_position o1
    mul r0.x, c96.x, v1.x
    frc r0.x, r0.x
    mad r0.x, v1.x, c96.x, -r0.x
    mova a0.x, r0.x
    dp4 o0.x, v0, c0[a0.x]
    dp4 o0.y, v0, c1[a0.x]
    dp4 o1.x, v0, c2[a0.x]
    dp4 o1.y, v0, c3[a0.x]
    mov o1.zw, v0

// approximately 9 instruction slots used
#endif

const BYTE pBinary_VYUVBatch[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,  96,   0, 
     15, 160,   0,   0, 128,  64, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128,  96,   0,   0, 160, 
      1,   0,   0, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      1,   0,   0, 144,  96,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   0,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      0,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   1,   0,   1, 224, 
      0,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   1,   0, 
      2, 224,   0,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      1,   0,  12, 224,   0,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VYUVBatchCxformVafactor.hlsl.h /Vn
//    pBinary_VYUVBatchCxformVafactor D3D9/VYUVBatchCxformVafactor.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[144];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0     144
//

    vs_3_0
    def c144, 1530.06006, 0, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord3 o1
    dcl_texcoord4 o2
    dcl_texcoord o3.xy
    dcl_position o4
    mul r0.x, c144.x, v1.z
    frc r0.x, r0.x
    mad r0.x, v1.z, c144.x, -r0.x
    mova a0.x, r0.x
    dp4 o3.x, v0, c0[a0.x]
    dp4 o3.y, v0, c1[a0.x]
    dp4 o4.x, v0, c4[a0.x]
    dp4 o4.y, v0, c5[a0.x]
    mov o0, v1
    mov o1, c2[a0.x]
    mov o2, c3[a0.x]
    mov o4.zw, v0

// approximately 12 instruction slots used
#endif

const BYTE pBinary_VYUVBatchCxformVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
    144,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5, 144,   0, 
     15, 160, 236,  65, 191,  68, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   3,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   4,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128, 144,   0,   0, 160, 
      1,   0, 170, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      1,   0, 170, 144, 144,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   3,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      3,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   4,   0,   1, 224, 
      0,   0, 228, 144,   4,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   4,   0, 
      2, 224,   0,   0, 228, 144, 
      5,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      0,   0,  15, 224,   1,   0, 
    228, 144,   1,   0,   0,   3, 
      1,   0,  15, 224,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   3,   2,   0, 
     15, 224,   3,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   4,   0,  12, 224, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VYUVBatchCxform.hlsl.h /Vn
//    pBinary_VYUVBatchCxform D3D9/VYUVBatchCxform.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[144];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0     144
//

    vs_3_0
    def c144, 6, 0, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_texcoord3 o0
    dcl_texcoord4 o1
    dcl_texcoord o2.xy
    dcl_position o3
    mul r0.x, c144.x, v1.x
    frc r0.x, r0.x
    mad r0.x, v1.x, c144.x, -r0.x
    mova a0.x, r0.x
    dp4 o2.x, v0, c0[a0.x]
    dp4 o2.y, v0, c1[a0.x]
    dp4 o3.x, v0, c4[a0.x]
    dp4 o3.y, v0, c5[a0.x]
    mov o0, c2[a0.x]
    mov o1, c3[a0.x]
    mov o3.zw, v0

// approximately 11 instruction slots used
#endif

const BYTE pBinary_VYUVBatchCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
    144,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5, 144,   0, 
     15, 160,   0,   0, 192,  64, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128, 144,   0,   0, 160, 
      1,   0,   0, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      1,   0,   0, 144, 144,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   2,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      2,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   3,   0,   1, 224, 
      0,   0, 228, 144,   4,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   3,   0, 
      2, 224,   0,   0, 228, 144, 
      5,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   3, 
      0,   0,  15, 224,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   3,   1,   0, 
     15, 224,   3,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   3,   0,  12, 224, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VYUVBatchVafactor.hlsl.h /Vn
//    pBinary_VYUVBatchVafactor D3D9/VYUVBatchVafactor.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[96];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      96
//

    vs_3_0
    def c96, 1020.03998, 0, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord o1.xy
    dcl_position o2
    mul r0.x, c96.x, v1.z
    frc r0.x, r0.x
    mad r0.x, v1.z, c96.x, -r0.x
    mova a0.x, r0.x
    dp4 o1.x, v0, c0[a0.x]
    dp4 o1.y, v0, c1[a0.x]
    dp4 o2.x, v0, c2[a0.x]
    dp4 o2.y, v0, c3[a0.x]
    mov o0, v1
    mov o2.zw, v0

// approximately 10 instruction slots used
#endif

const BYTE pBinary_VYUVBatchVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,  96,   0, 
     15, 160, 143,   2, 127,  68, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128,  96,   0,   0, 160, 
      1,   0, 170, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      1,   0, 170, 144,  96,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   1,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      1,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   2,   0,   1, 224, 
      0,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   2,   0, 
      2, 224,   0,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      0,   0,  15, 224,   1,   0, 
    228, 144,   1,   0,   0,   2, 
      2,   0,  12, 224,   0,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VYUVBatchYUVA.hlsl.h /Vn
//    pBinary_VYUVBatchYUVA D3D9/VYUVBatchYUVA.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[96];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      96
//

    vs_3_0
    def c96, 4, 0, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_texcoord o0.xy
    dcl_position o1
    mul r0.x, c96.x, v1.x
    frc r0.x, r0.x
    mad r0.x, v1.x, c96.x, -r0.x
    mova a0.x, r0.x
    dp4 o0.x, v0, c0[a0.x]
    dp4 o0.y, v0, c1[a0.x]
    dp4 o1.x, v0, c2[a0.x]
    dp4 o1.y, v0, c3[a0.x]
    mov o1.zw, v0

// approximately 9 instruction slots used
#endif

const BYTE pBinary_VYUVBatchYUVA[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,  96,   0, 
     15, 160,   0,   0, 128,  64, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128,  96,   0,   0, 160, 
      1,   0,   0, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      1,   0,   0, 144,  96,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   0,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      0,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   1,   0,   1, 224, 
      0,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   1,   0, 
      2, 224,   0,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      1,   0,  12, 224,   0,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VYUVBatchYUVACxformVafactor.hlsl.h
//    /Vn pBinary_VYUVBatchYUVACxformVafactor
//    D3D9/VYUVBatchYUVACxformVafactor.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[144];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0     144
//

    vs_3_0
    def c144, 1530.06006, 0, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord3 o1
    dcl_texcoord4 o2
    dcl_texcoord o3.xy
    dcl_position o4
    mul r0.x, c144.x, v1.z
    frc r0.x, r0.x
    mad r0.x, v1.z, c144.x, -r0.x
    mova a0.x, r0.x
    dp4 o3.x, v0, c0[a0.x]
    dp4 o3.y, v0, c1[a0.x]
    dp4 o4.x, v0, c4[a0.x]
    dp4 o4.y, v0, c5[a0.x]
    mov o0, v1
    mov o1, c2[a0.x]
    mov o2, c3[a0.x]
    mov o4.zw, v0

// approximately 12 instruction slots used
#endif

const BYTE pBinary_VYUVBatchYUVACxformVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
    144,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5, 144,   0, 
     15, 160, 236,  65, 191,  68, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   2,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   3,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   4,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128, 144,   0,   0, 160, 
      1,   0, 170, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      1,   0, 170, 144, 144,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   3,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      3,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   4,   0,   1, 224, 
      0,   0, 228, 144,   4,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   4,   0, 
      2, 224,   0,   0, 228, 144, 
      5,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      0,   0,  15, 224,   1,   0, 
    228, 144,   1,   0,   0,   3, 
      1,   0,  15, 224,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   3,   2,   0, 
     15, 224,   3,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   4,   0,  12, 224, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VYUVBatchYUVACxform.hlsl.h /Vn
//    pBinary_VYUVBatchYUVACxform D3D9/VYUVBatchYUVACxform.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[144];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0     144
//

    vs_3_0
    def c144, 6, 0, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_texcoord3 o0
    dcl_texcoord4 o1
    dcl_texcoord o2.xy
    dcl_position o3
    mul r0.x, c144.x, v1.x
    frc r0.x, r0.x
    mad r0.x, v1.x, c144.x, -r0.x
    mova a0.x, r0.x
    dp4 o2.x, v0, c0[a0.x]
    dp4 o2.y, v0, c1[a0.x]
    dp4 o3.x, v0, c4[a0.x]
    dp4 o3.y, v0, c5[a0.x]
    mov o0, c2[a0.x]
    mov o1, c3[a0.x]
    mov o3.zw, v0

// approximately 11 instruction slots used
#endif

const BYTE pBinary_VYUVBatchYUVACxform[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
    144,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0, 144,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5, 144,   0, 
     15, 160,   0,   0, 192,  64, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      3, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      4, 128,   1,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   2,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   3,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128, 144,   0,   0, 160, 
      1,   0,   0, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      1,   0,   0, 144, 144,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   2,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      2,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   3,   0,   1, 224, 
      0,   0, 228, 144,   4,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   3,   0, 
      2, 224,   0,   0, 228, 144, 
      5,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   3, 
      0,   0,  15, 224,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      1,   0,   0,   3,   1,   0, 
     15, 224,   3,  32, 228, 160, 
      0,   0,   0, 176,   1,   0, 
      0,   2,   3,   0,  12, 224, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VYUVBatchYUVAVafactor.hlsl.h /Vn
//    pBinary_VYUVBatchYUVAVafactor D3D9/VYUVBatchYUVAVafactor.hlsl
//
//
// Parameters:
//
//   float4 vfuniforms[96];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   vfuniforms   c0      96
//

    vs_3_0
    def c96, 1020.03998, 0, 0, 0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord o1.xy
    dcl_position o2
    mul r0.x, c96.x, v1.z
    frc r0.x, r0.x
    mad r0.x, v1.z, c96.x, -r0.x
    mova a0.x, r0.x
    dp4 o1.x, v0, c0[a0.x]
    dp4 o1.y, v0, c1[a0.x]
    dp4 o2.x, v0, c2[a0.x]
    dp4 o2.y, v0, c3[a0.x]
    mov o0, v1
    mov o2.zw, v0

// approximately 10 instruction slots used
#endif

const BYTE pBinary_VYUVBatchYUVAVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     34,   0,  67,  84,  65,  66, 
     28,   0,   0,   0,  83,   0, 
      0,   0,   0,   3, 254, 255, 
      1,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
     76,   0,   0,   0,  48,   0, 
      0,   0,   2,   0,   0,   0, 
     96,   0,   2,   0,  60,   0, 
      0,   0,   0,   0,   0,   0, 
    118, 102, 117, 110, 105, 102, 
    111, 114, 109, 115,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,  96,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     81,   0,   0,   5,  96,   0, 
     15, 160, 143,   2, 127,  68, 
      0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      5,   0,   0,   3,   0,   0, 
      1, 128,  96,   0,   0, 160, 
      1,   0, 170, 144,  19,   0, 
      0,   2,   0,   0,   1, 128, 
      0,   0,   0, 128,   4,   0, 
      0,   4,   0,   0,   1, 128, 
      1,   0, 170, 144,  96,   0, 
      0, 160,   0,   0,   0, 129, 
     46,   0,   0,   2,   0,   0, 
      1, 176,   0,   0,   0, 128, 
      9,   0,   0,   4,   1,   0, 
      1, 224,   0,   0, 228, 144, 
      0,  32, 228, 160,   0,   0, 
      0, 176,   9,   0,   0,   4, 
      1,   0,   2, 224,   0,   0, 
    228, 144,   1,  32, 228, 160, 
      0,   0,   0, 176,   9,   0, 
      0,   4,   2,   0,   1, 224, 
      0,   0, 228, 144,   2,  32, 
    228, 160,   0,   0,   0, 176, 
      9,   0,   0,   4,   2,   0, 
      2, 224,   0,   0, 228, 144, 
      3,  32, 228, 160,   0,   0, 
      0, 176,   1,   0,   0,   2, 
      0,   0,  15, 224,   1,   0, 
    228, 144,   1,   0,   0,   2, 
      2,   0,  12, 224,   0,   0, 
    228, 144, 255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VYUVPosition3d.hlsl.h /Vn
//    pBinary_VYUVPosition3d D3D9/VYUVPosition3d.hlsl
//
//
// Parameters:
//
//   float4x4 mvp;
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//   texgen       c4       2
//

    vs_3_0
    dcl_position v0
    dcl_texcoord o0.xy
    dcl_position o1
    dp4 o0.x, v0, c4
    dp4 o0.y, v0, c5
    dp4 o1.x, v0, c0
    dp4 o1.y, v0, c1
    dp4 o1.z, v0, c2
    dp4 o1.w, v0, c3

// approximately 6 instruction slots used
#endif

const BYTE pBinary_VYUVPosition3d[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      4,   0,   2,   0,  18,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      9,   0,   0,   3,   0,   0, 
      1, 224,   0,   0, 228, 144, 
      4,   0, 228, 160,   9,   0, 
      0,   3,   0,   0,   2, 224, 
      0,   0, 228, 144,   5,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   1, 224,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      2, 224,   0,   0, 228, 144, 
      1,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   4, 224, 
      0,   0, 228, 144,   2,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   8, 224,   0,   0, 
    228, 144,   3,   0, 228, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VYUVPosition3dCxform.hlsl.h /Vn
//    pBinary_VYUVPosition3dCxform D3D9/VYUVPosition3dCxform.hlsl
//
//
// Parameters:
//
//   float4x4 mvp;
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//   texgen       c4       2
//

    vs_3_0
    dcl_position v0
    dcl_texcoord o0.xy
    dcl_position o1
    dp4 o0.x, v0, c4
    dp4 o0.y, v0, c5
    dp4 o1.x, v0, c0
    dp4 o1.y, v0, c1
    dp4 o1.z, v0, c2
    dp4 o1.w, v0, c3

// approximately 6 instruction slots used
#endif

const BYTE pBinary_VYUVPosition3dCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      4,   0,   2,   0,  18,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      9,   0,   0,   3,   0,   0, 
      1, 224,   0,   0, 228, 144, 
      4,   0, 228, 160,   9,   0, 
      0,   3,   0,   0,   2, 224, 
      0,   0, 228, 144,   5,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   1, 224,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      2, 224,   0,   0, 228, 144, 
      1,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   4, 224, 
      0,   0, 228, 144,   2,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   8, 224,   0,   0, 
    228, 144,   3,   0, 228, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VYUVPosition3dCxformVafactor.hlsl.h
//    /Vn pBinary_VYUVPosition3dCxformVafactor
//    D3D9/VYUVPosition3dCxformVafactor.hlsl
//
//
// Parameters:
//
//   float4x4 mvp;
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//   texgen       c4       2
//

    vs_3_0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord o1.xy
    dcl_position o2
    dp4 o1.x, v0, c4
    dp4 o1.y, v0, c5
    dp4 o2.x, v0, c0
    dp4 o2.y, v0, c1
    dp4 o2.z, v0, c2
    dp4 o2.w, v0, c3
    mov o0, v1

// approximately 7 instruction slots used
#endif

const BYTE pBinary_VYUVPosition3dCxformVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      4,   0,   2,   0,  18,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      9,   0,   0,   3,   1,   0, 
      1, 224,   0,   0, 228, 144, 
      4,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   2, 224, 
      0,   0, 228, 144,   5,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   1, 224,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   2,   0, 
      2, 224,   0,   0, 228, 144, 
      1,   0, 228, 160,   9,   0, 
      0,   3,   2,   0,   4, 224, 
      0,   0, 228, 144,   2,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   8, 224,   0,   0, 
    228, 144,   3,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   1,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VYUVPosition3dVafactor.hlsl.h /Vn
//    pBinary_VYUVPosition3dVafactor D3D9/VYUVPosition3dVafactor.hlsl
//
//
// Parameters:
//
//   float4x4 mvp;
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//   texgen       c4       2
//

    vs_3_0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord o1.xy
    dcl_position o2
    dp4 o1.x, v0, c4
    dp4 o1.y, v0, c5
    dp4 o2.x, v0, c0
    dp4 o2.y, v0, c1
    dp4 o2.z, v0, c2
    dp4 o2.w, v0, c3
    mov o0, v1

// approximately 7 instruction slots used
#endif

const BYTE pBinary_VYUVPosition3dVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      4,   0,   2,   0,  18,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      9,   0,   0,   3,   1,   0, 
      1, 224,   0,   0, 228, 144, 
      4,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   2, 224, 
      0,   0, 228, 144,   5,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   1, 224,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   2,   0, 
      2, 224,   0,   0, 228, 144, 
      1,   0, 228, 160,   9,   0, 
      0,   3,   2,   0,   4, 224, 
      0,   0, 228, 144,   2,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   8, 224,   0,   0, 
    228, 144,   3,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   1,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VYUVPosition3dYUVA.hlsl.h /Vn
//    pBinary_VYUVPosition3dYUVA D3D9/VYUVPosition3dYUVA.hlsl
//
//
// Parameters:
//
//   float4x4 mvp;
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//   texgen       c4       2
//

    vs_3_0
    dcl_position v0
    dcl_texcoord o0.xy
    dcl_position o1
    dp4 o0.x, v0, c4
    dp4 o0.y, v0, c5
    dp4 o1.x, v0, c0
    dp4 o1.y, v0, c1
    dp4 o1.z, v0, c2
    dp4 o1.w, v0, c3

// approximately 6 instruction slots used
#endif

const BYTE pBinary_VYUVPosition3dYUVA[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      4,   0,   2,   0,  18,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      9,   0,   0,   3,   0,   0, 
      1, 224,   0,   0, 228, 144, 
      4,   0, 228, 160,   9,   0, 
      0,   3,   0,   0,   2, 224, 
      0,   0, 228, 144,   5,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   1, 224,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      2, 224,   0,   0, 228, 144, 
      1,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   4, 224, 
      0,   0, 228, 144,   2,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   8, 224,   0,   0, 
    228, 144,   3,   0, 228, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VYUVPosition3dYUVACxform.hlsl.h /Vn
//    pBinary_VYUVPosition3dYUVACxform D3D9/VYUVPosition3dYUVACxform.hlsl
//
//
// Parameters:
//
//   float4x4 mvp;
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//   texgen       c4       2
//

    vs_3_0
    dcl_position v0
    dcl_texcoord o0.xy
    dcl_position o1
    dp4 o0.x, v0, c4
    dp4 o0.y, v0, c5
    dp4 o1.x, v0, c0
    dp4 o1.y, v0, c1
    dp4 o1.z, v0, c2
    dp4 o1.w, v0, c3

// approximately 6 instruction slots used
#endif

const BYTE pBinary_VYUVPosition3dYUVACxform[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      4,   0,   2,   0,  18,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      9,   0,   0,   3,   0,   0, 
      1, 224,   0,   0, 228, 144, 
      4,   0, 228, 160,   9,   0, 
      0,   3,   0,   0,   2, 224, 
      0,   0, 228, 144,   5,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   1, 224,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      2, 224,   0,   0, 228, 144, 
      1,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   4, 224, 
      0,   0, 228, 144,   2,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   8, 224,   0,   0, 
    228, 144,   3,   0, 228, 160, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh
//    D3D9/VYUVPosition3dYUVACxformVafactor.hlsl.h /Vn
//    pBinary_VYUVPosition3dYUVACxformVafactor
//    D3D9/VYUVPosition3dYUVACxformVafactor.hlsl
//
//
// Parameters:
//
//   float4x4 mvp;
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//   texgen       c4       2
//

    vs_3_0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord o1.xy
    dcl_position o2
    dp4 o1.x, v0, c4
    dp4 o1.y, v0, c5
    dp4 o2.x, v0, c0
    dp4 o2.y, v0, c1
    dp4 o2.z, v0, c2
    dp4 o2.w, v0, c3
    mov o0, v1

// approximately 7 instruction slots used
#endif

const BYTE pBinary_VYUVPosition3dYUVACxformVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      4,   0,   2,   0,  18,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      9,   0,   0,   3,   1,   0, 
      1, 224,   0,   0, 228, 144, 
      4,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   2, 224, 
      0,   0, 228, 144,   5,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   1, 224,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   2,   0, 
      2, 224,   0,   0, 228, 144, 
      1,   0, 228, 160,   9,   0, 
      0,   3,   2,   0,   4, 224, 
      0,   0, 228, 144,   2,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   8, 224,   0,   0, 
    228, 144,   3,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   1,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VYUVPosition3dYUVAVafactor.hlsl.h
//    /Vn pBinary_VYUVPosition3dYUVAVafactor
//    D3D9/VYUVPosition3dYUVAVafactor.hlsl
//
//
// Parameters:
//
//   float4x4 mvp;
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       4
//   texgen       c4       2
//

    vs_3_0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord o1.xy
    dcl_position o2
    dp4 o1.x, v0, c4
    dp4 o1.y, v0, c5
    dp4 o2.x, v0, c0
    dp4 o2.y, v0, c1
    dp4 o2.z, v0, c2
    dp4 o2.w, v0, c3
    mov o0, v1

// approximately 7 instruction slots used
#endif

const BYTE pBinary_VYUVPosition3dYUVAVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      4,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      4,   0,   2,   0,  18,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      3,   0,   3,   0,   4,   0, 
      4,   0,   1,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      9,   0,   0,   3,   1,   0, 
      1, 224,   0,   0, 228, 144, 
      4,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   2, 224, 
      0,   0, 228, 144,   5,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   1, 224,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   2,   0, 
      2, 224,   0,   0, 228, 144, 
      1,   0, 228, 160,   9,   0, 
      0,   3,   2,   0,   4, 224, 
      0,   0, 228, 144,   2,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   8, 224,   0,   0, 
    228, 144,   3,   0, 228, 160, 
      1,   0,   0,   2,   0,   0, 
     15, 224,   1,   0, 228, 144, 
    255, 255,   0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VYUV.hlsl.h /Vn pBinary_VYUV
//    D3D9/VYUV.hlsl
//
//
// Parameters:
//
//   float4 mvp[2];
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//   texgen       c2       2
//

    vs_3_0
    dcl_position v0
    dcl_texcoord o0.xy
    dcl_position o1
    dp4 o0.x, v0, c2
    dp4 o0.y, v0, c3
    dp4 o1.x, v0, c0
    dp4 o1.y, v0, c1
    mov o1.zw, v0

// approximately 5 instruction slots used
#endif

const BYTE pBinary_VYUV[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      2,   0,   2,   0,  10,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      9,   0,   0,   3,   0,   0, 
      1, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   0,   0,   2, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   1, 224,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      2, 224,   0,   0, 228, 144, 
      1,   0, 228, 160,   1,   0, 
      0,   2,   1,   0,  12, 224, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VYUVCxform.hlsl.h /Vn
//    pBinary_VYUVCxform D3D9/VYUVCxform.hlsl
//
//
// Parameters:
//
//   float4 mvp[2];
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//   texgen       c2       2
//

    vs_3_0
    dcl_position v0
    dcl_texcoord o0.xy
    dcl_position o1
    dp4 o0.x, v0, c2
    dp4 o0.y, v0, c3
    dp4 o1.x, v0, c0
    dp4 o1.y, v0, c1
    mov o1.zw, v0

// approximately 5 instruction slots used
#endif

const BYTE pBinary_VYUVCxform[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      2,   0,   2,   0,  10,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      9,   0,   0,   3,   0,   0, 
      1, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   0,   0,   2, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   1, 224,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      2, 224,   0,   0, 228, 144, 
      1,   0, 228, 160,   1,   0, 
      0,   2,   1,   0,  12, 224, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VYUVCxformVafactor.hlsl.h /Vn
//    pBinary_VYUVCxformVafactor D3D9/VYUVCxformVafactor.hlsl
//
//
// Parameters:
//
//   float4 mvp[2];
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//   texgen       c2       2
//

    vs_3_0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord o1.xy
    dcl_position o2
    dp4 o1.x, v0, c2
    dp4 o1.y, v0, c3
    dp4 o2.x, v0, c0
    dp4 o2.y, v0, c1
    mov o0, v1
    mov o2.zw, v0

// approximately 6 instruction slots used
#endif

const BYTE pBinary_VYUVCxformVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      2,   0,   2,   0,  10,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      9,   0,   0,   3,   1,   0, 
      1, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   2, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   1, 224,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   2,   0, 
      2, 224,   0,   0, 228, 144, 
      1,   0, 228, 160,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      1,   0, 228, 144,   1,   0, 
      0,   2,   2,   0,  12, 224, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VYUVVafactor.hlsl.h /Vn
//    pBinary_VYUVVafactor D3D9/VYUVVafactor.hlsl
//
//
// Parameters:
//
//   float4 mvp[2];
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//   texgen       c2       2
//

    vs_3_0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord o1.xy
    dcl_position o2
    dp4 o1.x, v0, c2
    dp4 o1.y, v0, c3
    dp4 o2.x, v0, c0
    dp4 o2.y, v0, c1
    mov o0, v1
    mov o2.zw, v0

// approximately 6 instruction slots used
#endif

const BYTE pBinary_VYUVVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      2,   0,   2,   0,  10,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      9,   0,   0,   3,   1,   0, 
      1, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   2, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   1, 224,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   2,   0, 
      2, 224,   0,   0, 228, 144, 
      1,   0, 228, 160,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      1,   0, 228, 144,   1,   0, 
      0,   2,   2,   0,  12, 224, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VYUVYUVA.hlsl.h /Vn
//    pBinary_VYUVYUVA D3D9/VYUVYUVA.hlsl
//
//
// Parameters:
//
//   float4 mvp[2];
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//   texgen       c2       2
//

    vs_3_0
    dcl_position v0
    dcl_texcoord o0.xy
    dcl_position o1
    dp4 o0.x, v0, c2
    dp4 o0.y, v0, c3
    dp4 o1.x, v0, c0
    dp4 o1.y, v0, c1
    mov o1.zw, v0

// approximately 5 instruction slots used
#endif

const BYTE pBinary_VYUVYUVA[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      2,   0,   2,   0,  10,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      9,   0,   0,   3,   0,   0, 
      1, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   0,   0,   2, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   1, 224,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      2, 224,   0,   0, 228, 144, 
      1,   0, 228, 160,   1,   0, 
      0,   2,   1,   0,  12, 224, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VYUVYUVACxform.hlsl.h /Vn
//    pBinary_VYUVYUVACxform D3D9/VYUVYUVACxform.hlsl
//
//
// Parameters:
//
//   float4 mvp[2];
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//   texgen       c2       2
//

    vs_3_0
    dcl_position v0
    dcl_texcoord o0.xy
    dcl_position o1
    dp4 o0.x, v0, c2
    dp4 o0.y, v0, c3
    dp4 o1.x, v0, c0
    dp4 o1.y, v0, c1
    mov o1.zw, v0

// approximately 5 instruction slots used
#endif

const BYTE pBinary_VYUVYUVACxform[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      2,   0,   2,   0,  10,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   0,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   1,   0,  15, 224, 
      9,   0,   0,   3,   0,   0, 
      1, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   0,   0,   2, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160,   9,   0,   0,   3, 
      1,   0,   1, 224,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   1,   0, 
      2, 224,   0,   0, 228, 144, 
      1,   0, 228, 160,   1,   0, 
      0,   2,   1,   0,  12, 224, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VYUVYUVACxformVafactor.hlsl.h /Vn
//    pBinary_VYUVYUVACxformVafactor D3D9/VYUVYUVACxformVafactor.hlsl
//
//
// Parameters:
//
//   float4 mvp[2];
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//   texgen       c2       2
//

    vs_3_0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord o1.xy
    dcl_position o2
    dp4 o1.x, v0, c2
    dp4 o1.y, v0, c3
    dp4 o2.x, v0, c0
    dp4 o2.y, v0, c1
    mov o0, v1
    mov o2.zw, v0

// approximately 6 instruction slots used
#endif

const BYTE pBinary_VYUVYUVACxformVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      2,   0,   2,   0,  10,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      9,   0,   0,   3,   1,   0, 
      1, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   2, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   1, 224,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   2,   0, 
      2, 224,   0,   0, 228, 144, 
      1,   0, 228, 160,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      1,   0, 228, 144,   1,   0, 
      0,   2,   2,   0,  12, 224, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   fxc /nologo /E main /T vs_3_0 /Fh D3D9/VYUVYUVAVafactor.hlsl.h /Vn
//    pBinary_VYUVYUVAVafactor D3D9/VYUVYUVAVafactor.hlsl
//
//
// Parameters:
//
//   float4 mvp[2];
//   float4 texgen[2];
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   mvp          c0       2
//   texgen       c2       2
//

    vs_3_0
    dcl_position v0
    dcl_color1 v1
    dcl_color1 o0
    dcl_texcoord o1.xy
    dcl_position o2
    dp4 o1.x, v0, c2
    dp4 o1.y, v0, c3
    dp4 o2.x, v0, c0
    dp4 o2.y, v0, c1
    mov o0, v1
    mov o2.zw, v0

// approximately 6 instruction slots used
#endif

const BYTE pBinary_VYUVYUVAVafactor[] =
{
      0,   3, 254, 255, 254, 255, 
     43,   0,  67,  84,  65,  66, 
     28,   0,   0,   0, 119,   0, 
      0,   0,   0,   3, 254, 255, 
      2,   0,   0,   0,  28,   0, 
      0,   0,   0,   1,   0,   0, 
    112,   0,   0,   0,  68,   0, 
      0,   0,   2,   0,   0,   0, 
      2,   0,   2,   0,  72,   0, 
      0,   0,   0,   0,   0,   0, 
     88,   0,   0,   0,   2,   0, 
      2,   0,   2,   0,  10,   0, 
     96,   0,   0,   0,   0,   0, 
      0,   0, 109, 118, 112,   0, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 116, 101, 
    120, 103, 101, 110,   0, 171, 
      1,   0,   3,   0,   1,   0, 
      4,   0,   2,   0,   0,   0, 
      0,   0,   0,   0, 118, 115, 
     95,  51,  95,  48,   0,  77, 
    105,  99, 114, 111, 115, 111, 
    102, 116,  32,  40,  82,  41, 
     32,  72,  76,  83,  76,  32, 
     83, 104,  97, 100, 101, 114, 
     32,  67, 111, 109, 112, 105, 
    108, 101, 114,  32,  57,  46, 
     50,  57,  46,  57,  53,  50, 
     46,  51,  49,  49,  49,   0, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   0,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   1,   0,  15, 144, 
     31,   0,   0,   2,  10,   0, 
      1, 128,   0,   0,  15, 224, 
     31,   0,   0,   2,   5,   0, 
      0, 128,   1,   0,   3, 224, 
     31,   0,   0,   2,   0,   0, 
      0, 128,   2,   0,  15, 224, 
      9,   0,   0,   3,   1,   0, 
      1, 224,   0,   0, 228, 144, 
      2,   0, 228, 160,   9,   0, 
      0,   3,   1,   0,   2, 224, 
      0,   0, 228, 144,   3,   0, 
    228, 160,   9,   0,   0,   3, 
      2,   0,   1, 224,   0,   0, 
    228, 144,   0,   0, 228, 160, 
      9,   0,   0,   3,   2,   0, 
      2, 224,   0,   0, 228, 144, 
      1,   0, 228, 160,   1,   0, 
      0,   2,   0,   0,  15, 224, 
      1,   0, 228, 144,   1,   0, 
      0,   2,   2,   0,  12, 224, 
      0,   0, 228, 144, 255, 255, 
      0,   0
};
}}}

