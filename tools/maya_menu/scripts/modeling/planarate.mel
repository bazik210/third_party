global proc planarate(float $angleLimit, float $tex){//tex 0//tex 1$sel = `ls -sl -fl`;if (whatIsSel() == "o" && sizeSel() > 1)	print "select only one object";else {string $objectSel[] = `ls -sl -o`;string $parents[] = `listRelatives -ap $objectSel[0]`;if (`size $parents` > 0)	parent -w $objectSel[0];//timerMy start;//showSE begin;//float $angleLimit = 1;string $polyNormals[] = `polyInfo -fn`;string $edges[] = conv(`ls -sl`, "e");string $texEdges[] = texEdges($sel);if ($tex)	$edges = stringArrayRemove($texEdges, $edges);string $borderEdges[] = borderEdges($sel);$edges = stringArrayRemove($borderEdges, $edges);string $edge;string $planar[] = {};int $nums[];int $allCount = `size $edges`;$count = 0;for ($edge in $edges)	{//$edge = $edges[0];	$faces = conv({$edge}, "f");//select $faces;	$nums = getNumbersOfComponents($faces);	float $infoOn1[] = stringArrayToFloatArray (stringToStringArray($polyNormals[$nums[0]], " "));	float $infoOn2[] = stringArrayToFloatArray (stringToStringArray($polyNormals[$nums[1]], " "));	float $angle = angleD(		<<$infoOn1[2], $infoOn1[3], $infoOn1[4]>>,		<<$infoOn2[2], $infoOn2[3], $infoOn2[4]>>);	int $equal = 1;	if ($angle > $angleLimit)		$equal = 0;	if ($equal)		$planar[`size $planar`] = $edge;	$count++;	print ("\nEdge " + $count + " from " + $allCount);	}select $planar;hilite $sel;//showSE "";string $text = "";if (`size $parents` > 0)	$text = ". Object was UNPARENT from his parent.";//print (timerMy ("end") + $text);}}