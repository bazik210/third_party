//==============================================================================//Name://  actionFacesAdvanced.mel//==============================================================================//Purpose://if keysPressed == "" 					 	// - Copy Polygon//if keysPressed == "Ctrl" 		 		 	// - Move Polygon//==============================================================================//Usage://  1. Save the actionFacesAdvanced.mel to your scripts directory.//  2. Start Maya. In the command line type actionFacesAdvanced();//  3. Middlemouse drag to a shelf you like.//==============================================================================global proc actionFacesAdvanced(){string $keys = keysPressed();if ($keys == ""){polyCopyFaces;//print "Copy Polygon";}if ($keys == "Ctrl"){polyMoveFaces;//print "Move Polygon";}}global proc polyCopyFaces(){	$fStartTime = `timerX`;	//-------------------------------------	//	Get all input data			//-------------------------------------	// Get only selected faces // Result: pCube1.f[2] pCube2.f[2] pCube1.f[1] // 	string $rootSelectFaces[] = `ls -sl -type float3`; 	// Declare array of new selected faces	string $newSelectFaces[];	// Get only selected meshes // Result: pCubeShape1 pCubeShape2 // 	string $rootSelectMeshes[] = `ls -sl -o -type mesh`; 	// Remove duplicates in mesh array // Result: pCubeShape1 pCubeShape2 // 	string $rootSelectMeshes[] = stringArrayRemoveDuplicates($rootSelectMeshes); 	// Select only needed geometry // Result: selected pCubeShape1 pCubeShape2 //	select $rootSelectMeshes; 	// Up to node name // Result: selected pCube1 pCube2 //	pickWalk -d up; 	// Get all geometry names // Result: pCube1 pCube2 // 	string $RootObj[] = `ls -sl`; 	//---------------------------------------	//	Create  2 arrays				//	1 - array of objects $RootObj[$i]	//	2 - array of faces accordingly $ListOfObjFaces[$i]		//---------------------------------------	string $ListOfObjFaces[] = { "", "", "" }; 	for ($i=0; $i < size($RootObj); $i++)	{		$ListOfObjFaces[$i] = "";		string $RootObjFaces = "";		for ($faces in $rootSelectFaces)		{			//if exist in word pCube1.f[2] word pCube1 // Result: 1 //			if (`gmatch $faces ($RootObj[$i]+"*")`) 			{				$RootObjFaces += " " + $faces;				$ListOfObjFaces[$i] = $RootObjFaces;			}		}	}	//--------------------------------------------	// 	Dublicate Objects	// 	Create new array of duplicate objects 	//--------------------------------------------	string $ListOfNewObj[] = `duplicate $RootObj`;	//--------------------------------------------	//	Create array of new faces	//--------------------------------------------	for ($i=0; $i < size($RootObj); $i++)	{		// print("old = " + $RootObj[$i] + " new  = " + $ListOfNewObj[$i] + " = " + $ListOfObjFaces[$i] + "\n");		$FaceNameString = $ListOfObjFaces[$i];		$RootObjString = $RootObj[$i];		$NextObj = $ListOfNewObj[$i];		// temp variable for manipulations with string arrays		string $bufferP[]; 		// divide string by ". " and place to array ( pCube1, f[0], pCube1, f[3] )		tokenize $FaceNameString ". " $bufferP; 		// convert string to string array		$RootObjStringArray = stringToStringArray($RootObjString, " "); 		// remove pCube1 from array Result: f[0] f[3]		string $bufferP[] = stringArrayRemove($RootObjStringArray, $bufferP); 		string $NextFaceNameString = stringArrayToString($bufferP , " ");		// Result: pCube2.f[0] pCube2.f[3]		string $NextFaceNameString = substituteAllString($NextFaceNameString, "f",($NextObj +".f")); 		// Create array from string (pCube2.f[0], pCube2.f[3])		tokenize $NextFaceNameString " " $bufferP; 		appendStringArray($newSelectFaces, $bufferP, size($bufferP));	}	string $newSelectFaces[] = stringArrayRemoveDuplicates($newSelectFaces); 	//------------------------------------------	// 	Manipulate with faces	//------------------------------------------	select $newSelectFaces;	InvertSelection;	doDelete;	select $ListOfNewObj;	CenterPivot; 		$fTotalTime = `timerX -startTime $fStartTime`;	print ("Total Extract Time: "+$fTotalTime+"\n");}global proc polyMoveFaces(){	$fStartTime = `timerX`;	//-------------------------------------	//	Get all input data			//-------------------------------------	// Get only selected faces // Result: pCube1.f[2] pCube2.f[2] pCube1.f[1] // 	string $rootSelectFaces[] = `ls -sl -type float3`; 	// Declare array of new selected faces	string $newSelectFaces[];	// Get only selected meshes // Result: pCubeShape1 pCubeShape2 // 	string $rootSelectMeshes[] = `ls -sl -o -type mesh`; 	// Remove duplicates in mesh array // Result: pCubeShape1 pCubeShape2 // 	string $rootSelectMeshes[] = stringArrayRemoveDuplicates($rootSelectMeshes); 	// Select only needed geometry // Result: selected pCubeShape1 pCubeShape2 //	select $rootSelectMeshes; 	// Up to node name // Result: selected pCube1 pCube2 //	pickWalk -d up; 	// Get all geometry names // Result: pCube1 pCube2 // 	string $RootObj[] = `ls -sl`; 	//---------------------------------------	//	Create  2 arrays				//	1 - array of objects $RootObj[$i]	//	2 - array of faces accordingly $ListOfObjFaces[$i]		//---------------------------------------	string $ListOfObjFaces[] = { "", "", "" }; 	for ($i=0; $i < size($RootObj); $i++)	{		$ListOfObjFaces[$i] = "";		string $RootObjFaces = "";		for ($faces in $rootSelectFaces)		{			//if exist in word pCube1.f[2] word pCube1 // Result: 1 //			if (`gmatch $faces ($RootObj[$i]+"*")`) 			{				$RootObjFaces += " " + $faces;				$ListOfObjFaces[$i] = $RootObjFaces;			}		}	}	//--------------------------------------------	// 	Dublicate Objects	// 	Create new array of duplicate objects 	//--------------------------------------------	string $ListOfNewObj[] = `duplicate $RootObj`;	//--------------------------------------------	//	Create array of new faces	//--------------------------------------------	for ($i=0; $i < size($RootObj); $i++)	{		// print("old = " + $RootObj[$i] + " new  = " + $ListOfNewObj[$i] + " = " + $ListOfObjFaces[$i] + "\n");		$FaceNameString = $ListOfObjFaces[$i];		$RootObjString = $RootObj[$i];		$NextObj = $ListOfNewObj[$i];		// temp variable for manipulations with string arrays		string $bufferP[]; 		// divide string by ". " and place to array ( pCube1, f[0], pCube1, f[3] )		tokenize $FaceNameString ". " $bufferP; 		// convert string to string array		$RootObjStringArray = stringToStringArray($RootObjString, " "); 		// remove pCube1 from array Result: f[0] f[3]		string $bufferP[] = stringArrayRemove($RootObjStringArray, $bufferP); 		string $NextFaceNameString = stringArrayToString($bufferP , " ");		// Result: pCube2.f[0] pCube2.f[3]		string $NextFaceNameString = substituteAllString($NextFaceNameString, "f",($NextObj +".f")); 		// Create array from string (pCube2.f[0], pCube2.f[3])		tokenize $NextFaceNameString " " $bufferP; 		appendStringArray($newSelectFaces, $bufferP, size($bufferP));	}	string $newSelectFaces[] = stringArrayRemoveDuplicates($newSelectFaces); 	//------------------------------------------	// 	Manipulate with faces	//------------------------------------------	select $newSelectFaces;	InvertSelection;	doDelete;	select $rootSelectFaces;	doDelete;	select $ListOfNewObj;	CenterPivot; 		$fTotalTime = `timerX -startTime $fStartTime`;	print ("Total Extract Time: "+$fTotalTime+"\n");}