[SCE CONFIDENTIAL DOCUMENT]
PLAYSTATION(R)3 Programmer Tool Toolchain 131.002
                    Copyright(C) 2006 Sony Computer Entertainment Inc.
                                                   All Rights Reserved.
======================================================================
The following are known bugs and limitations on PLAYSTATION(R)3 Programmer
Tool Toolchain package.

New updates have the release version of this package.

----------------------------------------------------------------------
GCC
----------------------------------------------------------------------
<PPU/SPU>
- The size of the precompiled header that the Compiler for Windows can 
  generate is 128M bytes or less.

- Vector literals that use {} do not operate as specified 
  in the specifications if the elements within {} are omitted 
  like (vector signed int){1}. 
  Please specify all of the elements, like (vector signed int){1,2,3,4}.

- There is a problem that the class type and the structure type of 
  an object is not aligned as specified with __attribute__((align)). 
  In such a case, please specify the alignment of the first members of
  the class type and the structure type. Depending on the problem, 
  it may be possible to avoid it. 

  Code with the problem: 
    template<class T> class test
    {
        public:
                T a[4];
                T b[4];
                T c[4];
     };
    typedef test<float> __attribute__ ((aligned (16))) align_test;

   Code in which the problem is avoided: 
     template<class T> class test
     {
         public:
                  __attribute__ ((aligned (16))) T a[4];
                  T b[4];
                  T c[4];
     };
     typedef test<float> align_test;

- When a directory contains a program that includes a header file for C++ and 
  a subdirectory that has the same name as the header file, a compile error 
  will occur when a program such as the code of the example is compiled.

  "ppu-lv2-gcc -I .. -c testfile.cpp"

- In a program such as the code of the example, a correct value may not be
  assigned to the variable b:

  Example)
  {
     namespace Units
     {
         const float a = 0.5f;
         const float b= 1.0f / a;
     }
  }

- When a program such as the code of the example is compiled, an internal
  compile error will occur:

  Example)
  struct A
  {
    A(const A&);
    A& operator=(const A&);
    static void bar();
    void baz() volatile;
  };
  void A::baz() volatile
  {
    bar();
  }

- When accessing an address that is assigned to the pointer variable 
  with __restrict attribute specified, such attribute will not 
  be reflected.

- When ppu-lv2-strip or spu-lv2-strip is in use, the following warning 
  message may be displayed on the console.

    $ ppu-lv2-strip -s -o test_strip.elf test.elf
    BFD: test.elf: warning: Empty loadable segment detected, 
                   is this intentional ?
    BFD: test_strip.elf: warning: allocated section `.tbss' not in segment

  Note that the behavior of the ELF file that is generated by this command
  will have no problem even when this warning message is output.

- When "-q" and "--gc-sections" are specified as a linker option at the same
  time, "-q" will be enabled but not "--gc-sections".

- When the C++ source files include 3 header files with the headers 
  precompiled by g++ and the dependency file is created by specifying 
  the -MMD option, only the first header described within the source 
  files will not be written into the dependency file as follows.

  Note that "make" may continue failing to detect header modifications 
  if invalid dependency files are once created, because compilation 
  and dependency file generation are performed simultaneously with the 
  -MMD option, and "make" refers to the existing dependency files.
  In this case, discard the dependency files before performing "make".

    --- Source Files(test.cpp) ---
    #include "test1.h"
    #include "test2.h"
    #include "test3.h"

    --- Compiling ---
    $ ppu-lv2-g++ test1.h
    $ ppu-lv2-g++ test2.h
    $ ppu-lv2-g++ test3.h
    $ ppu-lv2-g++ -MMD -c test.cpp

  Note that this problem may be avoided when -O1 or more is specified 
  as an optimization option of the compiler as follows:

    $ ppu-lv2-g++ -MMD -O1 -c test.cpp

(Added in Release 131.002)
- When a header file is pre-compiled with -MD or -MMD options, a 
   dependent file to be generated will have its extension as ".o" incorrectly.
   In such case, clearly specify the output file before the pre-compiling 
   process as shown below:

   Example: ppu-lv2-gcc -MMD test.h -o test.h.gch

- If vmx2spu.h or spu2vmx.h is used from C programs, errors are
  displayed.  To avoid the problem, please use them from C++ programs.

- In a vector literal with (), such as (vector signed int)(x), 
  an error is not reported even when those other than constants or 
  constant expressions (such as variables) are used.

- In Windows environment, if the -frepo option is specified and 
  a program such as the code of the example is compiled and linked, 
  a linking error will occur. 

  Example)
      template<typename T>
         T Max(T a, T b) 
                { 
                  return a > b ? a : b;
                }

      int main(){
                  char cbuf;
                  cbuf = Max('1', '2');
                }

<PPU>
- A function that returns a vector type value may store the return value
  into the R3 register, not the VR3 register.

- When a program that uses __lwbrx and __stwcx functions are compiled 
  with the "  -Wstrict-aliasing=2" option, the following warning message
  will be output.

  warning: type-punning to incomplete type might break strict-aliasing rules

- When a program such as the code of the example is compiled, an internal 
  compile error will occur.

  Example)
  struct A
  {
    A(void*);
    ~A();
  };

  void foo(const int i, bool b)
  {
    b ? A(0) : i;
  }

- When a program such as the code of the example is compiled, a warning
  message will be output to the console.

  Example)
  std::vector<bool> myArray
  std::vector<bool>::iterator it = myArray.begin()

- When 2 programs such as the code of the example are compiled, a different
  code will be generated respectively.

  Example)
  --- program1 -----
   A foo;
   B bar;
   foo = *reinterpret_cast<A *>(&bar);
  --- program2 ----
   A foo;
   B bar;
   *reinterpret_cast<B *>(&foo) = bar;

- When a program such as the code of the example is executed, an exception
  error will occur with throw, and the program will stop.

  Example)
  void test()
  {
      char s[16];
      throw s;
  }

  int main()
  {
      try {
          test();
      }
      catch(char *s){
          throw;
      }
      return 0;
  }

- When a program such as the code of the example is compiled with the 
  optimization option set to -02 or more, it will be less optimized 
  than when gcc3.4 is used.

  Example)
  typedef union
  {
    float f[4];
    vector float vf;
  }
  Union128;
  vector float
  make_vector_from_float (float x, float y, float z, float w)
  {
    Union128 u;

    u.f[0] = x;
    u.f[1] = y;
    u.f[2] = z;
    u.f[3] = w;
    return u.vf;
  }

- When a program such as the code of the example is compiled, the const 
  variable b may be placed in the .bss section, not the .data section.

  Example)
  const int a = 2;
  const int b = a+a;

- When a program such as the code of the example that uses __thread 
  is compiled, a compile error will occur.

  Example)
  class rage{
     static int s_ThreadPrefix;
  };
  __thread int rage::s_ThreadPrefix = 1;

- A program that uses a response file cannot be linked within a folder
  whose name contains a space character.

- When a header file that uses altivec.h is compiled with the "-x c-header"
  to generate a pre-compiled header, a compilation process of a program 
  that uses the header file may end in error.

- The optimization of an empty loop statement is not sufficient.

- When a program that has a comment such as the example is compiled, 
  a warning message will be output to the console.

  Example)
  //int blahblah;\
  //int behbeh;

- When a program is compiled with the -MMD option in Windows environment,
  and the path to the system header is specified using the -I option,
  a header file name that exists in the path will be contained in the 
  output .d file.

- When a program, that includes the system header "spu_internals.h",
  is compiled with the path to the header file set with the -I option,
  a warning message will be output to the console.

  C:\support>spu-lv2-gcc -Wall -I%SCE_PS3_ROOT%/target/spu/include -c main.cpp
  C:/usr/local/cell/096/target/spu/include/spu_internals.h:63: warning: specifying
  ?vector types with __attribute__ ((mode)) is de precated
  C:/usr/local/cell/096/target/spu/include/spu_internals.h:63: warning: use __attr
  ibute__ ((vector_size)) instead

- When a program, that uses the attribute __may_alias__ as an alias 
  declaration of a structure, is compiled, an internal compile error
  will occur.

  typedef struct
  {
      char a;
      char b; 
      char c;
      char d;
  } test;
  typedef test __attribute__((__may_alias__)) test_a;

- When the following cast is performed, the program will not work correctly.

  dist += a->b[0] * (*reinterpret_cast< const vec_t * >
  ( reinterpret_cast< const byte * >(arg)+ c->d[0] ));

- Although an optimized program such as the code of the example is compiled,
  an unnecessary instruction may be output:

  Example)
  -- Program ---
     while(size>0){
         *(dst++) = *(src++);
         size--;
     }
  -- Assembly code ---
     ld 11,0(4)
     addi 0,3,8
     addi 9,4,8
     std 11,0(3)
     rldicl 3,0,0,32 <- Unnecessary
     rldicl 4,9,0,32 <- Unnecessary
     bdnz .L4
     blr"

- In a program that includes <iostream>, the C/C++ standard libraries 
  will use "new" in "_initialize".

- When a program such as the code of the example that uses the attribute
  __may_alias__ within template is compiled, an internal compile error
  will occur.

  Example)
  template <typename T>
  void f() 
  { 
    typedef T __attribute__((__may_alias__)) A;

- Although an optimization process is performed when compiling a program, 
  the clrldi instruction which is not required may be output.

- When a program such as the code of the example is compiled, a warning
  message will be output to the console:

  Example)
  struct Y { static int i; };

  template <typename T> class X {
      X () { Y::i; };
  };
  template class X<int>;

  class Z {
      Z () { Y::i; };
  };

- When PPU_INCDIRS which is defined as follows is specified using 
  the -I option at compilation, an compile error occur.

  PPU_INCDIRS += myproject/include/

- When a program that contains the VMX instruction is compiled, the 
  optimization will not be performed efficiently. 
  Accordingly, an unnecessary instruction may be left within the 
  internal processing of the loop statement. When this problem occurs,
  describe the processing of the loop statement using the asm statement.

- In PPU program, even when "align" is specified to the variable 
  assigned to the TLS area, the alignment process may not be performed.
  This behavior is defined by the specifications of Cell OS Lv-2.

- When calling other functions from the PPU program in assembly 
  language, the following should be noted to set the correct value 
  for TOC pointer(r2).

  (1) Always insert nop instruction after bl instruction. By doing so,
      when the function to be called uses a different TOC pointer, 
      the linker will generate a linkage code to replace nop with an 
      appropriate instruction.

      Example:
                 bl              .foo
                 nop

  (2) Always include ".toc" section (can be empty) in the assembler
      source file. This is the current restriction on the linker.
     
      Example: Put the following at the beginning of the file
           .section        ".toc","aw"
           .section        ".text"

<SPU>
- When a program such as the code of the example is compiled, an error 
  message "type mismatch in conditional expression." will be output.

  Example)
  vec_float4 test(int n)
  {
     return ((n == 0) ? (vec_float4)(0) : spu_shuffle((vec_float4)(0), 
                                     (vec_float4)(0), (vec_uchar16)(0)));
  }

- The SPU compiler inserts the lnop instruction when 16 load/store 
  instructions are consecutively output.
  The specification will be changed so that hbr is inserted instead 
  of lnop.

- When a program such as the code of the example that includes a function 
  with the attribute __always_inline__ specified is compiled, 
  an compile error will occur.

  Example)
  __attribute__((__always_inline__)) uint32_t foo(Counter *pCount)
  {
    :
    :
  }

- In a program that is compiled with the -fPIC option, the address of the 
  member declared in a structure may not be set correctly.

- When a value other than a multiple of 16 is set to the offset of the lqd
  instruction using the inline assembler as shown below, the compiler will 
  not output a warning message nor an error:

  lqd register,8(register)

- In a program that is compiled with the -fPIC option, the address of the 
  member declared in a structure may not be set correctly.

- According to chapter 7 of "Cell OS Lv-2 C/C++ Language Extensions 
  for SPU", when the type of an operand within an expression is double 
  and the operand is a denormal number, it should be considered as 0.0 
  or -0.0. However, with the current compiler, the optimization result 
  may not adhere to this. 

- If the -funroll-loops option and the -frerun-cse-before-sched option 
  are specified at the same time, an incorrect code is generated. 
  Please do not specify the -frerun-cse-before-sched option. 

- If an object or elf that includes the brsl instruction is disassembled 
  with spu-lv2-objdump, not the value obtained by adding s18 and $pc, but
  the address that is obtained by adding s18 and $pc is displayed with 
  the "brsl rt, s18" instruction. 

- With spu-lv2-gcc and spu-lv2-g++, when the optimization option is 
  -O1 or more and the arguments of the spu_roundf and si_frds 
  intrinsic functions can be calculated at the time of compilation, 
  the specified rounding mode (by default, round to nearest) is not 
  used and the calculation is done by rounding down. 

  Example)
    vec_float f(void) {
      vec_float4 v1=spu_roundtf(((vec_double2){
        0,12345678.9
      }));
    }

----------------------------------------------------------------------
GDB
----------------------------------------------------------------------
<Windows/Linux>
- When ppu-lv2-gdb/spu-lv2-gdb is booted by a user directly, 
  the argument "info-spurs" may not be passed due to script 
  description.
  Rewrite gdbinit.ppu or gdbinit.spu before use as shown below:

  1. Search "define info-spurs"
  2. Rewrite "monitor spursinfo \$arg0" that is described in the next 
     line of the sercheed line as "monitor spursinfo $arg0"

- When debugging a program, in which multiple PPU threads exist, using bedbg,
  the message "watch dog timeout" may be displayed on GDB.

- When info-spurs command is executed on GDB, a file information 
  "File not found" will be always displayed for spurs_kernel.elf or 
  stripped elf.

- When SPU threads are generated repeatedly in the PPU program booted 
  using bedbg -c option, execution of each SPU threads may not be restarted.

- When a null character ("") is contained in the string that is passed 
  as an argument(arg/env) during execution, arg/env may not be recognized 
  correctly from the subsequent use of arg/env. 

<Windows>
- The following 4 commands that are used to debug a Raw SPU by bedbg are not 
  available.
    
    rawspustoplist, rawspuid, rawspuinfo, lsaddr

  For details of this bug, see the Technical Note 200610-22.
  https://ps3.scedev.net/technotes/view/345/1
