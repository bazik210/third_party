[SCE CONFIDENTIAL DOCUMENT]
PLAYSTATION(R)3 Programmer Tool Toolchain 210.001(based on GCC 4.1.1)
                    Copyright(C) 2007 Sony Computer Entertainment Inc.
                                                  All Rights Reserved.
======================================================================
The following are the new features and fixed bugs of PLAYSTATION(R)3 
Programmer Tool Toolchain package. 

- Additions of new features and changes in Release 210.001
- Bugs fixed in Release 210.001

======================================================================
New Additions and Changes in Release 210.001
----------------------------------------------------------------------
SN Systems Linker
----------------------------------------------------------------------
None

----------------------------------------------------------------------
GCC
----------------------------------------------------------------------
<SPU>
(B#40333)
- An option -mwarn-stop0 has been added to the compiler and the assembler.
  This option displays a warning when 0 is set to the operand of the 
  "stop" instruction.

<PPU/SPU>
(B#40580)
- An option -fdebug-prologue-epilogue has been added to output additional
  debug information for the prologue and the epilogue of a function when
  debugging a program with the optimization enabled.

[Specification Changes]
<PPU>
(B#35391)
- When a microcoded instruction is used in the loop invariant expression,
  and the -O3 is specified to compile the PPU program, the loop invariant 
  expression is moved outside the loop.

(B#2840)
- The global variable can be initialized by casting the pointer into the 
  64 bit type as follows:
  extern char foo[3];
  unsigned long long baz = (unsigned long long)&foo[3];

(B#43148)
- The array of a character type that is held in the stack is word aligned.

(B#40764)
The code, that is generated when it is converted from the signed int type into 
the float type, has been improved.

<SPU>
(B#40130)
- The instruction, that is added when the -fstack-check option is specified, 
  has been improved.

(B#42555)
- The code, that is generated by multiplying an integer constant, has been 
  improved.

<PPU/SPU>
(B#3357)
- The following expressions can be optimized:
  (Before optimization) Expression: (x | ~y) & y
  (After optimization)  Expression:  x & y
  
  (Before optimization) Expression: y & ~(y & -y)
  (After optimization)  Expression: y & (y-1)

(B#40127)
- Add -ftree-store-sink pass.  Disabled by default.  Attempts to move
  stores out of if statements possibly allowing the if statement to be
  converted to conditional moves.

(B#40127)
- Use a cost model for more effective auto-vectorization with
  -ftree-vectorize.  It is enabled by default when using
  -ftree-vectorize, and can be disabled with -fno-vect-cost-model.

(B#40127)
- The auto-vectorization will now try to vectorize outer loops.

(B#13291)
- The code, that is generated when a vector type variable is accessed as 
  a base type, has been improved as shown below:
  vector signed int v = ... ;
  ... = ((int *)&v)[2];

(B#39027)
- A feature not to add a directory, that is already contained in the 
  system  include directory, as a normal include directory when the -I 
  option is specified, has been made available in the Windows environment.
  Note that the upper cases and the lower cases are differentiated in the 
  path names.

(B#43590)
- When copying a structure as shown below, unnecessary load/store instructions
  are not generated.
  typedef unsigned long long U64;
  typedef unsigned int U32;
  typedef struct ColorF
  {
    float a, r, g, b;
  } ColorF __attribute__((aligned(16) ));
  
  void test( U32 count, ColorF* __restrict pInOut, ColorF color )
  {
    for (U64 i = 0; i < count; ++i) {
      ColorF &color_i = pInOut[i];
      color_i.a *= color.a;
      color_i.r *= color.r;
      color_i.g *= color.g;
      color_i.b *= color.b;
      pInOut[i] = color_i;
    }
  }

(B#43963)
- When the -dH option is specified, it core dumps even when an internal 
  compiler error occurs.

(B#43895)
- The language specification has been changed so that the typename keyword 
  can be also used outside the template.
  Please refer to the following URL for more details:
  http://www.open-std.org/JTC1/SC22/WG21/docs/cwg_defects.html#382

(B#40823)
- The followings are recognized as an extension of the C++ header:
  .hpp .hp .hxx .h++ .HPP .tcc

----------------------------------------------------------------------
GDB
----------------------------------------------------------------------
None

======================================================================
Bugfixes in Release 210.001
----------------------------------------------------------------------
SN Systems Linker
----------------------------------------------------------------------
(B#41637)
- The following problem has been fixed:
  - The following warning message is output because the SN Systems linker 
    cannot handle the DISCARD section correctly.

    warning: Section /DISCARD/ is not assigned to a loaded program header and will not be loaded

(B#44038)
- When the linker is booted with --oformat=elf specified to the SN linker 
  option, ppu-lv2-prx-fixup is called, whereas when --oformat=self is 
  specified, both ppu-lv2-prx-fixup and make_fself are called.
  When ppu-lv2-prx-fixup and make_fself are not found, a warning message 
  is sent, not an error message. This problem has been fixed.



(B#43748)
- The SN Linker provides an option that automatically generates a wrapper 
  function as follows:
  --wrap=<func name>
  When this function is enabled, the Linker generates symbols such as 
  __wrap_<func name> and __real_<func name>. 
  If this function is in use, it may enter into the infinite loop causing 
  a stack overflow. This problem has been fixed.

(B#43752)
- An unnecessary portion of a generated elf has been deleted to improve 
  the elf size.

(B#43755)
- An error occurs when the debug information is being stripped while 
  linking. This problem has been fixed.

(B#45525)
- The dead stripping feature works correctly even when "KEEP" is specified to
  the .opd section in the linker script. 

(B#41094)
- The following bug has been fixed.
  - The SN Systems linker for Linux does not run under Linux kernel 2.6.8
    or earlier versions. The following error occurs when linking a program.

    FATAL: kernel too old
    collect2: ld terminated with signal 11 [Segmentation fault]

(B#42756)
- The following bug has been fixed.
  Note that the fix is applied to the linker script in the SDK.
  - If your program relies on C++ exception handling it is necessary to
    use the GNU linker in place of the SN Systems linker by using the
    -mno-sn-ld switch.

(B#41339)
- The following bug has been fixed.
  - When using the SN Systems linker, the -muse-save-restore-funcs option 
    cannot be specified.

----------------------------------------------------------------------
GCC
----------------------------------------------------------------------
<other>
(B#41013)
- When a full path name of an executable is specified to the argument of
  ccache, a file that has an extension .exe is not searched. This 
  problem has been fixed.

<PPU>
(B#39900)
- In the program that uses the "visibility" argument, a link error occurs 
  when multiple TOCs are required at the time of linking. This problem
  has been fixed.

  extern void bar (void) __attribute__((visibility ("hidden")));
  void foo (void)
  {
    bar ();
    bar ();
  }

  Error displayed:
  sibling call optimization to `bar' does not allow automatic multiple TOCs;
  recompile with -mminimal-toc or -fno-optimize-sibling-calls, or make `foo' 
  extern

(B#11877)
- The extended mnemonics, the "mfctrl" and "mtctrl" instructions, are not 
  correctly assembled. This problem has been fixed.

(B#41018)
- When the VMX intrinsic function "vec_promote" is used, an internal 
  compiler error occurs. This problem has been fixed.

(B#30365)
- When the vector type is in use, it has been reduced in some cases to generate
  unnecessary store instructions that causes a LHS(Load Hit Store) hazard.

(B#3457/B#38340)
- When a PPU program is compiled in the Windows environment, a code that 
  supports the multi-thread environment is not generated. This problem has
  been fixed.

(B#3380/B#29246)
- When the "double" type is converted into the "long long" type, and then 
  converted back into the "double" type again, an unnecessary store 
  instruction is generated. This problem has been fixed.

(B#36916)
- When the following code is compiled, an unnecessary rldicl instruction 
  is output when compared to the GCC4.0.2. This problem has been fixed.


  int *f(int *a)
  {
    *a = 1;
    return a;
  }

(B#13982)
- The following bug has been fixed.
  - Even though a program such as the code in the example below is compiled
    with optimization enabled, unnecessary instructions may be output:

  Example)
  -- Program ---
     while(size>0){
         *(dst++) = *(src++);
         size--;
     }
  -- Assembly code ---
     ld 11,0(4)
     addi 0,3,8
     addi 9,4,8
     std 11,0(3)
     rldicl 3,0,0,32 <- Unnecessary
     rldicl 4,9,0,32 <- Unnecessary
     bdnz .L4
     blr"

(B#41278)
- The microcoded instruction "stswi" is generated even when the 
  -mno-gen-microcoded option is specified. This problem has been fixed.


(B#40058)
- The compilation time is 20 times more when compared with the GCC4.0.2. 
  This problem has been fixed.

(B#43007)
- When the following program is compiled using the -g -O1 option, an 
  internal compiler error occurs. This problem has been fixed.
  
  void f(float *p, char *q) {
     __builtin_memcpy( q, &p, 32 );
  }

(B#44203)
- A link error occurs in a PPU program that uses typeinfo objects for
  basic types when the program is compiled under the following condition.
  This program has been fixed:
  - An exception handling of the C++ is not used but the RTTI
    is used (the -fno-exceptions option is specified but the -fno-rtti
    option is not specified.).

(B#9347)
- The following bug has been fixed.
  - When a program such as the code in the example below is compiled with
  the optimization option set to -02 or more, it is less optimized
  than when gcc3.4 is used.

  Example)
  typedef union
  {
    float f[4];
    vector float vf;
  }
  Union128;
  vector float
  make_vector_from_float (float x, float y, float z, float w)
  {
    Union128 u;
    u.f[0] = x;
    u.f[1] = y;
    u.f[2] = z;
    u.f[3] = w;
    return u.vf;
  }

<SPU>
(B#41513)
- The number of shufb instructions has been reduced when they are used
  with the code that writes multiple bit fields at the same time.

(B#3364)
- The shift process is optimized when the same value is shifted with a 
  constant set to the shift count.

(B#42267)
- When a constant is specified to the argument of an SPU intrinsic, an 
  internal compiler error occurs. This problem has been fixed.

(B#42946)
- When a program is compiled in the Windows environment, an internal 
  compiler error occurs. This problem has been fixed.

(B#43153)
- When the -funroll-loops option is specified, an unnecessary branch hint 
  instruction is generated. This problem has been fixed.

(B#41786)
- When a value other than a constant is specified to the 
  argument of __builtin_expect and the option -fno-tree-ter is specified to 
  compile a program, an incorrect code is generated. This problem has been
  fixed.

<PPU/SPU)
(B#38341)
- When a program that uses a pre-compiled header is compiled with the 
  -save-temps and -fpch-deps options specified, an internal compiler error
  occurs. This problem has been fixed.

(B#39973)
- The following bug has been fixed.
  - Although the -save-temps-o option is specified when compiling a C++
    program, the process result(extension: .ii) is not saved.

(B#33817)
- When the toolchain that is placed in the current directory is booted, 
  an internal compiler error occurs. This problem has been fixed.

(B#35159)
- Some unnecessary instructions are no longer created when a structure type
  is passed as an argument.

(B#36667)
- When VectorMath is used, a code may not be optimized with GCC411 as much
  as it is with GCC402. This problem has been fixed.

(B#24159)
- The following bug has been fixed.
  - Among the C++ anonymous namespaces, debug information cannot be correctly
    created for the enum type.

(B#43219)
- When a constant suffix is set to the vector type as shown below, an 
  internal compiler error occurs. This problem has been fixed.

  struct T {
    vector float v;
    float& operator[](int i) { return v[i]; }
  };
  
  float g(T& val) { return val[0]; }

(B#37201/B#41012)
- When a C++ program that initializes an array element with the vector 
  literal is compiled using the -Wall option, a warning is displayed. This
  problem has been fixed.
  
  vector signed int v[] = {(vector signed int){1,2,3,4}};

(B#41261)
- The following bug has been fixed.
  - When a response file is used on Linux, it ends in error when being 
    linked.

(B#20822)
- When the -g -O2 option is specified, incorrect debug information on a 
  local variable is provided. This problem has been fixed.

(B#7672/B#1093/B#1139)
- When the -fprofile-generate option is specified, an error is displayed 
  when linking. This problem has been fixed.

(B#23547)
- The following bug has been fixed.
  - Among the C++ class definitions, debug information cannot be correctly
    created for those onto which typedef has been performed.

(B#44006)
- When a local variable of an "union" type is used, an internal compiler 
  error occurs. This problem has been fixed.

(B#44091)
- Definitions in vec_types.h (used by spu2vmx.h and vmx2spu.h) and
  spu_intrinsics.h have been modified so as not to compete with the
  STL's vector type.

(B#34717)
- When an array element that is a local variable is initialized with the 
  vector literal as shown below, a slow code is generated. This problem 
  has been fixed.

  void f() {
    vector signed int v[] = {(vector signed int){1,2,3,4}};
    ...
  }

----------------------------------------------------------------------
GDB
----------------------------------------------------------------------
None

