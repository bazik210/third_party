[SCE CONFIDENTIAL DOCUMENT]
PLAYSTATION(R)3 Programmer Tool Toolchain 210.001(based on GCC 4.1.1)
                    Copyright(C) 2007 Sony Computer Entertainment Inc.
                                                  All Rights Reserved.
======================================================================
以下にPLAYSTATION(R)3 Reference Tool ツールチェーンパッケージの変更点と
不具合修正を記述します。

- Release 210.001 の変更点
- Release 210.001 の不具合修正

======================================================================
Release 210.001 の変更点
----------------------------------------------------------------------
SN Systems社製リンカ
----------------------------------------------------------------------
なし

----------------------------------------------------------------------
GCC
----------------------------------------------------------------------
<SPU>
(B#40333)
- コンパイラとアセンブラに、-mwarn-stop0オプションを追加しました。
  このオプションを使用すると、stop命令のオペランドが0の場合に警告を表示
  します。

<PPU/SPU共通>
(#B40580)
- 最適化をオンにしてプログラムをデバッグする際に、関数のプロローグまたは
  エピローグ向けに追加のデバッグ情報を出力するための、
  -fdebug-prologue-epilogueオプションを追加しました。

[仕様変更]
<PPU>
(B#35391)
- ループ不変式にマイクロコード化命令が使われている場合に、-O3オプション
  を指定してコンパイルすると、そのループ不変式をループの外に移動するよう
  になりました。

(B#2840)
- 以下のようにポインタを64ビットの型にキャストして、その型のグローバル
  変数の初期化に使用することができるようになりました。
  extern char foo[3];
  unsigned long long baz = (unsigned long long)&foo[3];

(B#43148)
- スタックに確保される文字型の配列をワードアラインするようにしました。

(B#40764)
- signed int型からfloat型への変換の際に生成されるコードを改良しました。

<SPU>
(B#40130)
- -fstack-checkオプションで追加される命令を改良しました。

(B#42555)
- 整数定数による乗算で生成されるコードを改良しました。

<PPU/SPU共通>
(B#3357)
- 以下の式を最適化できるようにしました。
  (最適化前)式 (x | ~y) & y
  (最適化後)式 x & y
  
  (最適化前)式 y & ~(y & -y)
  (最適化後)式 y & (y-1)

(B#40127)
- -ftree-store-sinkオプションを追加しました。
  デフォルトでは無効になっています。
  ストア命令をif文の外に移動することにより、できるだけif文を条件つき
  move命令に変換します。

(B#40127)
- -ftree-vectorizeオプションで実行される自動ベクトル化をより効果的に
  するためのコストモデルを使用するようになりました。
  -ftree-vectorizeオプションを指定するとデフォルトで有効になりますが、
  -fno-vect-cost-modelオプションで無効にすることができます。

(B#40127)
- 自動ベクトル化の際に最内側でないループもベクトル化するようになりました。

(B#13291)
- 以下のようにベクタ型の変数をベース型でアクセスする場合に生成される
  コードを改良しました。
  vector signed int v = ... ;
  ... = ((int *)&v)[2];

(B#39027)
- システムインクルードディレクトリにすでに含まれているディレクトリを
  -Iオプションで指定すると、通常のインクルードディレクトリとしては追
  加されないようにする機能が、Windows環境でも働くようになりました。
  ただし、パス名の大文字小文字は同一視されません。

(B#43590)
- 以下のように構造体のコピーをしている場合に、無駄なロード・ストア命令
  が生成されないようにしました。
  typedef unsigned long long U64;
  typedef unsigned int U32;
  typedef struct ColorF
  {
    float a, r, g, b;
  } ColorF __attribute__((aligned(16) ));
  
  void test( U32 count, ColorF* __restrict pInOut, ColorF color )
  {
    for (U64 i = 0; i < count; ++i) {
      ColorF &color_i = pInOut[i];
      color_i.a *= color.a;
      color_i.r *= color.r;
      color_i.g *= color.g;
      color_i.b *= color.b;
      pInOut[i] = color_i;
    }
  }

(B#43963)
- -dHオプションを指定すると、internal compiler errorが発生した際にも
  コアダンプを行うようにしました。

(B#43895)
- テンプレートの外でもtypenameキーワードを使用できるように言語仕様を
  変更しました。
  詳細は以下のURLを参照して下さい。
  http://www.open-std.org/JTC1/SC22/WG21/docs/cwg_defects.html#382

(B#40823)
- C++ヘッダの拡張子として以下も認識されるようになりました。
  .hpp .hp .hxx .h++ .HPP .tcc

----------------------------------------------------------------------
GDB
----------------------------------------------------------------------
なし


======================================================================
Release 210.001 の不具合修正
----------------------------------------------------------------------
SN Systems社製リンカ
----------------------------------------------------------------------
(B#41637)
- 以下の不具合を修正しました。
  - SN Systems社製リンカが正しくDISCARDセクションをハンドリング出来て
    いない為、以下のようなwarningが出力されます。

    warning: Section /DISCARD/ is not assigned to a loaded program header and will not be loaded

(B#44038)
- SNリンカのオプションに--oformat=elfというオプションを指定してリンカを起動
  するとppu-lv2-prx-fixupが呼ばれ、--oformat=selfというオプションを指定して
  起動するとppu-lv2-prx-fixupとmake_fselfの両方が呼ばれます。
  しかし、ppu-lv2-prx-fixup及びmake_fselfが見つからなかった場合にエラーでは
  なくワーニングメッセージを出力していた不具合を修正しました。

(B#43748)
- SNリンカには、ラッパー関数を自動生成するオプションがあります。
  --wrap=<func name>
  この機能を有効にするとリンカは__wrap_<func name>と__real_<func name>という
  シンボルを生成します。
  この機能を使っていた際に関数内にて無限ループに入ってしまうことがあり、結果
  としてスタックオーバーフローを引き起こす事があった不具合を修正しました。

(B#43752)
- 生成されるelfに不必要な部分があった為、削除を行うようにしてelfのサイズを
  改善しました。

(B#43755)
- リンク時にデバッグ情報をストリップしようとするとエラーが発生する不具合を修正
  しました。

(B#45525)
- リンカスクリプトで.opdセクションにKEEPが指定されていても、dead stripping
  機能が正しく働くようにしました。

(B#41094)
- 以下の不具合を修正しました。
  - Linux版のSN System社製のリンカは、Linuxカーネル 2.6.9 以前の環境では
    動作しません。プログラムをリンクする際に次のようなエラーが発生します。

    FATAL: kernel too old
    collect2: ld terminated with signal 11 [Segmentation fault]

(B#42756)
- 以下の不具合を修正しました。
  なお、これはSDK側のリンカスクリプトの修正です。
  - プログラムがC++の例外処理を使用している場合、-mno-sn-ldオプションを
    指定して、SN Systems製リンカの代わりにGNUリンカを使用する必要があり
    ます。

(B#41339)
- 以下の不具合を修正しました。
  - SN Systems社製リンカを使用する場合、-muse-save-restore-funcsオプションは
    使用できません。

----------------------------------------------------------------------
GCC
----------------------------------------------------------------------
<other>
(B#41013)
- ccacheの引数に実行ファイル名をフルパスで指定すると、拡張子.exeを追加
  したファイルを検索しないという不具合を修正しました。

<PPU>
(B#39900)
- 以下のようにvisibility属性を使用するプログラムが、リンク時に複数の
  TOCが必要になると、リンクエラーになるという不具合を修正しました。

  extern void bar (void) __attribute__((visibility ("hidden")));
  void foo (void)
  {
    bar ();
    bar ();
  }

  表示されるエラー:
  sibling call optimization to `bar' does not allow automatic multiple TOCs;
  recompile with -mminimal-toc or -fno-optimize-sibling-calls, or make `foo' extern

(B#11877)
- 拡張ニーモニックであるmfctrl命令とmtctrl命令が正しくアセンブルされ
  ないという不具合を修正しました。

(B#41018)
- VMX組み込み関数のvec_promoteを使用すると, internal compiler errorが
  発生するという不具合を修正しました。

(B#30365)
- ベクタデータ型を使用している場合に、LHS（Load Hit Store）ハザードを
  起こすような無駄なストア命令の生成を一部抑止しました。

(B#3457/B#38340)
- Windows環境でコンパイルするとマルチスレッド環境に対応したコードが生成
  されない場合があるという不具合を修正しました。




(B#3380/B#29246)
- double型をlong long型に変換して再びdouble型に変換すると、無駄なストア
  命令が生成されるという不具合を修正しました。

(B#36916)
- 以下のようなコードをコンパイルすると、GCC4.0.2と比べて余計なrldicl命令が
  出力されるという不具合を修正しました。

  int *f(int *a)
  {
    *a = 1;
    return a;
  }

(B#13982)
- 以下の不具合を修正しました。
  - 例のコードのようなプログラムを最適化してコンパイルしたにも関わらず、
    不要な命令が出力される場合があります。

 例)
 -- プログラム ---
    while(size>0){
        *(dst++) = *(src++);
        size--;
    }
 -- アセンブリコード ---
    ld 11,0(4)
    addi 0,3,8
    addi 9,4,8
    std 11,0(3)
    rldicl 3,0,0,32 <- 不要
    rldicl 4,9,0,32 <- 不要
    bdnz .L4
    blr"


(B#41278)
- -mno-gen-microcodedオプションが指定されているにもかかわらずマイクロ
  コード化命令であるstswi命令が生成されるという不具合を修正しました。


(B#40058)
- GCC4.0.2と比べてコンパイル時間が20倍以上かかることがあるという不具合を
  修正しました。

(B#43007)
- 以下のプログラムを-g -O1オプションをつけてコンパイルすると
  internal compiler errorが発生するという不具合を修正しました。
  
  void f(float *p, char *q) {
     __builtin_memcpy( q, &p, 32 );
  }

(B#44203)
- C++の例外処理を使用しないがRTTIは使用する(-fno-exceptionsオプションを指定、
  -fno-rttiオプションを指定しない)ようにコンパイルすると、基本型（basic type）
  のtypeinfoオブジェクトを使用するプログラムでリンクエラーが発生するという不
  具合を修正しました。

(B#9347)
- 以下の不具合を修正しました。
  - 例のコードのようなプログラムを、-O2以上の最適化オプションをつけて
    コンパイルした結果が、gcc3.4でコンパイルした結果に比べて最適化されません。

  例)
  typedef union
  {
    float f[4];
    vector float vf;
  }
  Union128;
  vector float
  make_vector_from_float (float x, float y, float z, float w)
  {
    Union128 u;

    u.f[0] = x;
    u.f[1] = y;
    u.f[2] = z;
    u.f[3] = w;
    return u.vf;
  }

<SPU>
(B#41513)
- 複数のビットフィールドに同時に書き込むコードで使われるshufb命令の
  数を減らしました。

(B#3364)
- シフトカウントが定数のシフトを同じ値に続けて行う場合に、最適化され
  るようになりました。

(B#42267)
- SPU組み込み関数の引数に定数を使用すると、internal compiler errorが
  発生することがあるという不具合を修正しました。

(B#42946)
- Windows環境でコンパイルするとinternal compiler errorが発生することが
  あるという不具合を修正しました。

(B#43153)
- -funroll-loopsオプションを指定すると、余計な分岐ヒント命令が生成される
  ことがあるという不具合を修正しました。

(B#41786)
- __builtin_expectの引数に定数以外を指定し、-fno-tree-terオプションを
  つけてコンパイルすると、誤ったコードを生成するという不具合を修正しま
  した。

<PPU/SPU)
(B#38341)
- プリコンパイルヘッダを使用しているプログラムを、-save-tempsオプション
  と-fpch-depsオプションをつけてコンパイルすると、internal compiler error
  が発生することがあるという不具合を修正しました。

(B#39973)
- 以下の不具合を修正しました。
  - C++プログラムのコンパイル時に-save-temps-oオプションを指定しても、
    プリプロセス結果(拡張子.ii)が保存されないという不具合があります。

(B#33817)
- ツールチェーンをカレントディレクトリに置いて起動すると、
  internal compiler errorが発生することがあるという不具合を修正しました。

(B#35159)
- 構造体型を引数として渡したときに生成される無駄な命令を一部抑止しました。


(B#36667)
- VectorMathを使用すると、GCC411のほうがGCC402よりコードが最適化されな
  いことがあるという不具合を修正しました。

(B#24159)
- 以下の不具合を修正しました。
  - C++のanonymous namespacesにおいて、enum型に対するデバッグ情報が生成
    されないという不具合があります。

(B#43219)
- 以下のようにベクタデータ型に対して定数値の添え字を使用すると、
  internal compiler errorが発生するという不具合を修正しました。

  struct T {
    vector float v;
    float& operator[](int i) { return v[i]; }
  };
  
  float g(T& val) { return val[0]; }

(B#37201/B#41012)
- 以下のように配列要素をベクタリテラルで初期化するC++プログラムを
  -Wallオプションをつけてコンパイルすると警告が表示されるという不具合を
  修正しました。
  
  vector signed int v[] = {(vector signed int){1,2,3,4}};


(B#41261)
- 以下の不具合を修正しました。
  - Linux環境でレスポンスファイルを使用すると、リンク時にエラーになり
    ます。

(B#20822)
- -g -O2オプションを指定すると、ローカル変数に対するデバッグ情報が誤って
  いるという不具合を修正しました。

(B#7672/B#1093/B#1139)
- -fprofile-generateオプションを使用するとリンク時にエラーが表示される
  という不具合を修正しました。

(B#23547)
- 以下の不具合を修正しました。
  - C++のクラス定義の中でtypedefを行った型に対して、デバッグ情報が正しく
    生成されないという不具合があります。

(B#44006)
- union型のローカル変数を使用するとinternal compiler errorが発生すること
  があるという不具合を修正しました。

(B#44091)
- spu2vmx.hおよびvmx2spu.hで使用しているvec_types.h、そしてspu_intrinsics.h
  中の定義を修正し、STLのvector型と競合しないようにしました。

(B#34717)
- 以下のようにローカル変数である配列の要素をベクタリテラルで初期化すると、
  遅いコードが生成されるという不具合を修正しました。

  void f() {
    vector signed int v[] = {(vector signed int){1,2,3,4}};
    ...
  }

----------------------------------------------------------------------
GDB
----------------------------------------------------------------------
なし

