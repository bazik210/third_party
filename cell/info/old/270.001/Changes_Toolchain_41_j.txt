[SCE CONFIDENTIAL DOCUMENT]
PLAYSTATION(R)3 Programmer Tool Toolchain 270.001
                    Copyright(C) 2009 Sony Computer Entertainment Inc.
                                                  All Rights Reserved.
======================================================================
以下にPLAYSTATION(R)3 Reference Tool ツールチェーンパッケージの変更点と
不具合修正を記述します。

- Release 270.001 の変更点
- Release 270.001 の不具合修正

======================================================================
Release 270.001 の変更点
----------------------------------------------------------------------
SN Systems社製リンカ
----------------------------------------------------------------------
[新規追加]
(B#64647)
- -sスイッチ(すべてのシンボルをストリップ)を使うと、リンカは最終出力から
  .debug_libgen_markfuncセクションもストリップするようになりました。

(B#64872)
- --no-exceptionsを指定した例外なしビルドでのデッドストリッピングを
  改良しました。バージョン250.1では、例外処理のデータはストリッピングの
  効率に悪影響がありました。今回からリンカは--no-exceptionsを指定すると
  不要な例外処理データも除去するようになり、その結果以前より効率よく
  デッドストリッピングができるようになりました。

(B#65265)
- マージ可能とマークされたセクションのデータ要素の重複除去を実装しました。

[仕様変更]
(B#59683)
- リンカは.tocセクションがないことそれ自体をエラーとはみなさなくなりました。
  その代わり、TOC相対リロケーションを見つけたにもかかわらず.tocセクションが
  定義されていない場合にエラーを発行するようになりました。

- --Wallの出力がより多弁になるように拡張しました。望まない警告は、
  コマンドラインの--Wallの後で--disable-warningスイッチを渡すことで
  無効にできます。

[不具合修正]
(B#54148)
- デッドストリッピングが有効なときにローカルシンボルの処理に問題があって
  'could not make reference to local symbol "x"' というエラーが出ていたのを
  修正しました。

(B#55109)
- コマンドラインで指定したファイルが、リンカスクリプトのREQUIRED_FILES要素
  でも指定されていると、リンクエラーになるという不具合を修正しました。

(B#56590)
- COMDAT関数の別々のインスタンスをリンクするときの例外処理テーブルの
  問題を、破棄されたインスタンスに対する.eh_frameを無効にすることで、
  修正しました。

(B#58324)
- R_PPC64_ADDR16_LO_DSリロケーションの処理で、周辺のコードが破壊される、
  またはリロケートされた値が不正になる場合があるという不具合を修正しました。

(B#58495)
- デッドストリッピングを有効にしたときにまれにクラッシュする場合がある
  という不具合を修正しました。

(B#60599)
- 「TOC復元なし」モードでPRXスタブのコード列のパッチを行った後で、
  その新しく、大きくなった実装のサイズを反映するように、対応するシンボルの
  サイズをリンカが変更するようにしました。

(B#61349)
- ある条件下でのリロケータブル出力の作成時に、「patch value out of range」
  という誤ったエラーが出る不具合を修正しました。

(B#62396)
- リンカはリロケータブル出力中の64ビットの加数を32ビットに切り捨てないように
  なりました。以前はシンボルからの負のオフセットを含むリロケータブル
  オブジェクトを使用すると、リンク時または実行時に予期しない失敗が起きていました。

(B#63531)
- リンカスクリプトのfillディレクティブで導入されるパディングを変更し、
  デフォルトで4バイトを使用するようにしました(GNUリンカのドキュメントのとおり)。

(B#63645)
- --pad-debug-lineの値が大きすぎるときにまれにストリップが失敗することが
  あるのを修正しました。失敗するとリンカは--pad-debug-lineを
  指定するべきであると報告します。

(B#64435)
- --sn-no-dtorsスイッチの振る舞いを修正しました。

----------------------------------------------------------------------
GCC
----------------------------------------------------------------------
[新規追加]
<PPU/SPU共通>
(B#64304)
- try/catch/throwが使われたときにエラーにするのではなく無視するための、
  オプション-fignore-exceptionsを追加しました。-fignore-exceptionsは、
  -fno-exceptionsといっしょに使う必要があります。

(B#62999)
- 引数の長さが32KBを超える場合、-use-response-fileオプションが自動的に
  使われるようになりました。(Windowsのみ)

<PPU>
(B#46960)
- wprintfのフォーマットチェック機能のサポートを追加しました。

(B#57983)
- 新しいオプション-mcallprof=<n>を実装しました。このオプションは、
  実行時にSN Tunerがプロファイリングコードに置き換えるための、
  追加のnopを挿入するように、PPU GCCに指示します。
  SDK270では、-mcallprof=1のみが使用可能で、SN Tunerの関数プロファイリングを
  有効にします。詳細はSN Tunerのドキュメントを参照してください。

[仕様変更]
<PPU/SPU共通>
(B#65985)
- CIL(Code Instrumentation at Link-Time)の提供を終了しました。
  技術情報200811-20も参照してください。

    https://ps3.scedev.net/technotes/view/848

<PPU>
(B#57944)
- cell\target\ppu\include に存在した ppu_intrinsics_gcc.h は、
  ppu_intrinsics.h として
  cell\host-win32(/host-linux)\ppu\lib\gcc\ppu-lv2\4.1.1\include 以下に
  移動しました。
  また、ppu_intrinsics_snc.h は、ppu_intrinsics.h として SNCパッケージの
  cell\host-win32(/host-linux)\sn\ppu\include以下に移動しました。

  cell\target\ppu\include に存在した ppu_intrinsics.h は削除されました。

  コンパイラは ppu_intrinsics.h を含むディレクトリを自動的に検索しますので、
  ppu_intrinsics.h をインクルードしているソースファイルを変更する必要は
  ありません。
  ppu_intrinsics_(gcc/snc).h を直接インクルードしていた場合には、
  ppu_intrinsics.hをインクルードするように変更して下さい。

  技術情報200811-10も参照してください。
    https://ps3.scedev.net/technotes/view/837

(B#59029)
- CTRレジスタを使うループを生成する際に、GCCが余計な命令(加算と減算)を
  生成する場合があったので、これを修正しました。


(B#59119)
- 整数をdoubleに変換するためにGCCが余計な命令をいくつか出力する
  場合があったので、これを修正しました。

(B#62513)
- フィールドに一つの型だけを持つ共用体でLHS（Load Hit Store）
  ハザードが起きていたので、起きないようにしました。

(B#54987)
- 値渡しの構造体をインライン関数で使うと余計なロード・ストアが
  発生していました。このロード・ストアを取り除き、LHS（Load Hit Store）
  ハザードが起きないようにしました。

(B#62754)
- 値渡しの、配列を含む構造体をインライン関数で使うと余計な
  ロード・ストアが発生していました。このロード・ストアを取り除き、
  LHS（Load Hit Store）ハザードが起きないようにしました。

(B#63329)
- ある場合にGCCは、浮動小数点定数0.0fをロードしようとして
  LHS（Load Hit Store）ハザードを起こしていました。
  これを修正し、定数をメモリから直接読むようにしました。

(B#63471)
- ベクタレジスタ間の値の移動にはvor命令を生成していましたが、
  vsldoi命令を使うように変更しました。
  vsldoiはvector permute VSU type 2命令で、vorとは異なり、
  LSU命令と同時にスケジュール可能です。

(B#46814)
- vec_splatは第二引数に定数以外も受け付けるようになりました。

(B#64010)
- GCCは定数との浮動小数点乗算を、その定数を使わないように最適化する
  場合がありますが、-mbase-tocまたは-mall-base-tocを使うとそのような
  最適化をしていなかったので、最適化するように修正しました。

(B#64247)
- vec_lvlx (0, &scalar)のように、vec_lvlxの引数にアドレスを与えると、
  単にvec_promote (scalar, 0)を行うコードに最適化されるようにしました。

(B#56399)
- -Osつきでコンパイルすると、キャッシュ禁止メモリをアクセスする
  場合にハードウェア例外を発生させるようなコードを生成するという
  不具合を修正しました。

<SPU>
(B#59949)
- LRレジスタのロードを早めることで性能の小さな改善を行いました。

(B#59948)
- 浮動小数点の比較と絶対値演算をマージしてfcmeq命令を生成するようにしました。

(B#50837)
- チャネル命令が効率よくスケジュールされない場合があったので修正しました。

(B#61722)
- グローバルコンストラクタ、グローバルデストラクタの解決のためのコードが、
  グローバルコンストラクタ/デストラクタを持たない実行ファイルにもリンク
  されていました。これを修正しました。

(B#62450)
- SPUツールチェーンで-fpicおよび-sharedオプションは、デフォルトで
  リロケーション解決システムを有効にするようにしました。SDK270からは、
  グローバルコンストラクタ、グローバルデストラクタ、仮想関数呼び出しは、
  ユーザ独自のリロケーション解決システムを実装しなくても期待通りの動作を
  するようになります。
  副作用として、-fpicおよび-sharedオプションをつけてコンパイルした
  プログラムのサイズが増加します。大きなコードサイズが許容できない場合は、
  -mno-fixupsオプションを指定することで、実行ファイルからリロケーション
  解決システムを削除できます。


[不具合修正]
<PPU/SPU共通>
(B#2966)
- ccacheまたは-save-tempsを使うと、デバッグ情報のAT_comp_dir属性が
  クオートされたバックスラッシュを扱えないという不具合を修正しました。

(B#60138)
- AND演算のオペランドがNOT演算の場合に誤った最適化を行う不具合を修正しました。

(B#41288)
- -use-response-fileを使うと次のようなエラーが発生していました。
    Command line : error: L0039: reference to undefined symbol se-response-file in file Command line option
  -use-response-fileオプションをリンカに渡すのをやめることにより、
  この不具合を修正しました。

  注意: SN linkerは-use-response-fileオプションを実装していません。

(B#63621)
- プリコンパイルヘッダは-fno-strict-aliasing付きでコンパイルされていないのに、
  ソースは-fno-strict-aliasing付きでコンパイルされていると、GCCは次のような
  internal compiler errorを生成していました。

    internal compiler error: in mems_in_disjoint_alias_sets_p, at alias.c:288

  このような場合はプリコンパイルヘッダを使わないように修正しました。

(B#63264)
- プリコンパイルヘッダを2回includeすると、internal compiler errorが
  発生するという不具合を修正しました。


(B#57645)
- -traditional-cppをつけてコンパイルすると、プリプロセッサ指令の後に
  C++形式のコメントがある場合にコンパイラがクラッシュするという不具合を修正しました。

(B#64678)
- -fnon-call-exceptionsを使っているときに、ベクタ浮動小数点型または
  複素浮動小数点型に対する浮動小数点演算を誤って削除するという不具合を
  修正しました。

<PPU>
(B#61182)
- スタックサイズが大きいコードでベクタ型を使うと次のような
  internal compiler errorが発生する場合があるという不具合を修正しました。

  "filename(linenum): error: unrecognizable insn: (insn N N N
   filename:linenum (set (mem:V4SI (plus:DI (reg:DI N )
                                            (const_int N))
                         (reg:V4SI 3122)))".

(B#62484)
- 32ビット乗算で32ビットの0との比較が必要な場合に、-Osオプションで
  recordingつきワード乗算(mullw.)命令を生成する場合があるという
  不具合を修正しました。

(B#63702)
- PPU組み込み関数__protected_unlimited_stream_setと
  __protected_stream_setは__dcbt_TH1000のUG引数に誤った値を渡しており、
  入れ替わっていました。これを修正しました。

  詳細は技術情報200903-02を参照してください。
    https://ps3.scedev.net/technotes/view/881

(B#64919)
- vec_splatsに整数定数を引数として与えると、返される値が正しくない
  という不具合を修正しました。詳細は技術情報200902-08を参照してください。

    https://ps3.scedev.net/technotes/view/874

(B#65524)
- long longの定数との論理and演算で、次のようなinternal compiler errorが
  起きるという不具合を修正しました。

    internal compiler error: in extract_insn, at recog.c:2087

(B#56626)
- SDK250で、C++の例外処理でメモリリークが起きることがあるという不具合を
  修正しました。この修正により、ライブラリlibsupc++.aは
  TLS(Thread Local Storage)を使用するようになりました。既知の不具合・
  制限事項のB#65220も参照してください。

<SPU>
(B#58265)
- 組み込み関数spu_convtf、spu_convts、またはspu_convtuを、第二引数を定数以外で
  呼び出すと次のようなnternal compiler errorが起きるという不具合を修正しました。

  ../../../../lib/spu/maths/vmath.h:482: internal compiler error: in extract_insn, at recog.c:2087

(B#3291)
- ゼロ拡張演算が最適化されない場合があるという不具合を修正しました。

(B#58677)
- すべての関数がsection attributeを持つファイルを、"-g -Wl,-q"オプションを
  つけてコンパイルすると、リンカが"elflink.c:7396"で異常終了するという
  不具合を修正しました。

(B#63867)
- リンカスクリプトまたは--defsymオプションで定義されたシンボルに対する
  リロケーション解決用のデータが生成されないという不具合を修正しました。

(B#66357)
- restrictキーワードがインラインされる複数の関数で使われると、
  メモリアクセスが誤って順序付けされるという不具合を修正しました。

(B#16434)
- attribute((always_inline))が-fpicオプションの有無で不整合になる不具合を
  修正しました。
  注意: 関数にalways_inline属性をつける場合、関数定義の前ではなく、
  関数プロトタイプにつけてください。前者の方法では、-fpicオプションで
  インラインの結果が変わります。

    NG:
      __attribute__ ((always_inline)) int foo () {
          ...
      }

    OK:
      int foo () __attribute__ ((always_inline));
      int foo () {
          ...
      }

(B#65818)
- SPU DLLのR_SPU_ADDR18リロケーションは、実行時の解決で正しい値に
  ならないという不具合を修正しました。
