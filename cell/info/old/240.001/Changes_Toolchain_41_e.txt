[SCE CONFIDENTIAL DOCUMENT]
PLAYSTATION(R)3 Programmer Tool Toolchain 240.001
                    Copyright(C) 2008 Sony Computer Entertainment Inc.
                                                  All Rights Reserved.
======================================================================
The following are the new features and fixed bugs of PLAYSTATION(R)3 
Programmer Tool Toolchain package. 

- Additions of new features and changes in Release 240.001
- Bugs fixed in Release 240.001

======================================================================
New Additions and Changes in Release 240.001
----------------------------------------------------------------------
SN Systems Linker
----------------------------------------------------------------------
(B#47042)
- Added support for the GNU "--target-help" switch.

(B#48517)
- Implemented GNU ld-style pseudo-symbols for ELF section beginnings
  and end, which are instantiated if an undefined reference is found.
  If you use symbols named "__start_XXX" or "__stop_XXX", the linker
  will synthesize the address of a section named "XXX". The only
  restriction is that the section name must be representable as a C
  name (i.e. alpha numeric characters and underscores).

  Example:

  #include <stdio.h>
  #include <stdlib.h>

  #define SECTION(x)  __attribute__ ((section (x)))

  int bar_var_1 SECTION ("bar");
  int bar_var_2 SECTION ("bar");

  /* symbols generated by the linker! */
  extern void * __start_bar;
  extern void * __stop_bar;

  int main ()
  {
     printf ( "__start_bar=%p, &bar_var_1=%p, &bar_var_2=%p __stop_bar=%p\n",
              &__start_bar, &bar_var_1, &bar_var_2, &__stop_bar
            );
     return EXIT_SUCCESS;
  }

(B#50175)
- Implemented further section-start and -stop pseudo-symbols.
  If the linker sees a section whose name starts with '.' but is
  otherwise a valid C-identifier, it will speculatively generate
  symbols that mark the beginning and end of that section. If
  unresolved references to these symbols are found within the linker
  inputs, the generated symbols will be defined in the linker output
  individually and the references will be resolved to point to them.
  The symbol names are created by replacing the leading '.' with the
  sequence '_Z' and prefixing the modified section name with
  '__start_' or '__stop_'. (For example, the start of the .text
  section would be indicated by __start__Ztext.)

  Example:

  #include <stddef.h>

  extern const unsigned char __start__Ztext [];
  extern const unsigned char __stop__Ztext [];

  ptrdiff_t size_of_dot_text (void)
  {
      return &__stop__Ztext [0] - &__start__Ztext [0];
  }

(B#46925)
- Added support for creating "PRX with runtime". Added a new switch
  --prx-with-runtime which, when combined with --oformat=prx/sprx
  enables linking with the C runtime library.
  Added -mprx-with-runtime for compatbility with GCC.

(B#47101)
- Added support for creating signed ELF files directly within the
  linker. This internal process avoids the time taken by the
  make_fself tool to make a copy of the linker's final ELF file.
  To use the built-in signed ELF support, you can use on
    --oformat=fself :
      Tells the linker to directly generate a signed output file.
    --oformat=fself_npdrm :
      Tells the linker to directly generate signed output for
      a network game.
    --external-make-fself :
      When used, tells the linker to use the original SCE
      make_fself/make_fself_npdrm tool rather than the internal
      process.

(B#48512)
- Added support for #pragma comment (lib, ...) in the SN toolchain.

(B#49415)
- Implemented FSELF SHA-1 digests. (By default, this functionality is
  disabled. It is enabled using the --write-fself-digest switch.)

(B#51507)
- Added support for the --ppuguid and --no-ppuguid switches.
  When --ppuguid is used, this switch adds a PPU GUID entry to the
  final output. The default behaviour is to not create the PPU GUID.

- Added support for de-duplication of code and read-only data.
  This is enabled with the --strip-duplicates switch in conjunction
  with --strip-unused or --strip-unused-data.

- Added --pad-debug-line=X switch to allow slack in the layout for
  cases where .debug_line data expands.

[Specification Changes]

(B#46171)
- Wrapped symbol names within double-quotation marks when reporting
  undefined symbols. This is intended to more closely match the format
  of messages issued by GNU ld.

(B#47989)
- Eliminated duplicated files from the command line.
  If a user specifies the same object file or static library, the
  linker creates multiple copies of all of the memory used to manage
  the file: in the case of a large static library, this can be a great
  deal of duplicated memory and incurs a time penalty whilst the
  linker repeatedly scans the input file.
  Since this represents different behaviour from the GNU linker, added
  a switch "--no-remove-duplicate-inputs" to revert to the original
  behaviour.

- Reduced memory consumption when linking code that makes heavy use of
  "comdat" sections.

----------------------------------------------------------------------
GCC
----------------------------------------------------------------------
<PPU/SPU>

(B#44753)
- When an internal compiler error occurs, the compiler automatically
  generates a preprocessed source.

(B#47039)
- A new option -Wframe-larger-than= was added to warn about large
  stack usage while compiling.

<PPU>

(B#50260)
- A new linker option '-mppuguid' has been added to embed PPU GUID.
  If an ELF file or a PRX file is built with this option, a symbol
  __PPU_GUID is defined and PPU GUID is embeded.

[Specification Changes]

<PPU/SPU>

(B#47161)
- The warning about an empty body in an if-statement was only being
  emitted by the C front-end, this has changed to be emitted by the
  C++ front-end also.

(B#47622)
- Remove debug information for unused functions and variables. This
  can be disabled with -fno-eliminate-unused-debug-declarations.

(B#48820)
- Static variables without initial values were not fully optimized
  away even if they were not set in any function.
  This has been changed so they are now optimized away, because they
  are implicitly initialized to 0.

(B#49047)
- Taking the address of a vector variable and casting it to a pointer
  to a struct and then using the only vector field was producing an
  extra store and load. This has been fixed.

 For example,

    struct A
    {
      vector float f;
    };

    struct A func(vector float f)
    {
      return *(struct A*)&f;
    }

 will now generate

    .func:
        rldicl 9,3,0,32
        mr 3,9
        stvx 2,0,9
        blr

 instead of

    .func:
        addi 9,1,64
        addi 10,1,64
        rldicl 9,9,0,32
        rldicl 11,3,0,32
        mr 3,11
        stvx 2,0,10
        lvx 0,0,9
        stvx 0,0,11
        blr

(B#51736)
- With -Os, functions with little more than a division were not being
  inlined causing an increase in code size.
  This has been changed so that the cost of a division is the same as
  the cost of other instructions.

(B#51861)
- At -O0, some static const values were not being optimized away when
  used with ?: operator. This has been changed.

(B#52505)
- int[vector] was being accepted by the C front-end. This has been
  fixed. The C++ front-end was already rejecting it.

<PPU>

(B#41204)
- Some small structs copies (that don't have a copy constructor or
  a operator=) caused a Load Hit Store Hazard (LHS) issue to happen.
  This has been now changed so the struct copies will no longer cause
  a LHS issue.

(B#46721)
- The link register was being saved unnecessarily when vector
  registers were saved to the stack. This has been fixed.

(B#47569)
- ppu-lv2-objcopy and ppu-lv2-strip commands are modified so that
  'empty loadable segment' warnings are suppressed while PPU binaries
  are processed.

(B#47617)
- Since libsnc.a is now implicitly linked if it exists, the following
  limitation has been resolved:
  - If you link object files output from SN Systems compiler (SNC) by
    GCC's compiler driver, explicitly link the following library
    included in SNC.
    host-win32\sn\ppu\lib\libsnc.a

(B#51350)
- In the case of partial linking, ppu-lv2-ld has become to emit an
  output file that the SN Systems linker can dead strip,
  if all the input files allow dead code stripping.

(B#44381)
- SDK240 or later GCC compiler does not search header files in
  $CELL_SDK\target\ppu\include\sys. Please prefix header file name in
  include directive with sys\ explicitly it the header file is
  insltalled in $CELL_SDK\target\ppu\include\sys.
  For details of this issue, see also the Technical Note 200805-05.
  https://ps3.scedev.net/technotes/view/741

(B#49606)
- The use of comparision operators on vectors would cause a LHS and
  be split up into 4 or more scalar comparisions.  This has been fixed
  to use the AltiVec instructions directly.

<SPU>

(B#45258)
- Reduce the number of register-to-register copy instructions.

(B#46782)
- GCC will now optimize an indirect call to remove one branch when
  it is the last call of a function. Previously, GCC only optimized
  absolute calls in this way.

(B#51304)
- Make sure hint and hbrp instructions are 2 cycles apart to avoid
  performance issues.
  For details of this issue, see the Technical Note 200804-26.
  https://ps3.scedev.net/technotes/view/735

(B#51432)
- When the linker sees a brsl instruction whose target is the next
  instruction, the object will be treated as PIC for -warn-pic-all
  and -warn-pic-code.

- [Bug53091] Change GCC411 SPU
- Constant fold the frest, frsqest and fi instructions when the
  operands are vectors.

======================================================================
Bugfixes in Release 240.001
----------------------------------------------------------------------
SN Systems Linker
----------------------------------------------------------------------
(B#47702)
- Fixed for a problem with the processing of an addend value of -1.
  SNC uses the technique of biasing the base address of an array when
  a calculation involving a constant difference is used as the index
  value. For example: where the source has something like
  "arr[ind - 1]" when arr is a static array, this will effectively be
  rewritten as "(arr -1)[ind]" so (arr-1) becomes a constant and we've
  eliminated the subtraction. This constant offset value appears in
  the relocation's addend and must be calculated at link time.
  Unfortunately, where the array was of a type whose size is 1 and the
  offset is -1 we ran into this 'special'.

(B#49539)
- Added support for the R_PPC64_TOC16_LO, R_PPC64_TOC16_HI, and
  R_PPC64_TOC16_HA relocations that are emitted by GCC when using the
  -mall-base-toc option.

(B#49741)
- Fixed the .debug_line state machine re-encoding for dead stripping
  to use a separate buffer (rather than encode in-place). (This caused
  the error message "Line number info has expanded whilst stripping
  unused function info".)

(B#49814)
- Fixed a problem with debug line corruption, caused by miscalculating
  special opcodes for the .debug_line state machine when re-encoding
  after dead stripping.

(B#48782)
- When calculating whether the linker could use a "short" TOC shim
  (which must lie within the distance reachable by a relative branch)
  rather than a "long" TOC shim (which uses a full 32 bit target
  address), the linker was incorrectly considered the distance between
  the caller and the callee rather than the address of the shim and
  the callee.
  The problem has been fixed.

----------------------------------------------------------------------
GCC
----------------------------------------------------------------------
<PPU/SPU>

(B#3225)
- The following vector initialization could not be used.
  This problem has now been fixed.

  vector signed int v1[] = {0, 1, 2, 3, 4, 5, 6, 7};
                    // same as v1[2] = {{0,1, 2, 3},{4, 5, 6, 7}};

  struct stypy {
    int i;
    vector signed int t;
  } v2 = {1, 0, 1, 2, 3}; // same as v2 ={1, {0, 1, 2, 3}};

(B#12525)
- In case of using response files on Windows environment, previous
  toolchains did not correctly quoted the paths that contained
  whitespaces. This problem has been fixed.

(B#43516)
- The warning "object of type `volatile XXX&' will not be accessed in
  statement" was displayed even when it was hard to avoid, using
  operator= or any function call.  This has changed to not to emit it
  for function calls including overridden operators.

(B#45657)
- Debugging information for local variables in constructors and
  deconstructors was not emitted. This problem has now been fixed.

(B#47733)
- An internal compiler error in expand_stack_vars can happen in some
  case.
  "xxxx.c: xx: internal compiler error: in expand_stack_vars, at cfgexpand.c:725"
  This problem has been fixed.

(B#50263)
- With optimization turned on, an internal compiler error in
  scalarize_init can happen in some case.
  "xxxx.c: xx: internal compiler error: in scalarize_init, at tree-sra.c:2042"
  This problem has been fixed.

(B#50678)
- In some cases with strict aliasing, accessing a variable via a const
  type will produce wrong code and will look like there is an aliasing
  violation. This problem has now been fixed.

(B#51608)
- In some cases with classes that wrap a vector would cause an
  internal compiler error in expand_expr_addr_expr_1.
  "xxxx.c: xx: internal compiler error: in expand_expr_addr_expr_1, at expr.c:6617"
  This problem has been fixed.

(B#27899)
- Vector literals that have curly braces would cause an warning with
  -pedantic. This has been fixed.

(B#27900)
- An overflow warning with -pedantic was happening with the AltiVec
  style vector literals with a signed integer and using the minimal
  value. This has been fixed.

(B#35165)
- GCC's return slot optimization was incorrectly applied to volatile
  variables as shown in the variable 'b' in the following example.
  This has changed not to use it for volatile variables.

  struct S { int x,y; };
  
  struct S test(int i) {
    struct S data;
    data.x=i; data.y=i;
    return data;
  }
  
  int main(void) {
    volatile struct S b;
    b=test(3);
    return 0;
  }

(B#39824)
- On Windows Vista, using precompiled headers could randomly cause an
  internal compiler error:
    "internal error in mingw32_gt_pch_use_address,
     at config\i386\host-mingw32.c(141):
     MapViewOfFileEx: Attempt to access invalid address."
  This problem has been fixed.

(B#48331)
- In some cases, GCC will take a long time to compile a source.  This
  is due to the scheduler having a big ready queue for the pre-register
  allocator schedule. This has been fixed.

(B#52323)
- pragma loop was not being recognized on some loops that end with 
  an if statement. This has been fixed.

(B#52506)
- With the subscripting on vector types, a vector variable that had
  been marked as a register would error out or be warned about.
  This has been fixed. 

(B#52562)
- If an integral constant variable was initialized by a constructor
  inside a template, it was not being recognized as an integral
  constant. This has been fixed.

(B#52686)
- When an internal compiler error occurred with -S option,
  a preprocessed source was output to a console.
  This problem has been fixed.

(B#52979)
- Vector subscripting inside templates with dependent values did not
  work. This has been fixed.

(B#53670)
- Accessing a part of a function descriptor via a cast would cause an
  internal compiler error:
  "xxxx.cpp(xx): internal compiler error: in var_ann, at tree-flow-inline.h:128"
  This problem has been fixed.

<PPU>

(B#8050)
- "vector bool int" was not being printed in error messages as "vector
  bool int" but instead "vector unsigned int".
  This problem has been fixed.

(B#43009)
- When copying a pointer from a non packed struct to a packed struct,
  one of the bytes turned into zero. This problem has been fixed.

(B#43400)
- The second argument of __builtin_expect function must be constant
  except SPU GCC. If a variable is specified to the second argument,
  GCC has become to raise an error.

(B#47505)
- Under Windows, -fprofile-generate and -fprofile-arcs would not find
  the correct path for the .gcda files so these options would fail.
  This problem has been fixed.

(B#48789)
- An internal compiler error occurs when using vec_sel() with
  -mbase-toc.
  "xxxx.c: xx: internal compiler error:: in reg_or_subregno, at jump.c:2036"
  This problem has been fixed.

(B#49418)
- In some cases (int following a float field), d64_abi attribute does
  not follow the ABI as specified.  This has been fixed.
  For details of this issue, see also the Technical Note 200803-13.
  https://ps3.scedev.net/technotes/view/706

(B#49792)
- The assembler resolved local function calls whose caller and callee
  are in the same object. This behavior prevented the SN Systems linker
  from the dead code strippting.
  The assembler in this release now leaves all of relocations about
  function calls. Now the SN Systems linker strips unused codes
  effectively.

(B#49927)
- In some cases, the register used for vector loads when loading from
  an offset of the stack can corrupt a live variable.
  This problem has been fixed.

(B#51422)
- When linking PRX with '-mprx' or '-mprx-with-runtime',
  the linker does not search for the path $CELL_SDK\target\ppu\lib.
  This problem has been fixed.

(B#51468)
- An internal compiler error about unrecognizable insn occurred
  when the register pressure is high and an auto-increment was used.
  "xxxx.c: xx: internal compiler error: in extract_insn, at recog.c:2087"
  This problem has been fixed.

(B#51885)
- An inline assembly statement in __stdcx macro defined in
  ppu_intrinsics_gcc.h was not qualified as volatile.
  This problem has been fixed.

(B#49816)
- -fmuse-save-restore-funcs sometimes caused a link erorr.
  The problem has been fixed.

(B#47582)
- An internal compiler error occured by the division of vector or
  __vecreg operand:
  "xxxx.cpp:xx: internal compiler error: in type_after_usual_arithmetic_conversions, at cp\typeck.c:262"
  This problem has been fixed.

(B#49742)
- Invalid __vecreg caused an internal compiler error instead of an
  error. This problem has been fixed.

(B#53071)
- Using vector unsigned long or vector signed long, a wrong message
  was output. This problem has been fixed.

(B#53196)
- The following internal compiler error would happen with some code:
  "xxxx.cpp(xx):internal compiler error: in reg_or_subregno, at jump.c:2036"
  This has been fixed.

<SPU>

(B#1760)
- The following bug has been fixed.
  - With spu-lv2-gcc and spu-lv2-g++, when the optimization option is 
    -O1 or more and the arguments of the spu_roundf and si_frds 
    intrinsic functions can be calculated at the time of compilation, 
    the specified rounding mode (by default, round to nearest) is not 
    used and the calculation is done by rounding down. 

    Example)
      vec_float4 f(void) {
        return spu_roundtf(((vec_double2){
          0,12345678.9
        }));
      }

