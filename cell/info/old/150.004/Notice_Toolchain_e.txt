[SCE CONFIDENTIAL DOCUMENT]
PLAYSTATION(R)3 Programmer Tool Toolchain 150.004
                    Copyright(C) 2007 Sony Computer Entertainment Inc.
                                                   All Rights Reserved.
======================================================================
The following are known bugs and limitations on PLAYSTATION(R)3 Programmer
Tool Toolchain package.

New updates have the release version of this package.

----------------------------------------------------------------------
GCC
----------------------------------------------------------------------
<PPU/SPU>
- When a header file is pre-compiled with -MD or -MMD options, a 
  dependent file to be generated will have its extension as ".o" 
  incorrectly.
  In such case, clearly specify the output file before the pre-compiling 
  process as shown below:

   Example: ppu-lv2-gcc -MMD test.h -o test.h.gch

- If vmx2spu.h or spu2vmx.h is used from C programs, errors are
  displayed.  To avoid the problem, please use them from C++ programs.

- In a vector literal with (), such as (vector signed int)(x), 
  an error is not reported even when those other than constants or 
  constant expressions (such as variables) are used.

- In Windows environment, if the -frepo option is specified and 
  a program such as the code of the example is compiled and linked, 
  a linking error will occur. 

  Example)
      template<typename T>
         T Max(T a, T b) 
                { 
                  return a > b ? a : b;
                }

      int main(){
                  char cbuf;
                  cbuf = Max('1', '2');
                }

(Added in Release 150.004)
- When a program such as the code of the example is compiled, the const 
  variable a and b may be placed in the .bss section, not the .data section.

  Example)
  const vector unsigned int a = (vector unsigned int)(vector signedint)
                                {1,2,3,4};
  const vector float b = (vector float)(vector unsigned int){1,2,3,4};

<PPU>
- When a program such as the code of the example is compiled, a warning
  message will be output to the console.

  Example)
  std::vector<bool> myArray
  std::vector<bool>::iterator it = myArray.begin()

- When 2 programs such as the code of the example are compiled, a different
  code will be generated respectively.

  Example)
  --- program1 -----
   A foo;
   B bar;
   foo = *reinterpret_cast<A *>(&bar);
  --- program2 ----
   A foo;
   B bar;
   *reinterpret_cast<B *>(&foo) = bar;

- When a program such as the code of the example is compiled with the 
  optimization option set to -02 or more, it will be less optimized 
  than when gcc3.4 is used.

  Example)
  typedef union
  {
    float f[4];
    vector float vf;
  }
  Union128;
  vector float
  make_vector_from_float (float x, float y, float z, float w)
  {
    Union128 u;

    u.f[0] = x;
    u.f[1] = y;
    u.f[2] = z;
    u.f[3] = w;
    return u.vf;
  }

- When a program such as the code of the example that uses __thread 
  is compiled, a compile error will occur.

  Example)
  class rage{
     static int s_ThreadPrefix;
  };
  __thread int rage::s_ThreadPrefix = 1;

- A program that uses a response file cannot be linked within a folder
  whose name contains a space character.

- When a header file that uses altivec.h is compiled with the "-x c-header"
  to generate a pre-compiled header, a compilation process of a program 
  that uses the header file may end in error.

- The optimization of an empty loop statement is not sufficient.

- When a program that has a comment such as the example is compiled, 
  a warning message will be output to the console.

  Example)
  //int blahblah;\
  //int behbeh;

- When a program is compiled with the -MMD option in Windows environment,
  and the path to the system header is specified using the -I option,
  a header file name that exists in the path will be contained in the 
  output .d file.

- When a program, that includes the system header "spu_internals.h",
  is compiled with the path to the header file set with the -I option,
  a warning message will be output to the console.

  C:\support>spu-lv2-gcc -Wall -I%SCE_PS3_ROOT%/target/spu/include -c main.cpp
  C:/usr/local/cell/096/target/spu/include/spu_internals.h:63: warning: specifying
  ?vector types with __attribute__ ((mode)) is de precated
  C:/usr/local/cell/096/target/spu/include/spu_internals.h:63: warning: use __attr
  ibute__ ((vector_size)) instead

- When a program, that uses the attribute __may_alias__ as an alias 
  declaration of a structure, is compiled, an internal compile error
  will occur.

  typedef struct
  {
      char a;
      char b; 
      char c;
      char d;
  } test;
  typedef test __attribute__((__may_alias__)) test_a;

- When the following cast is performed, the program will not work 
  correctly.

  dist += a->b[0] * (*reinterpret_cast< const vec_t * >
  ( reinterpret_cast< const byte * >(arg)+ c->d[0] ));

- Although an optimized program such as the code of the example is 
  compiled, an unnecessary instruction may be output:

  Example)
  -- Program ---
     while(size>0){
         *(dst++) = *(src++);
         size--;
     }
  -- Assembly code ---
     ld 11,0(4)
     addi 0,3,8
     addi 9,4,8
     std 11,0(3)
     rldicl 3,0,0,32 <- Unnecessary
     rldicl 4,9,0,32 <- Unnecessary
     bdnz .L4
     blr"

- In a program that includes <iostream>, the C/C++ standard libraries 
  will use "new" in "_initialize".

- When a program such as the code of the example that uses the attribute
  __may_alias__ within template is compiled, an internal compile error
  will occur.

  Example)
  template <typename T>
  void f() 
  { 
    typedef T __attribute__((__may_alias__)) A;

- Although an optimization process is performed when compiling a program, 
  the clrldi instruction which is not required may be output.

- When a program such as the code of the example is compiled, a warning
  message will be output to the console:

  Example)
  struct Y { static int i; };

  template <typename T> class X {
      X () { Y::i; };
  };
  template class X<int>;

  class Z {
      Z () { Y::i; };
  };

- When PPU_INCDIRS which is defined as follows is specified using 
  the -I option at compilation, an compile error occur.

  PPU_INCDIRS += myproject/include/

- When a program that contains the VMX instruction is compiled, the 
  optimization will not be performed efficiently. 
  Accordingly, an unnecessary instruction may be left within the 
  internal processing of the loop statement. When this problem occurs,
  describe the processing of the loop statement using the asm statement.

- In PPU program, even when "align" is specified to the variable 
  assigned to the TLS area, the alignment process may not be performed.
  This behavior is defined by the specifications of Cell OS Lv-2.

- When calling other functions from the PPU program in assembly 
  language, the following should be noted to set the correct value 
  for TOC pointer(r2).

  (1) Always insert nop instruction after bl instruction. By doing so,
      when the function to be called uses a different TOC pointer, 
      the linker will generate a linkage code to replace nop with an 
      appropriate instruction.

      Example:
                 bl              .foo
                 nop

  (2) Always include ".toc" section (can be empty) in the assembler
      source file. This is the current restriction on the linker.
     
      Example: Put the following at the beginning of the file
           .section        ".toc","aw"
           .section        ".text"

<SPU>
- If position independent code (PIC) is generated using -fpic option,
  C++ virtual functions cannot be used.

- According to chapter 7 of "Cell OS Lv-2 C/C++ Language Extensions 
  for SPU", when the type of an operand within an expression is double 
  and the operand is a denormal number, it should be considered as 0.0 
  or -0.0. However, with the current compiler, the optimization result 
  may not adhere to this. 

- If the -funroll-loops option and the -frerun-cse-before-sched option 
  are specified at the same time, an incorrect code is generated. 
  Please do not specify the -frerun-cse-before-sched option. 

- If an object or elf that includes the brsl instruction is disassembled 
  with spu-lv2-objdump, not the value obtained by adding s18 and $pc, 
  but the address that is obtained by adding s18 and $pc is displayed 
  with the "brsl rt, s18" instruction. 

- With spu-lv2-gcc and spu-lv2-g++, when the optimization option is 
  -O1 or more and the arguments of the spu_roundf and si_frds 
  intrinsic functions can be calculated at the time of compilation, 
  the specified rounding mode (by default, round to nearest) is not 
  used and the calculation is done by rounding down. 

  Example)
    vec_float f(void) {
      vec_float4 v1=spu_roundtf(((vec_double2){
        0,12345678.9
      }));
    }

----------------------------------------------------------------------
GDB
----------------------------------------------------------------------
none
