[SCE CONFIDENTIAL DOCUMENT]
PLAYSTATION(R)3 Programmer Tool Toolchain 220.002
                    Copyright(C) 2008 Sony Computer Entertainment Inc.
                                                  All Rights Reserved.
======================================================================
The following are the new features and fixed bugs of PLAYSTATION(R)3 
Programmer Tool Toolchain package. 

- Additions of new features and changes in Release 220.002
- Bugs fixed in Release 220.002

======================================================================
New Additions and Changes in Release 220.002
----------------------------------------------------------------------
SN Systems Linker
----------------------------------------------------------------------
(B#45334)
- The "ppu-lv2-prx-fixup --stub-fix-only" phase of creating a valid
  PPU program has been fully integrated into the linker. 
  This improves "link" times by avoiding the additional disk accesses
  that must be performed by a program that post-processes the linker's
  ELF file. 
  There are a couple of new switches:

  '--prx-fixup' tells the linker to perform a PRX fixup and is the
  default (it is the opposite of "--no-prx-fixup")

  '--external-prx-fixup' tells the linker to use the external SCE
  "ppu-lv2-prx-fixup --stub-fix-only" tool rather than performing the
  fixup internally.

- Add '--no-multi-toc' and '--multi-toc' switches; the default is
  '--multi-toc'. These switches determine whether the linker will
  permit the presence of more than one TOC region (i.e. >64k of TOC
  data). If multiple TOC regions are enabled, TOC switching shims will
  be dynamically generated when necessary. If disabled, the presence
  of more that 64k of TOC data will result in an error.

[Specification Changes]

- We now issue a warning to the user when a file supplied by the user
  is not in one of the supported formats. This helps to explain to
  the user what has happened: previously the most likely outcome was
  a mysterious syntax error from the script parser.

(B#45256)
- Improve the TOC report generated by '--print-toc-info' so that it's
  possible for a user to get some useful diagnostics to understand the
  TOC allocations within an ELF.
  The report contains three sections:

  - the "TOC Module Sizes" which shows each module along with
    the amount of TOC that it contains.

  - the "TOC Assignments" which shows the TOC assignment of
    each section within each module and any cross-TOC function
    calls that it makes.

  - the "TOC Stats" which lists the TOC regions, their sizes
    and addresses.

(B#43750)
- Improved the dead stripper by adding knowledge of the way in which
  GCC accesses the .opd section using section-relative relocations.

- When the '--gc-sections' switch is used, the linker now issues a
  warning and automatically enables '--strip-unused-data'.

- Added special stripping of .toc section and '--no-toc-optimize'
  command line switch to turn it off

- If a library included by the STANDARD_LIBRARIES linker script
  directive is also listed on the command line we now ignore the
  instance on the command line. This avoids the chance of introducing
  "undefined symbols" error because of the order in which the
  libraries are scanned.




----------------------------------------------------------------------
GCC
----------------------------------------------------------------------
<PPU/SPU>

(B#45003)
- A new option '-fsource-402' has been added to give mostly source
  compatibility with GCC 4.0.2.

  Please refer the following document for details.

  "Toolchain User's Guide for Cell OS Lv-2"
    - Upgrading to GCC 4.1.1
     - Migration Strategy

(B#45188)
- A new option '-fkoenig-argument-lookup' has been added to control
  the namelookup rules for functions in templates.

(B#45259)
- A new option '-fresolve-non-dependent-early' has been added to
  control when the resolving of non dependent functions in templates
  happen.

(B#45739)
- The option '-fglobal-new-align=<number>' is added to control when
  a second argument that specifies alignment is passed to operator 
  new.

<PPU>

(B#45857)
- Add a new option `-mprx-with-runtime' which is used for generating
  PRX. By using this option instead of `-mprx', the features below
  are enabled.
    - global constructor/global destructor
    - atexit() (register and execute functions)
  See "Cell OS Lv-2 PRX Programming Guide" for details.

<SPU>

(B#37238)
- When linking with '-fpic' or '-fPIC', the linker will generate a
  warning when objects that require run-time relocations are being
  linked.
  The warnings may be disabled with -mno-warn-reloc. Also, the warning
  are disabled automatically when linking with '-mspurs-job-initialize'.

[Specification Changes]

<PPU/SPU>

(B#45196)
- Initialization of POD across block boundaries is now a warning for
  '-fpermissive'.

(B#46158)
- The warning "no newline at the end of the file" has now been removed.

(B#46095)
- If a subprogram is not found, a better error message is now emitted
  with the subprogram not being found.

(B#46714)
- The option '-ftree-loop-linear' is not supported and GCC warns about
  the use of this option now.  The warning can be turned off with the
  option '-Wno-tree-loop-linear'.

<PPU>

(B#40578)
- When using the divide operator on operands with a type of '__vector
  float' the PPU compiler will use an inlined version of divf4() to
  compute the result.

(B#44267)
- The compiler driver is changed so that it implicitly passes the
  linker '-lsyscall' option by default. The libsyscall.a library
  defines non-inlined system calls.

(B#46894)
- As SN Linker is able to generate final elf image without invoking
  post-process PRX command, ppu-lv2-prx-fixup, the GCC is changed
  so that the compiler driver invokes SN linker in one-ramp link mode
  by default.
  If you want to invoke the PRX command after SN linker as previous,
  please specify '-mforce-prx-fixup' in the compiler driver option
  for linking step.

<SPU>

(B#42132)
- When loading or storing parts of a global object with an offset that
  is 512 bytes or larger, the compiler will generate a single lqr or
  stqr instruction, instead of computing the address with ilhu and
  iohl.

For example,

  int array[256];
  int f (void)
  {
    return array[128];
  }

will now generate

  f:
        lqr     $3,array+512
        bi      $lr

instead of

  f:
        ilhu    $2,array+512@h
        iohl    $2,array+512@l
        lqd     $3,0($2)
        rotqby  $3,$3,$2
        bi      $lr

(B#44162)
- From SDK220 toolchain, following 2 macros are predefined regarding to
  SPU programming mode.

  __SPURS_TASK__ : Predefined when '-mspurs-task' is specified.

  __SPURS_JOB__  : Predefined when '-mspurs-job' or
                   '-mspurs-job-initialize' is specified.

  NOTE:
  Some system headers in PS3 SDK refers to __SPURS_JOB__ macro to
  redirect functions for SPURS Tasks. When you compile sources
  for SPURS task, please recompile them with -mspurs-task option.


======================================================================
Bugfixes in Release 220.002
----------------------------------------------------------------------
SN Systems Linker
----------------------------------------------------------------------
- Changed the map file report to improve support for the ProDG
  Debugger's Object Module Loading (OML). OML needs the actual input
  section name where the wildcard matching name was placed.

(B#41203)
- The linker would sometimes report undefined symbol errors twice.
  The problem has been fixed.

----------------------------------------------------------------------
GCC
----------------------------------------------------------------------
<PPU/SPU>

(B#42348)
- On Windows, the following commands hanged if environment variable
  'LANG' or 'LC_ALL' was set to 'ja_JP.*'.

    ppu-lv2-addr2line, spu-lv2-addr2line,
    ppu-lv2-ar,        spu-lv2-ar,
    ppu-lv2-nm,        spu-lv2-nm,
    ppu-lv2-objcopy,   spu-lv2-objcopy,
    ppu-lv2-objdump,   spu-lv2-objdump,
    ppu-lv2-ranlib,    spu-lv2-ranlib,
    ppu-lv2-readelf,   spu-lv2-readelf,
    ppu-lv2-size,      spu-lv2-size,
    ppu-lv2-strings,   spu-lv2-strings,
    ppu-lv2-strip,     spu-lv2-strip

  This problem has been fixed.

(B#44331)
- In some cases, GCC loses the alignment information and cause a byte
  by byte copy instead of doing it by higher alignment.
  This problem has been fixed.

(B#42650)
- The ppu-lv2-objdump and spu-lv2-objdump commands gave warning
  messages for correct DWARF information.
  This problem has been fixed.

(B#39027)
- On Windows, a race condition might occur if the multiple gcc ran
  simultaneously.
  This problem has been fixed.

(B#45257)
- Alignment atributes are not being inherited for empty classes.
  This problem has been fixed. 

(B#45656)
- Debugging information for vector types sometimes can be missing
  'DW_TAG_subrange_type'.
  This problem has been fixed.

(B#45741)
- Debugging information in some cases would be incorrect for local
  variables, when using alloca/VLAs(Variable Length Arrays).
  This problem has been fixed.

(B#43402)
- When using the aligned attribute in a typedef and declaring an
  array with that typedef, the compiler would sometimes generate
  incorrect code to access that array.
  This problem has been fixed.

(B#43368)
- Generate an error, instead of a warning, when using the -MMD option
  and trying to include a file that does not exist.

(B#46157)
- Volatile loads are sometimes ignored inside loops.
  This problem has been fixed.

(B#46200)
- The following internal compiler error would happen for accesses for
  elements of vectors in some cases:
    "xxxx.c: xx: internal compiler error: verify_stmts failed"
  This problem has been fixed.

(B#46459)
- A semi random internal compiler error (see below) can happen in some
  cases:
    "xxxx.c: xx: internal compiler error: in avail_expr_eq, at tree-ssa-dom.c:3401"
  This problem has been fixed.

(B#46961)
- The warning "too short to be a PCH file" is now conditional based on
  the '-Winvalid-PCH' option, like all other reasons why a PCH file
  could be rejected.

(B#47102)
- Attribute 'always_inline' on a template definition was lost when
  there was a declaration without that atrribute.
  This problem has been fixed.

(B#47224)
- The compiler no longer generates the following internal error for
  code which casts between different vector types in a loop:
    "xxxx.c: xx: internal compiler error: in extract_insn, at recog.c:2087"

(B#47903)
- The -fpch-deps option did not work correctly.
  If the source file being compiled includes a header for which a
  precompiled header exists, the resulting .d file lists the
  precompiled header, but not the headers included in that header.
  This breaks the dependency checking used in the ProDG VSI.
  This problem has been fixed.

<PPU>

(B#44482)
- 'vec_lvrx' and 'vec_lvlx' in some cases will be moved across the
  store that these intrinsics are loading from.
  This problem has been fixed.

(B#38847)
- The compiler generated duplicated debugging informaion.
  This problem has been fixed.

(B#45941)
- In some cases vector loads and stores can be to the wrong address
  for a global variable.
  This problem has been fixed.

(B#20191)
- The option '-fthreadsafe-statics' became available. It allows
  constructors of local static variables in functions to work in a
  thread-safe way.

(B#46231)
- In some cases, the zero extension removal pass would remove needed
  moves inside loops which results in wrong index being used.
  This problem has been fixed.

<SPU>

(B#45189)
- The linker will generate an error when an out of range symbol is
  used as a constant offset in the 'lqd' and 'stqd' instructions.

(B#30183)
- When generating position independent code (PIC), the compiler
  outputs an additional warning with accurate line information for
  static constructors and destructors.

(B#46928)
- In the entry point of spurs_task.o, the stack frame was touched
  before initializing the stack pointer.
  This problem has been fixed.

(B#47718)
- In some case, the linker of GCC 4.0.2 does not resolve the relocation
  information correctly when the object to be linked is generated by
  using GCC 4.1.1.
  This problem has been fixed.

(B#44162)
- If there is a call to abort() in sources files, linking object
  compiled from these sources with '-mspurs-task' option failed due to
  an undefined symbol error to _exit. 
  This problem has been fixed.
