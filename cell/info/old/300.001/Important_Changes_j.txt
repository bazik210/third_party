[SCE CONFIDENTIAL DOCUMENT]
PlayStation(R)3 Programmer Tool Runtime Library 300.001
                    Copyright(C) 2009 Sony Computer Entertainment Inc.
                                                   All Rights Reserved.
======================================================================
以下にReference Tool SDKパッケージの新規機能、変更点、注意事項を
記述します。

----------------------------------------------------------------------
新規ライブラリ
----------------------------------------------------------------------

librudp
=======

UDP (User Datagram Protocol; RFC 768) 上でリライアブルなデータ伝送を
支援する、PRX形式のライブラリ

NPシグナリングユーティリティでサポートされているTCP over UDPP2Pと比べ、
オンラインゲームに求められるより多くの機能を提供するほか、
パケットヘッダが小さく、より高い伝送効率を得ることができます。

UDPP2Pプロトコルと併用することを主に想定していますが、
UDPP2P以外の伝送様式 (たとえば、ユーザ独自のUDPによるNAT越えシステムや、
ゲームサーバとのUDPによる通信等) との併用も可能です。

詳細については、「librudp 概要」及び「librudp リファレンス」を
参照ください。

サンプルの追加

- cell\samples\sdk\network\rudp\simple
  librudpのコンテキストイベントハンドラ、ポーリング関数、および
  ブロッキングモードの使用方法を示すサンプル

----------------------------------------------------------------------
開発環境 ( Reference Tool(DECR-1000) )
----------------------------------------------------------------------

仕様変更

- [ANALOG AUDIO OUT 1/2/3/4] から出力されるオーディオチャンネルを
  以下のように変更しました。

    (変更前)
      1: L/R
      2: LFE/C
      3: Ls/Rs
      4: Le/Re

    (変更後)
      1: Le/Re
      2: L/R
      3: LFE/C
      4: Ls/Rs

----------------------------------------------------------------------
システムソフトウェア(GUI)
----------------------------------------------------------------------

<システムソフトウェア(GUI)のメニュー>

新規機能

- 設定列 -> サウンド設定 -> 音声同時出力

  「音声同時出力」の設定では、「入」ないし「切」の指定により、音声同時出力の
  機能を有効化ないし無効化します。


  「音声同時出力」を有効にすると、「音声出力設定」で選択された音声出力先以外の
  出力先にも、2chの音声が同時に出力されるようになります。
  例えば、「音声出力設定」でHDMIを音声出力先として選択されている場合、
  光デジタルおよびAVMULTIにも2chで音声が同時に出力されます。
  「音声出力設定」で選択された音声出力先に LPCM 5.1ch 48kHzや
   Dolby Digital / DTSなどのマルチチャネル音声が出力される場合、
   システムソフトウェアは「音声出力設定」で選択された音声出力先以外の出力先には、
  その内部で2chにダウンミックスした音声を出力します。

  このように、音声同時出力の処理は、システムソフトウェアにより自動的に行われるため、
  アプリケーションは音声同時出力が行われていることを意識する必要はありません。

  この機能を活用することにより、PlayStation(R)3に複数の音声出力機器(テレビや
  AVアンプなど)が接続されている場合、システムソフトウェアの「音声出力設定」を
  変更することなく、所望の音声出力機器から音声を出力することが可能になります。

  なお、「音声同時出力」を無効にした場合は、従来通り、「音声出力設定」で選択された
  音声出力先にのみ音声が出力されます。

  ※ 注意事項
  - HDMIに、LPCM 7.1chの音声を出力することができません。最大5.1chの音声に制限されます。
  - 「音声出力設定」を更新した場合、音声同時出力の設定は「切」にリセットされます。
  - アプリケーションは、オーディオ設定ユーティリティのAPIを使用して「音声出力設定」
    で選択された音声出力先の情報を取得します。音声同時出力が有効であっても、
    これらAPIの振る舞いは従来通りで、「音声出力設定」で選択された音声出力先の
    情報のみが取得できます。

    * 詳細は、本ドキュメント(Important_Changes_*.txt)の「オーディオ設定
      ユーティリティ」を参照ください。

- PlayStation(R)Network列 -> What's New
- ビデオ列 -> PlayStation(R)Store
- ゲーム列 -> PlayStation(R)Store

  PlayStation(R)Networkにサインアップすると、これらのアイコンから、
  最近遊んだゲームや、PlayStation(R)Storeからの最新のお知らせなど、
  さまざまな情報にアクセスできるようになります。

- ネットワーク列 -> インターネットブラウザー -> △ボタン(メニュー) 
  -> ファイル -> 「この画面を印刷」メニュー

  インターネットブラウザーからの印刷機能が利用できるようになりました。

- 設定列 -> Debug Settings -> Disc Auto-Start at System Startup

  開発機のみのメニュー項目で、電源投入時のディスクの自動起動機能の
  有効/無効を選択します。
  ただし、「本体設定」－> 「ディスク自動起動」が「切」の場合は、
  そちらの設定が優先され、電源投入時のディスク自動起動は行われません。

仕様変更

- システムソフトウェアのアイコンや背景のグラフィックスのデザインが新しくなりました。
  
  設定列 -> テーマ設定のメニューに、背景やアイコンのデザインを古いデザインに
  戻すための「クラシック」設定を追加しました。

- ゲーム起動時にPLAYSTATION(R)3ロゴを表示しないようにしました。

- システムソフトウェア右上の表示エリアのデザインと構成を変更しました。

  これまでは時計とインフォメーションボードが表示されていましたが、さらに加えて、
  下記４つの情報が表示されるようになります。

    - 新着テキストチャットルームの表示
    - 新着メッセージの表示
    - オンラインフレンド数
    - アバターアイコン

- ディスクを挿入したまま電源を投入した際のディスク自動起動機能が変更されました。
  下記の条件に当てはまった場合、自動起動機能が発動しませんので、ご注意ください。
    - 「本体設定」の「ディスク自動起動」が「切」となっている場合
    - 「本体設定」の"[What's New]表示"メニューが「入」となっており、
      サインアップ済みの場合か、サインアップしていなくても一度でもオンラインに
      なったことがある場合

- 電源投入時のロゴ画面が変更になりました。


<コアダンプ機能>

新規機能

- 通常のコアファイルを出力すると同時に、最小限のデバッグ情報を含む
  テキスト形式のファイル(クラッシュログファイル)を生成する機能を
  追加しました。
  コアファイルにはクラッシュ発生時点の全レジスタ情報やメモリ情報など
  大量の情報が記録されますが、クラッシュログファイルにはCell OS Lv-2
  がコンソール(TTY)に出力する例外情報相当だけが記録されます。

    [出力場所]    コアファイルと同じ場所に出力
    [ファイル名]  コアファイルのファイル名の拡張子を".log"にしたもの

----------------------------------------------------------------------
libsysmodule
----------------------------------------------------------------------

全般
====

新規機能

- モジュールをロードする ID を追加しました。
  -------------------------------------------------------------------
  ID                                  説明
  -------------------------------------------------------------------
  CELL_SYSMODULE_RUDP                 librudp
  -------------------------------------------------------------------

----------------------------------------------------------------------
システムユーティリティ(libsysutil)
----------------------------------------------------------------------

セーブデータユーティリティ
==========================

新規機能

- ゲームタイトル独自のGUIによるセーブデータのリスト表示を支援する
  以下の関数を追加しました。

    cellSaveDataGetListItem()
      カレントユーザにおける複数のセーブデータの情報を、高速に取得できる関数

    cellSaveDataUserGetListItem()
      引数userIdで指定したIDを持つユーザの、複数のセーブデータの情報を、
      高速に取得できる関数

  上記関数に関する補足事項を以下に示します。

  - データリストコールバックおよびデータ指定コールバック中でのみ
    使用可能です。
    以下の関数を繰り返し呼び出し、データステータスコールバックから
    ひとつずつ情報を取得する従来のやり方と比べて、高速に複数の
    セーブデータ情報を取得することができます。

    cellSaveDataAutoSave2()
    cellSaveDataAutoLoad2()
    cellSaveDataListAutoSave()
    cellSaveDataListAutoLoad()
    cellSaveDataUserAutoSave()
    cellSaveDataUserAutoLoad()
    cellSaveDataUserListAutoSave()
    cellSaveDataUserListAutoLoad()

  - 関数で取得した情報は、アプリケーションが独自にセーブデータリストを
    表示するときや、セーブデータユーティリティ関数から取得した
    セーブデータリストを取捨選択するときの条件として使用するのに
    適しています。

  - 上記関数は、共に拡張機能となりますので、libsysutil_savedata_stub.aを
    スタティックリンクし、libsysmoduleのAPIを用いてlibsysutil_savedata
    をロードしておく必要があります。

サンプルの追加

- cell\samples\sdk\sysutil\savedata\mylist
  セーブデータユーティリティのリストアイテム情報の取得機能を使用し、
  ゲームタイトル独自のGUIを使ってセーブデータをリスト表示するサンプル


オーディオ設定ユーティリティ
============================

新規機能に伴う注意点

- システムソフトウェア(GUI)において追加されたメニュー
  (「サウンド設定」 -> 「音声同時出力」)で音声同時出力が
  可能になりました。

  これに伴うオーディオ設定ユーティリティの振る舞いや取得情報は
  従来のものから変更ありません。
  以下はオーディオ設定ユーティリティにおける音声同時出力の注意点です。

  - 「サウンド設定」 -> 「音声同時出力」が「入」に設定されている場合は
     スレーブポートにも同時に音声が出力されますが、それらのポートに
     接続されているデバイスの情報は取得できません。

  - 「音声同時出力」が「入」に設定されている場合、HDMIにLinear PCM 7.1chの
     音声を出力することはできないという制限がありますが、
     cellAudioOutGetDeviceInfo()で取得できる情報はこの制限が適用されます。

  詳細は、「オーディオ設定ユーティリティ 概要」の
  「2 ユーザによる音声出力環境の設定」を参照ください。


システムBGM
===========

新規機能

- システムワークロードに対応しました。

  システムBGMの再生に必要なSPUの割り当てをゲームアプリケーションに
  システムワークロードとして要求し、再生を行うことができます。

  システムワークロードについては、「SPURS システムワークロード 
  インテグレーションガイド」を参照ください。

サンプルの追加
- cell\samples\sdk\sysutil\bgmplayback
  システムワークロードとしてシステムBGMの再生を行うサンプル

ミュージックユーティリティ
==========================

新規機能

- メモリコンテナを使用する再生機能と、メモリコンテナを使用しない
  再生機能において、システムワークロードとして実行する場合の
  初期化を開始する関数を追加しました。

    cellMusicInitializeSystemWorkload()
    cellMusicInitialize2SystemWorkload()

  上記関数で初期化を開始した場合には、再生機能は
  システムワークロードとして、再生に必要なSPUの割り当てを
  ゲームアプリケーションに要求します。

  システムワークロードについては、「SPURS システムワークロード 
  インテグレーションガイド」を参照ください。

サンプルの変更(cell\samples\sdk\sysutil\)

- musicとmusic2のサンプルにおいて、新規に追加した初期化関数の処理を
  追加しました。


ミュージックデコードユーティリティ
==================================

新規機能

- 通常版デコード機能と省メモリ版デコード機能において、
  システムワークロードとして実行する場合の初期化を開始する
  関数を追加しました。

    cellMusicDecodeInitializeSystemWorkload()
    cellMusicDecodeInitialize2SystemWorkload()

  上記関数で初期化を開始した場合には、デコード機能は
  システムワークロードとして、デコードに必要なSPUの割り当てを
  ゲームアプリケーションに要求します。

  システムワークロードについては、「SPURS システムワークロード 
  インテグレーションガイド」を参照ください。

サンプルの変更(cell\samples\sdk\sysutil\)

- music_decodeとmusic_decode2のサンプルにおいて、新規に追加した
  初期化関数の処理を追加しました。

録画ユーティリティ
==================

新規機能

- 録画可能なビデオ・オーディオフォーマットとして、
  MPEG-4で最大1280x720の画サイズを録画できる
  MPEG-4 Advanced Coding Efficiency(M4HD)を追加しました。
  これに伴い、以下のマクロ定数を追加しました。

    CELL_REC_PARAM_VIDEO_FMT_M4HD_LARGE_1536K_30FPS
    CELL_REC_PARAM_VIDEO_FMT_M4HD_LARGE_2048K_30FPS
    CELL_REC_PARAM_VIDEO_FMT_M4HD_HD720_2048K_30FPS
    CELL_REC_PARAM_VIDEO_FMT_M4HD_HD720_5000K_30FPS
    CELL_REC_PARAM_VIDEO_FMT_M4HD_HD720_11000K_30FPS

  M4HDを使用する場合には、構造体CellRecParamのメンバvideoFmtに
  上記マクロのいずれかを指定してください。

  なお、M4HDの画質はMPEG-4 SPよりも良く、AVCよりも劣ります。
  また画サイズがLARGE(480x368(4:3)または640x368(16:9))の場合に
  必要とするメモリ量は、MPEG4 SP, AVCのどちらよりもM4HDの方が
  少なくなります。


- 動画にメタデータを付加できるようになりました。

  メタデータには、動画本体に関するメタデータと、シーン(動画の一部分)に
  関するメタデータがあります。
  各メタデータは、後述の新規構造体によって設定することができ、
  動画録画時にメタデータファイルとして生成されます。

  メタデータファイルを生成する場合、構造体CellRecOptionに以下を設定して、
  cellRecOpen()を実行してください。

    - optionに新規オプションCELL_REC_OPTION_METADATA_FILENAMEを指定
    - value.metadata_filenameに、動画ファイル名に".vmd"を付加したものを指定

  また、生成されたメタデータファイルにメタデータを追加する場合は、
  新規に追加した以下の構造体に値を設定して、cellRecSetInfo()を実行してください。

    CellRecMovieMetadata : 動画本体に関する以下のメタデータを設定する構造体
    CellRecSceneMetadata : シーンに関する以下のメタデータを設定する構造体

  上記構造体において、動画に関する以下のメタデータの設定が可能です。

    - 動画本体に関する以下のメタデータを設定する構造体(CellRecMovieMetadata)

      - ゲームアプリケーションのタイトル名
      - 動画のタイトル
      - 動画の説明
      - 開発者用データ (*)

      (*)このメタデータに関しては、アプリケーションが任意の目的で
         利用することができます。

    - シーンに関する以下のメタデータを設定する構造体(CellRecSceneMetadata)

      - シーンの種類 (チャプター、ハイライトクリップ、ユーザクリップ)
      - シーンの開始時刻と終了時刻
      - シーンのタイトル
      - シーンのタグ情報 (*)

      (*)このメタデータに関しては、アプリケーションが任意の目的で
         利用することができます。

  メタデータの詳細については、「録画ユーティリティ 概要」の
  「動画のメタデータ」を参照ください。

仕様変更

- 録画可能なビデオ・オーディオフォーマットの追加(M4HD)に伴い、 
  sysutil_rec.h内で定義している、録画ユーティリティが必要とする
  メモリコンテナのサイズの上限値を、以下のように更新しました。

  (SDK300より前)
    #define CELL_REC_MAX_MEMORY_CONTAINER_SIZE ( 9 * 1024 * 1024 )

  (SDK300以降)
    #define CELL_REC_MAX_MEMORY_CONTAINER_SIZE ( 16 * 1024 * 1024 )


コンテンツ検索ユーティリティ
============================

新規機能

- 録画ユーティリティにおいてSDK300より動画のメタデータ(シーン情報など)を
  付加することができるようになりました。
  これに伴い、シーン情報を検索する以下の関数を追加しました。

    cellSearchStartSceneSearch()
      ゲームタイトルやタグ文字列を指定して、条件にあうシーン情報を取得する

    cellSearchStartSceneSearchInVideo()
      ビデオとシーンタイプを指定して、指定したシーン情報を取得する

  また、シーンコンテンツを表す構造体CellSearchVideoSceneInfoおよび、
  シーンの種別を表す定数CellSearchSceneTypeを追加しました。

- 録画ユーティリティにおいてSDK300より動画のメタデータ(開発者用データなど)を
  付加することができるようになりました。
  これに伴い、ビデオコンテンツに設定される開発者用データを取得する関数、
  cellSearchGetContentInfoDeveloperData()を追加しました。

  開発者用データは以下のようにして利用することが出来ます。

  動画のメタデータ(開発者用データ)に、例えばカレントユーザのユーザIDを
  設定して録画し、動画のメタデータファイルを生成します。

  これを利用し、アプリケーション内でビデオコンテンツを検索したあと、
  取得したコンテンツ情報の開発者用データを調べて取捨選択することによって、
  例えば自分のプレイを録画した動画だけが一覧表示されるといった
  仕組みを設けることができます。

  このように動画のメタデータ(開発者用データ)として、以下の応用例のように
  様々な情報を設定することで利用方法の幅が広がります。

  (応用例)
      ユーザIDとキャラクタ名を
      動画のメタデータ(開発者用データ)に設定した場合

      あるユーザのプレイしたゲームアプリケーションで任意のキャラクタ
      (例: ボスキャラクタ)の登場する動画を取捨選択し、ボスキャラクタ
      との対戦の様子を集めた動画集を作成する。

サンプルの追加

- cell\samples\sdk\sysutil\search_scene_demo
  録画ユーティリティで作成した動画やシーンをコンテンツ検索ユーティリティで
  検索するサンプル

カスタムテーマユーティリティ
============================

新規機能

- RAF(Rich Appearance Format)を含むテーマファイルは、
  PlayStation(R)3 のシステムソフトウェア上で動作するようになりました。
  よって、正式版として提供します。

- RAFシーンファイル内に記述するテクスチャのマップ方式
  (<texture>要素のtype属性)に指定できる値として、tangent_normal_mapを
  追加しました。タンジェント空間での法線として扱います。

仕様変更

- 以下の、RAFのActorに設定するモデルのポリゴン数制限を削除しました。

    Actorに設定するモデルのポリゴン数は30000に制限されます。

- RAFのActorに関する中間バッファの使用量について、
  以下の仕様を追加しました。

  - 中間バッファ使用量として、Actor個数分の出力モデルデータの
    合計サイズは1.25MBに制限されます。
    Actorの出力モデルデータサイズは次のとおり計算されます。

      (ポリゴン数 * 6) + (頂点数 * 頂点サイズ)

バックグラウンドダウンロードユーティリティ
==========================================

仕様変更

- バックグラウンドダウンロードの最大登録数(BGDLキューの数)を16個から
  32個に変更しました。

----------------------------------------------------------------------
C/C++_Standard_Library
----------------------------------------------------------------------

仕様変更

<SPU>

- SPU DLLから呼び出された場合のatexit()関数の仕様を変更しました。
  DLLはDLLごとに、関数ポインタを登録するキューを持ち、
  DLLのアンロード時に登録された関数を呼び出します。

----------------------------------------------------------------------
SPU Runtime
----------------------------------------------------------------------

libspurs
========

<全般>

サンプルの追加

- cell\samples\tutorial\FunctionOffloadToSpu\ppu_call_by_jdl
  JDLとlibswcacheを用いてオフロードした先のSPUからPPUの関数を呼び出す
  方法を示すサンプル

サンプルの変更(cell\samples\sdk\spu_library\libspurs\advanced\)

- job_dynamic_job_submitサンプルを削除しました。

  上記サンプルは、SPURSジョブチェインに対して動的にジョブを投入する方法
  を示したものでしたが、同等の機能をSDKライブラリ(SPURSジョブキュー)
  として、SDK250.001から提供するようになっております。
  これまで移行期間として上記サンプルも合わせて提供しておりましたが
  SDK300.001より削除しました。

    関連情報：cell\info\old\250.001\Important_Changes_*.txt

<コア>

新規機能

- SDK280.001のImportant_Changes_*.txtの「新規ライブラリ及び新規ツール」
  にて、限定リリースのアナウンスをしましたシステムワークロードの機能を
  正式版として提供します。

    関連情報：cell\info\old\280.001\Important_Changes_*.txt

- システムワークロードの実行がデッドラインミスした際にプリエンプトされ
  るSPUを、以下の関数で設定できるようになりました。

    cellSpursSetPreemptionVictimHints()

  しかしながら、デッドラインミス発生時のプリエンプト候補となるSPUごとの
  フラグ isPreemptible は Cell OS Lv-2 に与えるヒントに過ぎません。
  trueを設定されたSPUがなくても、デッドラインミスが発生すればSPUは
  プリエンプトされます。その場合にプリエンプトされるSPUは不定となります。

<ジョブキュー>

新規機能

- SPURSジョブキューにおいて、コマンドキューに空きがないためジョブを
  投入できないときに、待ち状態に入らずに直ちにリターンしてエラーを返す
  CopyPushインタフェースを追加しました。

  これに伴い、以下の関数及びメソッドを追加しました。

  - ジョブのジョブディスクリプタをポートに割り当てられたバッファにコピー
    し、そのコピーをジョブキューモジュールに引き渡す関数及びメソッド

    - C言語のインターフェース
      - cellSpursJobQueuePortTryCopyPush()

    - C++言語のインターフェース
      - cell::Spurs::JobQueue::Port::tryCopyPush()
      - cell::Spurs::JobQueue::PortContainer::tryCopyPush()

  - ジョブ間での同期をとるためのタグIDを指定して、
    ジョブのジョブディスクリプタをポートに割り当てられたバッファにコピー
    し、ジョブキューモジュールに引き渡す関数及びメソッド

    - C言語のインターフェース
      - cellSpursJobQueuePortTryCopyPushJob()

    - C++言語のインターフェース
      - cell::Spurs::JobQueue::Port::tryCopyPushJob()
      - cell::Spurs::JobQueue::PortContainer::tryCopyPushJob()

サンプルの追加

- cell\samples\sdk\spu_library\libspurs\jobqueue\jobqueue_flush_trans_vertex
  頂点変換を題材にして、SPURSジョブキューのJOBLISTとFLUSHコマンド
  の使用方法を示すサンプル

サンプルの変更(cell\samples\sdk\spu_library\libspurs\jobqueue\)

- hello_and_yieldサンプル、及びsync_commandサンプルが置いてある
  ディレクトリ名を変更しました。 

  (旧) hello_and_yield 
  (新) jobqueue_hello_and_yield 

  (旧) sync_command 
  (新) jobqueue_sync_command 

<タスク>

新規機能

- SPURSタスクモジュールのトレースが出力されるようになりました。

  プログラム名"TKST"のUSER_START、USER_STOPがタスクモジュールの
  開始、終了をそれぞれ表します。


libspudll
=========

新規機能

- SPU DLL内の関数内で定義された静的オブジェクトのデストラクタが、
  メイン関数の終了時には呼ばれているが、DLLのアンロード時には
  呼ばれていない問題がありました。

  この問題に対する「C/C++ 標準ライブラリ」の仕様変更に伴い、
  アンロード時にも呼ばれるようになりました。

libswcache
==========

新規機能

- cell\target\common\include\cell\swcache\pointer.hをインクルードする前に
  CELL_SWCACHE_SIZE_CHECKプリプロセッサマクロを定義しておくことで、
  cell::swcache::PointerテンプレートクラスでDefaultCacheにキャッシュ
  されているオブジェクトよりも大きいサイズのオブジェクトをキャッシュしよう
  とした際に、ASSERTで止めることができるようになりました。

- cell\target\common\include\cell\swcache\patch_object.hをインクルードする前に
  CELL_SWCACHE_SIZE_CHECKプリプロセッサマクロを定義しておくことで、
  cell::swcache::PatchObjectテンプレートクラスでDefaultCacheにキャッシュ
  されているオブジェクトよりも大きいサイズのオブジェクトをキャッシュしよう
  とした際に、ASSERTで止めることができるようになりました。

  上記の新機能は、エイリアスチェックにおいて存在した以下の制限事項に
  対処するためのものです。
  
    オブジェクトの先頭アドレスが一致した際、キャッシュオブジェクトのサイズが
    異なる場合でもキャッシュヒットと判定されます。最初にヒープに領域を確保した
    際のキャッシュサイズより大きいサイズのオブジェクトが、後からキャッシュヒッ
    トとして検出されると、キャッシュオブジェクトの領域外へのデータアクセスを行
    ってしまいます。

    このようなケースは基底クラスとその派生クラスを用いてデータにアクセスする
    際に発生します。

- DefaultCacheにキャッシュされているオブジェクトの内容を
  ProDG Debugger for PlayStation(R)3を用いてダンプするための
  PS3PrintCellSwcacheDefaultCache()マクロが追加されました。

----------------------------------------------------------------------
Network
----------------------------------------------------------------------

libnet
======

仕様変更

- UDPP2P ヘッダによるオーバーヘッド削減のため、
  UDPP2P ヘッダの仕様を変更しました。

libssl
======

新規機能

- SSL証明書「GeoTrust Equifax Secure Global eBusiness CA-1」を追加しました。
  これに伴い、以下の証明書ロードフラグを追加しました。

    CELL_SSL_LOAD_CERT_EQUIFAX_SEC_G_EBUS1

libnetctl
=========

新規機能

- システムソフトウェア側で画面表示している最中でも、ネットワーク開始
  ダイアログユーティリティを強制終了させることができる、以下の関数を
  追加しました。
  
  - cellNetCtlNetStartDialogAbortAsync() 

----------------------------------------------------------------------
PlayStation(R)Network (NP)
----------------------------------------------------------------------

NPベーシック
============

新規機能

- ゲーム起動招待メッセージ、およびゲーム起動添付カスタムデータ付き
  メッセージに、有効期限を指定できるようになりました。

  sceNpBasicSendMessageGui()に引数として渡す
  構造体SceNpBasicMessageDetailsのメンバmsgFeaturesに
  SCE_NP_BASIC_MESSAGE_FEATURES_BOOTABLEを指定する際、
  SCE_NP_BASIC_MESSAGE_FEATURES_EXP_MIN(m)で得られる値との
  論理和をmsgFeaturesに指定すると、分単位でメッセージの
  有効期限を指定できます。

仕様変更

- ProDG Target Manager for PlayStation(R)3で
  ゲーム起動招待メッセージ、ゲーム起動添付カスタムデータ付き
  メッセージの起動属性を指定して、アプリケーションを起動した場合、
  sceNpBasicRecvMessageAttachmentLoad()は、
  /app_home/bootable_message_data.datファイルを添付データとして
  読み込むようになりました。

  Target Manager上でのゲーム起動招待メッセージ、ゲーム起動添付
  カスタムデータ付きメッセージの起動属性は、メニューから

  ターゲット -> プロパティ -> ロード オプション (2) -> XMBの設定を上書き

  を選択し、「ゲーム属性」で指定することができます。

  この起動属性は、Target Manager v300.1から設定可能です。

サンプルの変更(cell\samples\sdk\network\np\np_basic)

- 有効期限を指定したゲーム起動招待メッセージ、および
  ゲーム起動添付カスタムデータ付きメッセージを送信できるように
  なりました。


NP プロファイル
===============

新規機能

- sceNpProfileCallGui()を呼び出すことによって表示された、
  プレイヤーのオンラインプロファイルのGUIを中断する、
  sceNpProfileAbortGui()を追加しました。

  なお、NP プロファイルの関数リファレンスは、
  「NPライブラリ共通API リファレンス」にて提供しておりますので
  ご注意ください。

サンプルの変更(cell\samples\sdk\network\np\np_basic)

- sceNpProfileAbortGui()によるオンラインプロファイルのGUI表示を
  中断できるようになりました。

NP IN-GAMEコマース2
===================

新規機能

- プロダクトIDを複数指定して、指定したプロダクトのゲーム情報を
  リストで取得する機能を追加しました。
  このリストを、「プロダクト情報リスト」と呼びます。

  これに伴い、以下の関数を追加しました。

  - sceNpCommerce2GetProductInfoListCreateReq()
    プロダクト情報リストを取得するためのコマース2リクエストを作成する関数

  - sceNpCommerce2GetProductInfoListStart()
    プロダクト情報リストの取得を開始する関数

  - sceNpCommerce2GetProductInfoListGetResult()
    プロダクト情報リストを取得する関数

  - sceNpCommerce2InitGetProductInfoListResult()
    sceNpCommerce2GetProductInfoListGetResult()を用いて取得した
    プロダクト情報リストを初期化し、
    sceNpCommerce2GetGameProductInfoFromGetProductInfoListResult()で
    プロダクト情報を読み出せるようにする関数

  - sceNpCommerce2DestroyGetProductInfoListResult()
    sceNpCommerce2InitGetProductInfoListResult()で初期化した
    プロダクトデータを破棄する関数

  - sceNpCommerce2GetGameProductInfoFromGetProductInfoListResult()
    初期化済みのプロダクト情報リストから、プロダクト名や含まれている
    SKU数などのゲームプロダクト情報を読み出す関数

- ストアブラウズ処理を開始する関数sceNpCommerce2ExecuteStoreBrowse()の
  第一引数targetTypeで指定する起動タイプに、プロダクトコード入力
  (SCE_NP_COMMERCE2_STORE_BROWSE_TYPE_PRODUCT_CODE)を追加しました。

- プロダクトの購入処理をインゲームで行う
  インゲームプロダクトストアブラウズ機能を追加しました。
  これに伴い、以下の関数を追加しました。

  - sceNpCommerce2DoProductBrowseStartAsync()
    インゲームプロダクトストアブラウズ処理の開始

  - sceNpCommerce2DoProductBrowseFinishAsync()
    インゲームプロダクトストアブラウズ処理の終了

  従来のストアブラウズ機能では、アプリケーションをいったん終了し、
  ユーザの購入操作後に、自動的にアプリケーションを再起動する
  必要がありました。

  今回追加したインゲームプロダクトストアブラウズ機能では、
  アプリケーションを終了せずプロダクトの購入処理を行うため、
  アプリケーションの再起動は不要になりました。

- 国/地域ごとに、適切な書式の価格を出力する関数
  sceNpCommerce2GetPrice()を追加しました。

  価格の書式は、通貨コードを付ける位置や、小数点はカンマかピリオドかなど、
  国/地域ごとに表記が異なります。

  この関数は、セッション作成時にサーバから取得したアカウントのリージョン
  情報に従って、適切な書式の価格文字列を返しますので、ユーザに対して
  価格を表示する際にご利用ください。

仕様変更

- 2009年4月28日に行われた PlayStation(R)Network サーバの更新において、
  sceNpCommerce2DoDlListStartAsync()の第2引数service_idが
  使用可能になりました。

  service_idでサービスIDを指定すると、そのサービスに限定した
  ダウンロードリストを表示することができます。

サンプルの変更(cell\samples\sdk\network\np\np_gui_commerce2)

- トップ画面に、以下のメニューを追加しました。

  - サービスID限定のダウンロードリスト表示を行うメニュー

  - インゲームプロダクトストアブラウズを行うメニュー

  - プロダクトコード入力モードのストアブラウズを行うメニュー

- 価格表示にsceNpCommerce2GetPrice()を使用するよう変更しました。


NPスコアランキング
==================

新規機能

- 不適切な文字列を検出し、'*' に変換する以下の関数を追加しました。

    sceNpScoreSanitizeComment()
    sceNpScoreSanitizeCommentAsync()

  全プレイヤーが目にしつつ、長期間にわたり残る文字列をチェックする
  用途などにご使用ください。

- 不適切な文字列をチェックする以下の関数で指定できる文字列の
  最大長を表す、以下の定数を追加しました。

  ----------------------------------------------------------------------
  定数                                  関連する関数
  ----------------------------------------------------------------------
  SCE_NP_SCORE_SANITIZE_COMMENT_MAXLEN  sceNpScoreSanitizeComment()
                                        sceNpScoreSanitizeCommentAsync()
  ----------------------------------------------------------------------
  SCE_NP_SCORE_CENSOR_COMMENT_MAXLEN    sceNpScoreCensorComment()
                                        sceNpScoreCensorCommentAsync()
  ----------------------------------------------------------------------

  文字列は UTF-8 で設定されるため、文字長ではなくバイト長で
  表されています。

仕様変更

- 以下の関数でチェックできる不適切な文字列の最大長を、
  255バイトに拡張しました。

    sceNpScoreCensorComment()
    sceNpScoreCensorCommentAsync()

  これに伴い、上記関数の第2引数の型を、
  「const SceNpScoreComment *」から「const void *」に変更しました。

サンプルの変更(cell\samples\sdk\network\np\npclient)

- 新規関数sceNpScoreSanitizeComment()を用いて、不適切な文字列を
  チェックする機能を追加しました。

NP トロフィー
=============

新規機能

- システムソフトウェアの「トロフィーコレクション」画面で、
  拡張パック毎に、各トロフィーの取得状況をグループ化して
  表示できるようになりました。

  拡張パック毎に、各トロフィーの取得状況をグループ化する場合は、
  拡張パック単位でトロフィーグループを作成し、以下の設定を
  行ってください。

    - 拡張パックのトロフィーが、拡張パックのトロフィーグループに
      属するように、トロフィーセットを定義する。

    - トロフィーグループ毎に、必ずデフォルト言語の静止画アイコン、
      タイトル名、詳細情報を設定する。
      
      デフォルト言語以外の言語の静止画アイコン、タイトル名、
      詳細情報の設定は、任意です。

  詳細については、「トロフィーシステム 概要」を参照ください。

----------------------------------------------------------------------
libvoice
----------------------------------------------------------------------

新規機能

- libvoiceは複数の音声入力ポート(CELLVOICE_PORTTYPE_IN_VOICE)間で
  音声デコーダを共有するようになりました。

  libvoiceでは、システムメモリモードの場合は、最大32個の音声デコーダを、
  1MBのゲームメモリモードの場合は、8個の音声デコーダを内部で確保します。
  各音声入力ポートは音声処理の為に音声デコーダを必要とするため、
  従来は音声デコーダの数によって音声入力ポートの数が制限されていました。

  これらの音声デコーダは、複数の音声入力ポート
  (CELLVOICE_PORTTYPE_IN_VOICE)間で共有されるようになった為、
  音声デコーダの数によって音声入力ポートの数が制限されなくなりました


----------------------------------------------------------------------
cgc
----------------------------------------------------------------------

新規機能

- オプション -no-capture および -no-capture-preprocess を追加しました。

  Cgc キャプチャは、オプションまたは環境変数から有効にすることができます。
  しかし、Cgc キャプチャをオフにする手段がありませんでした。

  上記 2 つの新規オプションを指定することにより、オプションから
  Cgc キャプチャを強制的にオフにできるようになりました。

  この問題は、DLL 使用時に Windows において環境変数が設定されない
  問題が原因で発生していました。

  -no-captureオプションは、他のオプションや環境変数にかかわらず、
  キャプチャを強制的にオフにします。
  これは、事実上 Cgc のデフォルト動作と同じです。

  -no-capture-preprocessオプションは、前処理後のソースのキャプチャを
  強制的にオフにします。

  Cgc キャプチャをオンに設定し、前処理済みのソースを指定していた場合
  (環境変数 SCECGC_CAPTUREPREPROC またはオプション -capture-preprocess 
  を指定していた場合)、-no-capture-preprocess を指定すると、
  Cgcは、通常のキャプチャを行います。

  Cgc キャプチャをオンに設定し、前処理済みのソースを指定していない場合
  (環境変数 SCECGC_CAPTUREPREPROC、オプション -capture-preprocess 
  いずれも指定していない場合)、-no-capture-preprocess を指定しても
  効果はありません。

- #pragma disablepc TEXCOORD <#>
  テクスチャ座標ごとにパースペクティブコレクションを無効にする
  プラグマを追加しました。
  これは、コマンドラインオプションから無効にされた
  テクスチャ座標と累積します。

- デフォルトのNVシェーダバイナリレイアウト (-mnvb) とは異なる
  レイアウトを生成するオプション (-mnvbh) を追加しました。

  デフォルトのNVシェーダバイナリレイアウト (-mnvb) では、
  プログラムヘッダ (フラグメントや頂点) は、パラメータテーブルの後に
  生成されます。

  -mnvbhを使用すると、プログラムヘッダ (フラグメントや頂点) が、
  NVバイナリヘッダの後、かつパラメータテーブルの前に生成されるような
  レイアウトが作成されます。

- libcgc が、オプション -fno-exceptions および -fno-rtti を
  指定したリンクや、この 2 つのオプションを用いてコンパイルされた
  オジェクトとのリンクができない、という制限がなくなりました。

  なお、「Cgコンパイラ ユーザガイド」には、上記制限がなくなった件
  については記載されておりませんので、ご注意ください。

仕様変更

- -noentry オプションを削除しました。
  Cg コンパイラは、-noentry を有効なオプションとしてリストアップして
  いましたが、実際には PS3 SDK では機能していませんでした。

----------------------------------------------------------------------
codec
----------------------------------------------------------------------

libvdec
=======

新規機能

- libvdecを用いてDivX(R)ビデオのデコードを行う際、
  デコードに必要なメモリサイズを削減しました。

  代表例として、DivX(R)ビデオのCODEC固有情報を全く指定しない場合の、
  デコードに必要なメモリサイズの比較を以下に示します。

  - Mobileプロファイルの場合
    SDK280: 2.2MB
    SDK300: 1.6MB

  - Home Theaterプロファイルの場合
    SDK280: 4.3MB
    SDK300: 3.5MB

  - HD 720プロファイルの場合
    SDK280: 7.8MB
    SDK300: 6.6MB

  - HD 1080プロファイルの場合
    SDK280: 15.5MB
    SDK300: 13.5MB

  なお、「libvdec リファレンス」の構造体CellVdecDivxSpecificInfo2の
  「備考」の表においては、上記の情報が反映されていませんので、
  ご注意ください。

libsail
=======

libsail_rec
===========

新規機能

- MPEG-4 AVCエンコーダのエンコード処理高速化について、
  以下の2つの手法に対応しました。

  - 複数SPU使用による高速化
    複数のSPUを並列に使用することで、エンコードの高速化を行います。
    構造体CellSailRecorderに各種パラメータを設定する関数
    cellSailRecorderSetParameter()のパラメータタイプ
    CELL_SAIL_PARAMETER_VENC_AVC_NUM_OF_SPUSにおいて、
    MPEG-4 AVCエンコーダが使用するSPU数を2以上に設定してください。

  - マルチスライスによる高速化
    複数SPU使用による高速化を行う場合、MPEG-4 AVCエンコーダ拡張
    パラメータ構造体CellSailAvcEncExParamの拡張パラメータ識別番号
    CELL_SAIL_AVC_ENC_EX_PARAM_MAX_SLICE_NUMにおいて、
    ピクチャ内の最大スライス数を2以上に設定することで、
    さらに高速化することができます。

    また、このパラメータには、cellSailRecorderSetParameter()の
    パラメータタイプCELL_SAIL_PARAMETER_VENC_AVC_NUM_OF_SPUSに指定する
    SPU数と同じ値を指定することを推奨します。

- ビデオエンコーダのパラメータを設定する構造体CellSailBsVideoParameter
  において、ビデオエンコーダの種類として、MPEG-4ビデオHDエンコーダ
  が指定できるようになりました。

  MPEG-4ビデオHDエンコーダはACE(Advanced Coding Efficiency)プロファイル
  を使用し、1SPUで画枠サイズ1280x720、30フレームのエンコードを
  リアルタイムに行うことができます。

----------------------------------------------------------------------
物理効果サンプル (cell\samples\tutorial\PhysicsEffects)
----------------------------------------------------------------------

物理効果ライブラリ及び物理効果用フレームワーク
==============================================

仕様変更

- 剛体の複合形状に含めることのできる形状数を最大64個までに拡張しました。

サンプルの変更(cell\samples\tutorial\PhysicsEffects\Tutorials\Tutorial1)

- 剛体の複合形状に含めることのできる形状数の拡張(最大64個まで)に
  対応しました。

----------------------------------------------------------------------
サンプルプログラム (cell\samples)
----------------------------------------------------------------------

新規機能

- 共通Makefileにおいて、SPASM形式のファイルがビルド対象に含まれている
  場合のビルドが可能になりました。

----------------------------------------------------------------------
