#########################################################
# SCE CONFIDENTIAL
# PlayStation(R)3 Programmer Tool Runtime Library 310.001
# Copyright (C) 2009 Sony Computer Entertainment Inc.
# All Rights Reserved.
#########################################################


[Files]


# Without no_replace, GENERATE will always replace files without
# JDL section markers, even if they have been changed by hand.

# Source files
$(CELL_SDK)/host-common/jdl/JobHeaderTemplate.h         %(EOL:fileEOL)%(GENERATE)$(_Dot2JdlPath_)$(jdl2HeaderPath)$(managedFilePrefix)$(class).h%(END)%(END)
$(CELL_SDK)/host-common/jdl/JobDescriptorTemplate.cpp   %(EOL:fileEOL)%(GENERATE)$(_Dot2JdlPath_)$(jdl2CommonCppPath)$(managedFilePrefix)$(class).cpp%(END)%(END)
$(CELL_SDK)/host-common/jdl/JobPrxTemplate.cpp          %(EOL:fileEOL)%(IF_EQUAL:genPrx:1)%(GENERATE)$(_Dot2JdlPath_)$(jdl2PpuCppPath)$(managedFilePrefix)$(class)_prx.cpp%(END)%(END)%(END)
$(CELL_SDK)/host-common/jdl/JobMainTemplate.cpp         %(EOL:fileEOL)%(FOR_METHODS)%(IF_EQUAL:ppuCall:0)%(IF_NOT_EQUAL:genJob:0)%(GENERATE)$(_Dot2JdlPath_)$(jdl2SpuCppPath)$(managedFilePrefix)$(JobFileName_macro)$(jobFilePostfix).cpp%(END)%(END)%(END)%(END)%(END)
$(CELL_SDK)/host-common/jdl/PpuJobMainTemplate.cpp      %(EOL:fileEOL)%(FOR_METHODS)%(IF_NOT_EQUAL:ppuCall:0)%(GENERATE)$(_Dot2JdlPath_)$(jdl2PpuCppPath)$(managedFilePrefix)$(JobFileName_macro)_ppucall_jobMain.cpp%(END)%(END)%(END)%(END)
$(CELL_SDK)/host-common/jdl/JobImplTemplate.cpp         %(EOL:fileEOL)%(FOR_METHODS)%(IF_EQUAL:genJobImpl:1)%(IF_NOT_EQUAL:genJob:0)%(GENERATE:no_replace)$(_Dot2JdlPath_)$(jdl2SpuCppPath)$(JobFileName_macro)_impl.cpp%(END)%(END)%(END)%(END)%(END)
$(CELL_SDK)/host-common/jdl/JobImplTemplate2.cpp        %(EOL:fileEOL)%(FOR_METHODS)%(IF_EQUAL:genJobImpl:2)%(IF_NOT_EQUAL:genJob:0)%(GENERATE)$(_Dot2JdlPath_)$(jdl2SpuCppPath)$(JobFileName_macro)_impl.cpp%(END)%(END)%(END)%(END)%(END)
$(CELL_SDK)/host-common/jdl/UserDefinedHeaderTemplate.h %(EOL:fileEOL)%(GENERATE:no_replace)$(_Dot2JdlPath_)$(jdl2HeaderPath)$(class)$(userDefinedHeaderPostfix).h%(END)%(END)
$(CELL_SDK)/host-common/jdl/SpuGetVtableTemplate.cpp	%(EOL:fileEOL)%(IF_EXIST:VirtualClassList)%(GENERATE)$(_Dot2JdlPath_)$(jdl2HeaderPath)$(managedFilePrefix)$(class)_GetVtable.cpp%(END)%(END)%(END)
$(CELL_SDK)/host-common/jdl/ClassIdTableTemplate.h		%(EOL:fileEOL)%(IF_EXIST:VirtualClassList)%(GENERATE)$(_Dot2JdlPath_)$(jdl2HeaderPath)$(managedFilePrefix)$(class)_ClassIdTable.h%(END)%(END)%(END)

# VSI Project files
$(CELL_SDK)/host-common/jdl/MultiJobVsiProjectTemplate.vcproj %(IF_EQUAL:genVsProj:1)%(WINDOWS_EOL)%(GENERATE:no_replace)$(_Dot2JdlPath_)$(jdl2BuildPath)$(class)_jobs.vcproj%(END)%(END)%(END)
$(CELL_SDK)/host-common/jdl/SpuLibVsiProjectTemplate.vcproj   %(IF_EQUAL:genVsProj:1)%(WINDOWS_EOL)%(GENERATE:no_replace)$(_Dot2JdlPath_)$(jdl2BuildPath)$(class)_lib.vcproj%(END)%(END)%(END)
$(CELL_SDK)/host-common/jdl/PrxVsiProjectTemplate.vcproj      %(IF_EQUAL:genPrx:1)%(IF_EQUAL:genVsProj:1)%(WINDOWS_EOL)%(GENERATE:no_replace)$(_Dot2JdlPath_)$(jdl2BuildPath)$(class)_prx.vcproj%(END)%(END)%(END)%(END)
$(CELL_SDK)/host-common/jdl/JdlGenVsiProjectTemplate.vcproj   %(IF_EQUAL:genVsProj:1)%(WINDOWS_EOL)%(GENERATE:no_replace)$(_Dot2JdlPath_)$(jdl2BuildPath)$(class)_jdl_gen.vcproj%(END)%(END)%(END)

# Makefiles
$(CELL_SDK)/host-common/jdl/PrxMakefileTemplate.mk        %(IF_EQUAL:genPrx:1)%(IF_EQUAL:genMakefiles:1)%(GENERATE)$(_Dot2JdlPath_)$(jdl2BuildPath)$(managedFilePrefix)$(class)_prx.mk%(END)%(END)%(END)
$(CELL_SDK)/host-common/jdl/IncludeJobMakefileTemplate.mk %(IF_EQUAL:genMakefiles:1)%(GENERATE)$(_Dot2JdlPath_)$(jdl2BuildPath)$(managedFilePrefix)$(class).mk%(END)%(END)
$(CELL_SDK)/host-common/jdl/RootMakefileTemplate.mk       %(IF_EQUAL:genMakefiles:1)%(GENERATE:no_replace)$(_Dot2JdlPath_)$(jdl2BuildPath)Makefile%(END)%(END)
$(CELL_SDK)/host-common/jdl/JobMakefileTemplate.mk        %(IF_EQUAL:genMakefiles:1)%(FOR_METHODS)%(GENERATE:no_replace)$(_Dot2JdlPath_)$(jdl2BuildPath)$(JobFileName_macro)$(jobFilePostfix).mk%(END)%(END)%(END)


[DefaultSettings]


#############################################
### Default filename settings

managedFilePrefix = _
jobFilePostfix = _spurs_job
prxDefaultPathPrefix = /app_home/
userDefinedHeaderPostfix = _user_defined

spuBinaryPrefix ~= %(IF_NOT_EQUAL:jobSpec:JobqueueJob)job_%(ELSE)jqjob_%(END)
spuBinaryPostfix = _spurs_job


#############################################
### Default paths

jdl2BuildPath = 
build2JdlPath = 
build2TargetPath = 
jdl2CommonCppPath =
jdl2PpuCppPath =
jdl2SpuCppPath =
jdl2HeaderPath =


#############################################
### Default file gen options

# genJobImpl: 0,1,2
genJobImpl = 1
genJob = 1
genMakefiles = 0
genVsProj = 1
genPrx = 1

# create a global macros
JobFileName_macro ~= %(IF_EXIST:namespace)%(FOR_TOKENS:namespace:$(COLON)$(SPACE))$(TOKEN)_%(END)%(END)%(IF_EXIST:cppClass)%(FOR_TOKENS:cppClass:$(COLON)$(SPACE)<>,)$(TOKEN)_%(END)%(END)$(M.NAME)
JobMethodName_macro ~= %(IF_EXIST:cppClass)%(FOR_TOKENS:cppClass:$(COLON)$(SPACE)<>,)$(TOKEN)_%(END)%(END)$(M.NAME)
_ALIGNSUB1 ~= ($(dmaPadAlignThreshold)-1)
_P_BUFFER_1 ~= (($(P.buffer.1))%(IF_EQUAL:jdlSizeByType:1)%(IF_NOT_EXIST:P.size_in_bytes)*sizeof(*(($(P.TYPE))0))%(END)%(END))
_P_BUFFER_2 ~= (($(P.buffer.2))%(IF_EQUAL:jdlSizeByType:1)%(IF_NOT_EXIST:P.size_in_bytes)*sizeof(*(($(P.TYPE))0))%(END)%(END))
_P_BUF_SIZE ~= %(IF_EXIST:P.buffer.2)$(_P_BUFFER_2)%(ELSE)$(_P_BUFFER_1)%(END)
PARAM_MAX_LS_SIZE_EXPR ~= (($(_P_BUFFER_1)%(IF_EXIST:P.swcache)+16%(END)%(IF_INT_LESS:P.aligned:dmaPadAlignThreshold)+2*$(_ALIGNSUB1))&~$(_ALIGNSUB1)%(ELSE))%(END))
PARAM_CONST_LS_SIZE_EXPR ~= %(IF_EXIST:P.buffer.2)0%(ELSE)$(PARAM_MAX_LS_SIZE_EXPR)%(END)
PARAM_DMA_LIST_NUM_EXPR ~= (($(PARAM_MAX_LS_SIZE_EXPR)+16*1024-1)/(16*1024))
_P_LS_PTR_IN ~= %(IF_EXIST:P.non_null)($(P.TYPE))_ibuf%(ELSE)_$(P.NAME)_eal ? ($(P.TYPE))_ibuf : ($(P.TYPE))(uintptr_t)0%(END)
_P_LS_PTR_OUT ~= %(IF_EXIST:P.non_null)($(P.TYPE))_obuf%(ELSE)_$(P.NAME)_eal ? ($(P.TYPE))_obuf : ($(P.TYPE))(uintptr_t)0%(END)

# EOL option: "windows" or "unix"
fileEOL = windows


#############################################
### Souce file headers

copyrightSourceHeader = \
/*   SCE CONFIDENTIAL                                       */$(NEWLINE)\
/*   PlayStation(R)3 Programmer Tool Runtime Library 310.001 */$(NEWLINE)\
/*   Copyright (C) 2009 Sony Computer Entertainment Inc.    */$(NEWLINE)\
/*   All Rights Reserved.                                   */


#############################################
### Default build setup

# Specify 'Job20' or 'JobqueueJob'.
jobSpec = Job20

# Specify non-zero value when submitting to SPURS Jobqueue.
useJobqueue = 0

# -mspurs-job or -mspurs-job-initialize
spursJobBuildFlag ~= %(IF_NOT_EQUAL:jobSpec:JobqueueJob)-mspurs-job%(ELSE)-mspurs-job-initialize%(END)
spursJobBssClear = 0

# jobbin2 feature (BSS included in binary or not)
spursJobBinary2 = 0

# -fpic or specify nothing for non-pic
picBuildFlag = -fpic

jobCompileFlagsDebug = -O0 -Wall -fstack-check -fno-exceptions -fno-rtti -g -ffunction-sections -fdata-sections
jobLinkFlagsDebug = -O0 -Wl,-q -Wl,--gc-sections
jobCompileFlagsOpt = -O2 -Wall -fno-exceptions -fno-rtti -ffunction-sections -fdata-sections
jobLinkFlagsOpt = -O2 -Wl,-q -Wl,--gc-sections

AdditionalLibrariesSpu ~= %(IF_EQUAL:jobSpec:JobqueueJob)-lspurs_jq%(END)

#############################################
### Default job setup

jobMainFunctionName ~= %(IF_NOT_EQUAL:jobSpec:JobqueueJob)cellSpursJobMain2%(ELSE)cellSpursJobQueueMain%(END)

jobDescriptorSize = 256
ppuJobDescriptorSize = 256
jobDescriptorSizeMax = 256
jobDescriptorAlignment = 128
stackSize = 8*1024

# cacheInhibit may be 0 or 1.
# 0 means the job binary may be cached.
# 1 means the job binary may not be cached.
cacheInhibit = 0

jobCallbackPostfix =
jobDescriptorPostfix = _jd
initHeaderMethodName = initJob
setParamsMethodName = setParams
serializeMethodName = serializeToMainMemory
getOutputMethodName = getOutput

# All DMAs with aligned<> value of less than dmaPadAlignThreshold 
#  will be padded on input at beginning and end as necessary.
# This must be either 16 or 128
dmaPadAlignThreshold = 128

spursJobCheckFunction ~= %(IF_EQUAL:useJobqueue:0)cellSpursCheckJob%(ELSE)cellSpursJobQueueCheckJob%(END)

# swcache support
useSwcache = 0
Swcache = cell::swcache::DefaultCache<cell::swcache::DefaultHeap>
sizeSwcache = 16*1024
useVirtual = 0

# ppu call support
ppuCall = 0
ppuCallPrefix = ppucall_

# Reserve extra space at end of job descriptor for advanced use cases.
jobDescriptorReservedSpace = 0

# Custom code to insert at end of cellSpursJobMain function.
jobMainAppendCode =

# Custom code to insert at top of source file containing cellSpursJobMain
jobMainCodeFileTop =

# Set to 1 to treat all buffer sizes as multiples of
# sizeof(type) instead of bytes.
jdlSizeByType = 0

# value of CellSpursJobHeader.jobType
spursJobType = 0

#############################################
### SPURS Job parsing setup

# Notes about these variables:
#  These are used internally in the JDL parser.
#  They should be defined here in the config file, not in the JDL input file.

jobKeywords += const
jobKeywords += manual
jobKeywords += pass_by_ref
jobKeywords += fence
jobKeywords += phony/reserve
jobKeywords += swcache
jobKeywords += swcache/virtual
jobKeywords += size_in_bytes
jobKeywords += non_null

# buffer keywords
jobKeywordsWithArgs += buffer/input/in
jobKeywordsWithArgs += buffer/input/output/inout
jobKeywordsWithArgs += buffer/output/out
jobKeywordsWithArgs += buffer/cache
jobKeywordsWithArgs += buffer/phony/scratch

# other keywords
jobKeywordsWithArgs += aligned:1

# keywords used to left of method name
jdlMethodKeywordsLeft += virtual static

# keywords used to right of method name
jdlMethodKeywordsRight += const

# method parameter text replacement macro.
# the parser defines _MethodParamString_ internally.
# this can be modified to insert extra parameters for groups of jobs.
paramsReplacementMacro ~= \
%(IF_NOT_EXIST:M.EXTRA.static)%(IF_EXIST:cppClass)\
%(IF_EXIST:M.EXTRA.const)in%(ELSE)inout%(END)<%(IF_EQUAL:jdlSizeByType:1)1%(ELSE)sizeof(%(IF_EXIST:namespace)$(namespace)::%(END)$(cppClass))%(END)>\
%(IF_EXIST:M.EXTRA.virtual) virtual%(END) %(IF_EXIST:M.EXTRA.const)const%(END) \
%(IF_EXIST:namespace)$(namespace)::%(END)$(cppClass)* _pthis_, %(END)%(END)$(_MethodParamString_)
