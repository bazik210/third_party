%(/*)
#########################################################
# SCE CONFIDENTIAL
# PlayStation(R)3 Programmer Tool Runtime Library 310.001
# Copyright (C) 2009 Sony Computer Entertainment Inc.
# All Rights Reserved.
#########################################################
%(*/)\
$(copyrightSourceHeader)

///////////////////////////////////////////////////////////////////////////////
//
//  JDL GENERATED FILE - DO NOT EDIT THIS FILE DIRECTLY
// 
///////////////////////////////////////////////////////////////////////////////

#ifndef __SPU__

#include <sys/prx.h>
#include <cell/spurs/job_descriptor.h>

SYS_MODULE_INFO($(class), 0, 1, 1);
SYS_MODULE_START(_$(class)_prx_entry);

%(FOR_METHODS)%(IF_EQUAL:ppuCall:0)\
%( IF_EQUAL:spursJobBinary2:1)\
extern "C" CellSpursJobHeader _binary_$(spuBinaryPrefix)$(managedFilePrefix)$(JobFileName_macro)$(spuBinaryPostfix)_jobbin2_jobheader;
%( ELSE)\
extern "C" char _binary_$(spuBinaryPrefix)$(managedFilePrefix)$(JobFileName_macro)$(spuBinaryPostfix)_bin_start[];
extern "C" char _binary_$(spuBinaryPrefix)$(managedFilePrefix)$(JobFileName_macro)$(spuBinaryPostfix)_bin_size[];
%( END)\
%(END)%(END)\

struct ___$(class)_info
{
%(FOR_METHODS)%(IF_EQUAL:ppuCall:0)%(IF_EQUAL:spursJobBinary2:0)\
    uint32_t $(JobFileName_macro)_eaBinary;
%(END)%(END)%(END)\
%(FOR_METHODS)%(IF_EQUAL:ppuCall:0)%(IF_EQUAL:spursJobBinary2:0)\
    uint16_t $(JobFileName_macro)_sizeBinary;
%(END)%(END)%(END)\
%(FOR_METHODS)%(IF_EQUAL:ppuCall:0)%(IF_EQUAL:spursJobBinary2:1)\
    uint8_t $(JobFileName_macro)_binaryInfo[10];
%(END)%(END)%(END)\
};

extern "C" int _$(class)_prx_entry(unsigned int args, void* argp)
{
    (void)args;
    ___$(class)_info* retInfo = (___$(class)_info*)argp;
%(FOR_METHODS)%(IF_EQUAL:ppuCall:0)\
%( IF_EQUAL:spursJobBinary2:1)\
	__builtin_memcpy(retInfo->$(JobFileName_macro)_binaryInfo, _binary_$(spuBinaryPrefix)$(managedFilePrefix)$(JobFileName_macro)$(spuBinaryPostfix)_jobbin2_jobheader.binaryInfo, 10);
%( ELSE)\
	retInfo->$(JobFileName_macro)_eaBinary = (((uint32_t)_binary_$(spuBinaryPrefix)$(managedFilePrefix)$(JobFileName_macro)$(spuBinaryPostfix)_bin_start) | $(cacheInhibit));
	retInfo->$(JobFileName_macro)_sizeBinary = CELL_SPURS_GET_SIZE_BINARY((uint32_t)_binary_$(spuBinaryPrefix)$(managedFilePrefix)$(JobFileName_macro)$(spuBinaryPostfix)_bin_size);
%( END)\
%(END)%(END)\
    return SYS_PRX_RESIDENT;
}

#endif // __SPU__

