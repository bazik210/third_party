/*   SCE CONFIDENTIAL                                       */
/*   PlayStation(R)3 Programmer Tool Runtime Library 310.001 */
/*   Copyright (C) 2008 Sony Computer Entertainment Inc.    */
/*   All Rights Reserved.                                   */

CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetReferenceCommand)(CELL_GCM_ARGS(const uint32_t ref));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetJumpCommand)(CELL_GCM_ARGS(const uint32_t offset));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetCallCommand)(CELL_GCM_ARGS(const uint32_t offset));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetReturnCommand)(CELL_GCM_NO_ARGS());
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetAntiAliasingControl)(CELL_GCM_ARGS(const uint32_t enable, const uint32_t alphaToCoverage, const uint32_t alphaToOne, const uint32_t sampleMask));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetWaitLabel)(CELL_GCM_ARGS(const uint8_t index, const uint32_t value));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetWriteCommandLabel)(CELL_GCM_ARGS(const uint8_t index, const uint32_t value));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetWriteBackEndLabel)(CELL_GCM_ARGS(const uint8_t index, const uint32_t value));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetWriteTextureLabel)(CELL_GCM_ARGS(const uint8_t index, const uint32_t value));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetTimeStamp)(CELL_GCM_ARGS(const uint32_t index));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetInvalidateZcull)(CELL_GCM_NO_ARGS());
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetAlphaFunc)(CELL_GCM_ARGS(const uint32_t af, const uint32_t ref));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetBlendColor)(CELL_GCM_ARGS(const uint32_t color, const uint32_t color2));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetBlendEquation)(CELL_GCM_ARGS(const uint16_t color, const uint16_t alpha));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetBlendFunc)(CELL_GCM_ARGS(const uint16_t sfcolor, const uint16_t dfcolor, const uint16_t sfalpha, const uint16_t dfalpha));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetClearSurface)(CELL_GCM_ARGS(const uint32_t mask));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetClearColor)(CELL_GCM_ARGS(const uint32_t color));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetClearDepthStencil)(CELL_GCM_ARGS(const uint32_t value));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetColorMask)(CELL_GCM_ARGS(const uint32_t mask));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetColorMaskMrt)(CELL_GCM_ARGS(const uint32_t mask));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetCullFace)(CELL_GCM_ARGS(const uint32_t cfm));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetDepthBounds)(CELL_GCM_ARGS(const float zmin, const float zmax));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetDepthFunc)(CELL_GCM_ARGS(const uint32_t zf));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetDepthMask)(CELL_GCM_ARGS(const uint32_t enable));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetFrontFace)(CELL_GCM_ARGS(const uint32_t dir));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetLineWidth)(CELL_GCM_ARGS(const uint32_t width));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetLineSmoothEnable)(CELL_GCM_ARGS(const uint32_t enable));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetLineStippleEnable)(CELL_GCM_ARGS(const uint32_t enable));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetLineStipplePattern)(CELL_GCM_ARGS(const uint16_t* pattern, const uint8_t factor));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetLogicOp)(CELL_GCM_ARGS(const uint32_t op));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetPointSize)(CELL_GCM_ARGS(const float size));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetPolygonOffset)(CELL_GCM_ARGS(const float factor, const float units));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetPolySmoothEnable)(CELL_GCM_ARGS(const uint32_t enable));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetPolygonStippleEnable)(CELL_GCM_ARGS(const uint32_t enable));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetPolygonStipplePattern)(CELL_GCM_ARGS(const uint32_t* pattern));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetFrontPolygonMode)(CELL_GCM_ARGS(const uint32_t mode));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetBackPolygonMode)(CELL_GCM_ARGS(const uint32_t mode));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetScissor)(CELL_GCM_ARGS(const uint16_t x, const uint16_t y, const uint16_t w, const uint16_t h));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetShadeMode)(CELL_GCM_ARGS(const uint32_t sm));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetTwoSideLightEnable)(CELL_GCM_ARGS(const uint32_t enable));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetStencilFunc)(CELL_GCM_ARGS(const uint32_t func, const int32_t ref, const uint32_t mask));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetBackStencilFunc)(CELL_GCM_ARGS(const uint32_t func, const int32_t ref, const uint32_t mask));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetStencilMask)(CELL_GCM_ARGS(const uint32_t sm));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetBackStencilMask)(CELL_GCM_ARGS(const uint32_t sm));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetStencilOp)(CELL_GCM_ARGS(const uint32_t fail, const uint32_t depthFail, const uint32_t depthPass));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetBackStencilOp)(CELL_GCM_ARGS(const uint32_t fail, const uint32_t depthFail, const uint32_t depthPass));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetZMinMaxControl)(CELL_GCM_ARGS(const uint32_t cullNearFarEnable, const uint32_t zclampEnable, const uint32_t cullIgnoreW));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetAlphaTestEnable)(CELL_GCM_ARGS(const uint32_t enable));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetBlendEnable)(CELL_GCM_ARGS(const uint32_t enable));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetBlendEnableMrt)(CELL_GCM_ARGS(const uint32_t mrt1, const uint32_t mrt2, const uint32_t mrt3));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetLogicOpEnable)(CELL_GCM_ARGS(const uint32_t enable));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetCullFaceEnable)(CELL_GCM_ARGS(const uint32_t enable));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetDepthBoundsTestEnable)(CELL_GCM_ARGS(const uint32_t enable));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetDepthTestEnable)(CELL_GCM_ARGS(const uint32_t enable));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetDitherEnable)(CELL_GCM_ARGS(const uint32_t enable));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetStencilTestEnable)(CELL_GCM_ARGS(const uint32_t enable));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetTwoSidedStencilTestEnable)(CELL_GCM_ARGS(const uint32_t enable));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetPolygonOffsetFillEnable)(CELL_GCM_ARGS(const uint32_t enable));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetRestartIndexEnable)(CELL_GCM_ARGS(const uint32_t enable));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetPointSpriteControl)(CELL_GCM_ARGS(const uint32_t enable, const uint32_t rmode, const uint32_t texcoord));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetInvalidateTextureCache)(CELL_GCM_ARGS(const uint32_t value));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetTextureBorderColor)(CELL_GCM_ARGS(const uint8_t index, const uint32_t color));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetTextureControl)(CELL_GCM_ARGS(const uint8_t index, const uint32_t enable, const uint16_t minlod, const uint16_t maxlod, const uint8_t maxaniso));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetTextureOptimization)(CELL_GCM_ARGS(const uint8_t index, const uint8_t slope, const uint8_t iso, const uint8_t aniso));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetCylindricalWrap)(CELL_GCM_ARGS(const uint32_t enable, const uint32_t reserved));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetInvalidateVertexCache)(CELL_GCM_NO_ARGS());
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetRestartIndex)(CELL_GCM_ARGS(const uint32_t index));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexData4f)(CELL_GCM_ARGS(const uint8_t index, const float v[4]));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetFrequencyDividerOperation)(CELL_GCM_ARGS(const uint16_t operation));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetTransformBranchBits)(CELL_GCM_ARGS(const uint32_t branchBits));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexAttribInputMask)(CELL_GCM_ARGS(const uint16_t mask));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetFragmentProgramGammaEnable)(CELL_GCM_ARGS(const uint32_t enable));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetRenderEnable)(CELL_GCM_ARGS(const uint8_t mode, const uint32_t index));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetZpassPixelCountEnable)(CELL_GCM_ARGS(const uint32_t enable));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetClearReport)(CELL_GCM_ARGS(const uint32_t type));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetReport)(CELL_GCM_ARGS(const uint32_t type, const uint32_t index));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetZcullStatsEnable)(CELL_GCM_ARGS(const uint32_t enable));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetZcullControl)(CELL_GCM_ARGS(const uint8_t zCullDir, const uint8_t zCullFormat));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetZcullLimit)(CELL_GCM_ARGS(const uint16_t moveForwardLimit, const uint16_t pushBackLimit));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetScullControl)(CELL_GCM_ARGS(const uint8_t sFunc, const uint8_t sRef, const uint8_t sMask));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexTextureAddress)(CELL_GCM_ARGS(const uint8_t index, const uint8_t wraps, const uint8_t wrapt));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexTextureFilter)(CELL_GCM_ARGS(const uint8_t index, const uint16_t bias));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexTextureControl)(CELL_GCM_ARGS(const uint8_t index, const uint32_t enable, const uint16_t minLod, const uint16_t maxLod));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexTextureBorderColor)(CELL_GCM_ARGS(const uint8_t index, const uint32_t color));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetPerfMonTrigger)(CELL_GCM_NO_ARGS());
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetFogMode)(CELL_GCM_ARGS(const uint32_t mode));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetFogParams)(CELL_GCM_ARGS(const float p0, const float p1));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetTransferLocation)(CELL_GCM_ARGS(const uint32_t location));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetDepthFormat)(CELL_GCM_ARGS(const uint32_t format));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetBlendOptimization)(CELL_GCM_ARGS(const uint32_t enable));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetPolygonOffsetLineEnable)(CELL_GCM_ARGS(const uint32_t enable));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexAttribOutputMask)(CELL_GCM_ARGS(const uint32_t mask));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetTextureRemap)(CELL_GCM_ARGS(const uint8_t index, const uint32_t remap));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexProgramStartSlot)(CELL_GCM_ARGS(const uint32_t startSlot));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexProgramRegisterCount)(CELL_GCM_ARGS(const uint32_t registerCount));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetTransferDataMode)(CELL_GCM_ARGS(const uint8_t mode));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetDrawBegin)(CELL_GCM_ARGS(const uint8_t mode));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetDrawEnd)(CELL_GCM_NO_ARGS());
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexDataArrayFormat)(CELL_GCM_ARGS(const uint8_t index, const uint16_t frequency, const uint8_t stride, const uint8_t size, const uint8_t type));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexDataArrayOffset)(CELL_GCM_ARGS(const uint8_t index, const uint8_t location, const uint32_t offset));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetUpdateFragmentProgramParameterLocation)(CELL_GCM_ARGS(const uint32_t offset, const uint32_t location));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexDataBase)(CELL_GCM_ARGS(const uint32_t baseOffset, const uint32_t baseIndex));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetFragmentProgramOffset)(CELL_GCM_ARGS(const CGprogram prog, const uint32_t offset, const uint32_t location));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetFragmentProgramControl)(CELL_GCM_ARGS(const CGprogram prog, const uint8_t controlTxp, const uint8_t reserved0, const uint8_t reserved1));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetClearZcullSurface)(CELL_GCM_ARGS(const uint32_t depth, const uint32_t stencil));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetZcullEnable)(CELL_GCM_ARGS(const uint32_t depth, const uint32_t stencil));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetUserCommand)(CELL_GCM_ARGS(const uint32_t cause));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetReportLocation)(CELL_GCM_ARGS(uint32_t location));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetNotifyIndex)(CELL_GCM_ARGS(const uint32_t index));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetNotify)(CELL_GCM_NO_ARGS());
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetTextureFilter)(CELL_GCM_ARGS(const uint8_t index, const uint16_t bias, const uint8_t min, const uint8_t mag, const uint8_t conv));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetTextureAddress)(CELL_GCM_ARGS(const uint8_t index, const uint8_t wraps, const uint8_t wrapt, const uint8_t wrapr, const uint8_t unsignedRemap, const uint8_t zfunc, const uint8_t gamma));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetUserClipPlaneControl)(CELL_GCM_ARGS(const uint32_t plane0, const uint32_t plane1, const uint32_t plane2, const uint32_t plane3, const uint32_t plane4, const uint32_t plane5));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetAnisoSpread)(CELL_GCM_ARGS(const uint8_t index, const uint8_t reduceSamplesEnable, const uint8_t hReduceSamplesEnable, const uint8_t vReduceSamplesEnable, const uint8_t spacingSelect, const uint8_t hSpacingSelect, const uint8_t vSpacingSelect));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetLabelLocation)(CELL_GCM_ARGS(uint32_t location));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetNopCommand)(CELL_GCM_ARGS(const uint32_t count));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetSkipNop)(CELL_GCM_ARGS(uint32_t count));
#if (CELL_GCM_UNSAFE==0)
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(ReserveMethodSize)(CELL_GCM_ARGS(uint32_t size));
#endif

CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetWriteBackEndLabelForConditional)(CELL_GCM_ARGS(uint8_t index, uint32_t value));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetWriteTextureLabelForConditional)(CELL_GCM_ARGS(uint8_t index, uint32_t value));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexProgram)(CELL_GCM_ARGS(const CGprogram prog, const void *ucode));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetFragmentProgramLoadLocation)(CELL_GCM_ARGS(const CellCgbFragmentProgramConfiguration *conf, const uint32_t location));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexProgramLoad)(CELL_GCM_ARGS(const CellCgbVertexProgramConfiguration *conf, const void *ucode));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexProgramLoadSlot)(CELL_GCM_ARGS(const uint32_t loadSlot, const uint32_t instCount, const void *ucode));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexProgramConstants)(CELL_GCM_ARGS(const uint32_t start, const uint32_t count, const float *data));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexProgramParameterBlock)(CELL_GCM_ARGS(const uint32_t baseConst, uint32_t constCount, const float * __restrict value));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexDataArray)(CELL_GCM_ARGS(const uint8_t index, const uint16_t frequency, const uint8_t stride, const uint8_t size, const uint8_t type, const uint8_t location, const uint32_t offset));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetTextureBorder)(CELL_GCM_ARGS(const uint8_t index, const CellGcmTexture *texture, uint8_t border));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetWaitFlip)(CELL_GCM_NO_ARGS());
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetFragmentProgramParameterPointer)(CELL_GCM_ARGS(const CGprogram prog, const CGparameter param, const uint32_t offset, const uint32_t srcOffset));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetFragmentProgramParameter)(CELL_GCM_ARGS(const CGprogram prog, const CGparameter param, const float *value, const uint32_t offset));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetFragmentProgram)(CELL_GCM_ARGS(const CGprogram prog, uint32_t offset));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexProgramParameter)(CELL_GCM_ARGS(const CGparameter param, const float *value));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetFragmentProgramLoad)(CELL_GCM_ARGS(const CellCgbFragmentProgramConfiguration *conf));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetUpdateFragmentProgramParameter)(CELL_GCM_ARGS(const uint32_t offset));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetTextureFilterSigned)(CELL_GCM_ARGS(const uint8_t index, const uint16_t bias, const uint8_t min, const uint8_t mag, const uint8_t conv, const uint8_t as, const uint8_t rs, const uint8_t gs, const uint8_t bs));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetClipMinMax)(CELL_GCM_ARGS(float min, float max));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetViewport)(CELL_GCM_ARGS(const uint16_t x, const uint16_t y, const uint16_t w, const uint16_t h, const float min, const float max, const float scale[4], const float offset[4]));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetTextureAddressAnisoBiasRemap)(CELL_GCM_ARGS(const uint8_t index, const uint8_t wraps, const uint8_t wrapt, const uint8_t wrapr, const uint8_t unsignedRemap, const uint8_t zfunc, const uint8_t gamma, const uint8_t anisoBias, const uint8_t signedRemap));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetTextureAddressAnisoBias)(CELL_GCM_ARGS(const uint8_t index, const uint8_t wraps, const uint8_t wrapt, const uint8_t wrapr, const uint8_t unsignedRemap, const uint8_t zfunc, const uint8_t gamma, const uint8_t anisoBias));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetTexture)(CELL_GCM_ARGS(const uint8_t index, const CellGcmTexture *texture));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexTexture)(CELL_GCM_ARGS(const uint8_t index, const CellGcmTexture *texture));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetSurface)(CELL_GCM_ARGS(const CellGcmSurface *surface));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetSurfaceWindow)(CELL_GCM_ARGS(const CellGcmSurface *surface, const uint32_t origin, const uint32_t pixelCenter));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetInlineTransfer)(CELL_GCM_ARGS(const uint32_t dstOffset, const void *srcAdr, const uint32_t sizeInWords));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(InlineTransfer)(CELL_GCM_ARGS(const uint32_t dstOffset, const void *srcAdr, const uint32_t sizeInWords, const uint8_t location));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE_UINT32 CELL_GCM_FUNC(SetTransferImage)(CELL_GCM_ARGS(const uint8_t mode, const uint32_t dstOffset, const uint32_t dstPitch, const uint32_t dstX, const uint32_t dstY, const uint32_t srcOffset, const uint32_t srcPitch, const uint32_t srcX, const uint32_t srcY, const uint32_t width, const uint32_t height, const uint32_t bytesPerPixel));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(TransferData)(CELL_GCM_ARGS(uint32_t dstOffset, int32_t dstPitch, uint32_t srcOffset, int32_t srcPitch, int32_t bytesPerRow, int32_t rowCount));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE_UINT32 CELL_GCM_FUNC(SetTransferData)(CELL_GCM_ARGS(const uint8_t mode, const uint32_t dstOffset, const uint32_t dstPitch, const uint32_t srcOffset, const uint32_t srcPitch, const uint32_t bytesPerRow, const uint32_t rowCount));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetConvertSwizzleFormat)(CELL_GCM_ARGS(uint32_t dstOffset, uint32_t dstWidth, uint32_t dstHeight, uint32_t dstX, uint32_t dstY, uint32_t srcOffset, uint32_t srcPitch, uint32_t srcX, uint32_t srcY, uint32_t width, uint32_t height, uint32_t bytesPerPixel, uint8_t mode));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetInlineTransferPointer)(CELL_GCM_ARGS(const uint32_t offset, const uint32_t count, void **pointer));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetTransferDataFormat)(CELL_GCM_ARGS(const int32_t inPitch, const int32_t outPitch, const uint32_t lineLength, const uint32_t lineCount, const uint8_t inFormat, const uint8_t outFormat));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetTransferDataOffset)(CELL_GCM_ARGS(const uint32_t dstOffset, const uint32_t srcOffset));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetTransferScaleMode)(CELL_GCM_ARGS(const uint8_t mode, const uint8_t surface));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetTransferScaleSurface)(CELL_GCM_ARGS(const CellGcmTransferScale *scale, CellGcmTransferSurface *surface));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetTransferScaleSwizzle)(CELL_GCM_ARGS(const CellGcmTransferScale *scale, CellGcmTransferSwizzle *swizzle));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetTransferReportData)(CELL_GCM_ARGS(const uint32_t offset, const uint32_t index, const uint32_t count));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetDrawArrays)(CELL_GCM_ARGS(const uint8_t mode, uint32_t first, uint32_t count));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetDrawIndexArray)(CELL_GCM_ARGS(const uint8_t mode, uint32_t count, const uint8_t type, const uint8_t location, const uint32_t indicies));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetDrawInlineArray)(CELL_GCM_ARGS(const uint8_t mode, const uint32_t count, const void *data));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetDrawInlineIndexArray32)(CELL_GCM_ARGS(const uint8_t mode, const uint32_t start, const uint32_t count, const uint32_t *data));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetDrawInlineIndexArray16)(CELL_GCM_ARGS(const uint8_t mode, const uint32_t start, const uint32_t count, const uint16_t *data));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetDrawInlineArrayPointer)(CELL_GCM_ARGS(const uint32_t count, void **pointer));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexProgramConstantsPointer)(CELL_GCM_ARGS(uint32_t first, uint32_t count, void **pointer));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetDrawInlineIndexArray32Pointer)(CELL_GCM_ARGS(const uint32_t count, void **pointer));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetDrawInlineIndexArray16Pointer)(CELL_GCM_ARGS(const uint32_t count, void **pointer));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexProgramParameterBlockPointer)(CELL_GCM_ARGS(uint32_t baseConst, uint32_t constCount, void **pointer));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetWaitForIdle)(CELL_GCM_NO_ARGS());
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexData3f)(CELL_GCM_ARGS(const uint8_t index, const float v[3]));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexData2f)(CELL_GCM_ARGS(const uint8_t index, const float v[2]));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexData1f)(CELL_GCM_ARGS(const uint8_t index, const float v));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexData4s)(CELL_GCM_ARGS(const uint8_t index, const int16_t v[4]));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexDataScaled4s)(CELL_GCM_ARGS(const uint8_t index, const int16_t v[4]));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexData2s)(CELL_GCM_ARGS(const uint8_t index, const int16_t v[2]));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexData4ub)(CELL_GCM_ARGS(const uint8_t index, const uint8_t v[4]));


#if (CELL_GCM_MEASURE != 2)
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetInlineTransferAlignedPointer)(CELL_GCM_ARGS(const uint32_t offset, const uint32_t count, void **pointer));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexProgramConstantsAlignedPointer)(CELL_GCM_ARGS(uint32_t first, uint32_t count, void **pointer));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetVertexProgramParameterBlockAlignedPointer)(CELL_GCM_ARGS(const uint32_t baseConst, const uint32_t constCount, void **pointer));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetDrawInlineArrayAlignedPointer)(CELL_GCM_ARGS(const uint32_t count, void **pointer));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetDrawInlineIndexArray32AlignedPointer)(CELL_GCM_ARGS(const uint32_t count, void **pointer));
CELL_GCM_DECL CELL_GCM_FUNC_TYPE CELL_GCM_FUNC(SetDrawInlineIndexArray16AlignedPointer)(CELL_GCM_ARGS(const uint32_t count, void **pointer));
#endif
