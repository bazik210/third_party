////////////////////////////////////////////////////////////////////////////
//	Created		: 11.03.2011
//	Author		: Nikolay Partas
//	Copyright (C) GSC Game World - 2011
////////////////////////////////////////////////////////////////////////////

/*	$DEFINES$:
		GLOBAL_USE_BRANCHING,
		CONFIG_TTRANSPARENCY,
		CONFIG_EMISSIVE,
		CONFIG_VERTEX_INPUT_TYPE,
*/

#include "common.h"
#include "material.h"
#include "vertex_input.h"

Texture2D t_transparency;

float 	  solid_transparency;

float4 far_fog_color_and_distance;
float near_fog_distance;

float4 	main			(in vertex_output_struct input) : SV_TARGET0
{
	material_parameters parameters = get_material_parameters(input);
	fill_material_parameters(parameters);
	
	float3 eye_vector 			= normalize(parameters.world_view_position.xyz - mul(m_V, float4(eye_position, 1)).xyz);
	float alpha 				= pow((dot(-parameters.normal.xyz, eye_vector)),3.0f);
	
	float4 final_color			= 	float4 ( solid_color_specular.xyz, 1.f);
	
	if( CONFIG_EMISSIVE==2)
		final_color.rgb 		*= blend_subuv_sample(t_base, parameters).rgb;
	
	final_color.a				= solid_transparency;
	if (CONFIG_TTRANSPARENCY)
		final_color.a			*= blend_subuv_sample(t_transparency, parameters).a;
	
	//final_color.rgb 			*= solid_color_specular.a;
	final_color					*= parameters.color;
	final_color.a				*= alpha;
	
	//float far_fog 		= 1.0f - saturate( exp( -(parameters.world_view_position.z - near_fog_distance) / (far_fog_color_and_distance.a) ) );
	//final_color.rgb		= lerp(final_color.rgb, far_fog_color_and_distance.rgb, far_fog);
	
	
	return final_color;
}










