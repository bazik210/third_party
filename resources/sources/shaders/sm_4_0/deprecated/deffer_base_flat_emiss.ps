#include "common.h"
#include "sload.h"
#include "gbuffer.h"

struct g_struct_emissive
{
	g_struct 	gb;
	float4		emissive : SV_Target3;
};

g_struct_emissive 	main	( p_flat I )
{
  // diffuse
  float3 D	= tbase		(I.tcdh);	// IN:  rgb.a

#ifdef	USE_TDETAIL
	D.rgb	= 2*D.rgb*tex2D	(s_detail, I.tcdbump).rgb;
#endif

	// hemi,sun,material
	float 	ms;
#ifdef USE_LM_HEMI
	float4	lm 	= tex2D			(s_hemi, I.lmh);
//	float 	h  	= dot			(lm.rgb,1.h/3.h);
	float 	h  	= get_hemi(lm);
# ifdef USE_R2_STATIC_SUN
//		 	ms 	= lm.w			;
			ms 	= get_sun(lm);
# endif
#else
	float 	h	= I.position.w	;
# ifdef USE_R2_STATIC_SUN
		 	ms	= I.tcdh.w		;
# endif
#endif

	g_struct_emissive	O;
	O.gb 	= gbuffer_store ( I.position, normalize((float3)I.N.xyz), float4( D.xyz, 0.1f) /*def_gloss*/, 0.f, 0.f, 1.f, 100.f);
	O.emissive					= float4 (0.5, 0, 0, 0);
	
  // 2. Standart output
//  O.Ne          = float4		(normalize((float3)I.N.xyz), 					h			);
//  O.position    = float4 		(I.position.xyz /*+ O.Ne.xyz*def_virtualh/2.h*/, 	ms			);
//  O.C			= float4		(D.rgb,											def_gloss	);	// OUT: rgb.gloss

  return O;
}
