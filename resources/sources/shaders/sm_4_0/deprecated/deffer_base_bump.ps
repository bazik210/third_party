#include "common.h"
#include "sload.h"
#include "gbuffer.h"


g_struct 	main	( p_bumped I )
{
	surface_bumped 	S 	= sload 	(I);

	// Sample normal, rotate it by matrix, encode position 
	float3 Ne;
	Ne = mul(float3x3(I.M1, I.M2, I.M3), S.normal);
	Ne = normalize(Ne);

	// hemi,sun,material
	float 	ms;
#ifdef USE_LM_HEMI
	float4	lm 	= t_hemi.Sample(s_hemi, I.lmh);
//	float 	h  	= dot(lm.rgb,1.h/3.h);
	float 	h  	= get_hemi(lm);
# ifdef USE_R2_STATIC_SUN
		 	ms 	= lm.w;
			ms 	= get_sun(lm);
# endif
#else
	float 	h	= I.position.w	;
# ifdef USE_R2_STATIC_SUN
		 	ms	= I.tcdh.w		;
# endif
#endif

	g_struct	O 	= gbuffer_store ( I.position, Ne, float4( S.base.xyz, S.gloss), 0.f, 0.f, 1.f, 100.f);
	
//	O.Ne 		= float4		(Ne, 										h );
//	O.position  = float4 		(I.position.xyz + Ne*S.height*def_virtualh, 	ms );
//	O.C			= float4		(S.base.xyz, 								S.gloss	);							// OUT: rgb.gloss

  return O;
}
