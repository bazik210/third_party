#include "common.h"
#include "sload.h"
#include "gbuffer.h"

#ifdef	USE_TRANSLUENCY
Texture2D t_transluent;
#endif

g_struct 	main	( p_flat I )
{
  // 1. Base texture + kill pixels with low alpha
  float4 D 	= tbase	 	(I.tcdh);
  clip		(D.w-def_aref);

#ifdef	USE_TDETAIL
	D.rgb	= 2*D.rgb*tex2D	(s_detail, I.tcdbump).rgb;
#endif

	float transluency = 0.f;
#ifdef	USE_TRANSLUENCY
	transluency	= 128*t_transluent.Sample( s_base, I.tcdh);
#endif

	g_struct O 	= gbuffer_store ( I.position, normalize((float3)I.N.xyz), float4( D.xyz, 0.00f/*def_gloss*/), 1.f, transluency, 1.f, 10.f);

  // 2. Standart output
//  O.Ne          = float4	(normalize((float3)I.N.xyz), 					h			);
//  O.position    = float4 	(I.position.xyz + O.Ne.xyz*def_virtualh/2.h	, 	ms			);	//.
//  O.C			= float4	(D.rgb,											def_gloss	);	// OUT: rgb.gloss
  return O;
}
