////////////////////////////////////////////////////////////////////////////
//	Created		: 20.03.2012
//	Author		: Nikolay Partas
//	Copyright (C) GSC Game World - 2012
////////////////////////////////////////////////////////////////////////////

/*	$DEFINES$:
		GLOBAL_ALLOW_STEEPPARALLAX,
		GLOBAL_FP16_BLEND,
		GLOBAL_GBUFFER_POS_PACKING,
		GLOBAL_GBUFFER_NORMAL_PACKING,
		GLOBAL_USE_BRANCHING,
		
		CONFIG_VERTEX_INPUT_TYPE,
		CONFIG_TNORMAL,
*/

#include "common.h"
#include "material.h"
#include "vertex_input.h"
#include "gbuffer.h"
#include "psf_normal.h"

uniform float4 screen_res;


Texture2D 	texture_mask;

Texture2D 	texture_normal_0;
Texture2D 	texture_normal_1;
Texture2D 	texture_normal_2;
Texture2D 	texture_normal_3;

float4 		constant_tiles;

void	main(in vertex_output_struct input,
			 out float4 out_depth_render_target			: SV_Target0,
			 out float4 out_normals_render_target		: SV_Target1,
			 out float4 out_tangents_render_target		: SV_Target2)
{
	material_parameters parameters 		= 	get_material_parameters(input);
	fill_material_parameters			(parameters);
	
	float3	 	normal 					= 	parameters.normal;
	
	float3x3	tbn_matrix				= 	parameters.tangent_to_viewspace;
	
	
	float4 mask							=	texture_mask.Sample(s_base, parameters.tc);
	mask								=	normalize(mask);
	
#if CONFIG_TNORMAL
	normal								= 	mask.x * psf_tnormal(texture_normal_0, tbn_matrix, parameters.tc * constant_tiles.x, float3(1,1,1)) + 
											mask.y * psf_tnormal(texture_normal_1, tbn_matrix, parameters.tc * constant_tiles.y, float3(1,1,1)) +
											mask.z * psf_tnormal(texture_normal_2, tbn_matrix, parameters.tc * constant_tiles.z, float3(1,1,1)) + 
											mask.w * psf_tnormal(texture_normal_3, tbn_matrix, parameters.tc * constant_tiles.w, float3(1,1,1));
	normal								=	normalize(normal);
#else // #if CONFIG_TNORMAL
	normal								= 	normalize(mul(tbn_matrix, float3(0.0f,0.0f,1.0f)));	
#endif // #if CONFIG_TNORMAL
	
	out_depth_render_target				= 	float4(
		sqrt(parameters.world_view_position.z * near_far_invn_invf.w), 
		0.0f,
		60.0f,
		60.0f
	);
	
	out_normals_render_target			= 	float4(
		normal.xy * 0.5f + 0.5f,
		0.2f,
		normal.z > 0 ? 0 : 1
	);
	
	clip								(parameters.color.a - 0.1f);
	
	out_tangents_render_target			= 	0.0f;
}
















