////////////////////////////////////////////////////////////////////////////
//	Created		: 25.01.2011
//	Author		: Nikolay Partas
//	Copyright (C) GSC Game World - 2011
////////////////////////////////////////////////////////////////////////////

/*
	$DEFINES$:
		GLOBAL_USE_LOOP_UNROLLING,
		
		CONFIG_VERTEX_INPUT_TYPE,
*/

//uniform float3x4 m_V2W;

#include "material.h"
#include "vertex_input.h"

#include "common_defines.h"

float4 geometry_complexity_parameters;
static const float num_triangles = geometry_complexity_parameters.x;
static const float triangles_min = geometry_complexity_parameters.y;
static const float triangles_max = geometry_complexity_parameters.z;

float4 main(in vertex_output_struct input) : SV_TARGET
{
	material_parameters parameters = get_material_parameters(input);
	fill_material_parameters(parameters);
	
	static const int num_ranges = 5;
	
	static const float3 colors[num_ranges+1] = {
		float3(0.2f, 0.2f, 0.2f),
		float3(0.0f, 0.0f, 1.0f),
		float3(0.0f, 1.0f, 0.0f),
		float3(1.0f, 0.0f, 0.0f),
		float3(1.0f, 1.0f, 1.0f),
		float3(1.0f, 1.0f, 0.0f),
	};
	
	static const float3 range_and_index[num_ranges] = 
	{
		float3(0,	  5000,   0), // to blue
		float3(5001,  10000,  1), // to green
		float3(10001, 15000,  2), // to red
		float3(15001, 20000,  3), // to white
		float3(20001, 100000, 4), // to yellow
	};
	
	float low_triangle_count 	= 1.0f;
	float high_triangle_count 	= 10000.0f;
	float3 low_color			= float3(0.0f, 0.0f, 1.0f);
	float3 high_color			= float3(1.0f, 0.0f, 0.0f);
	
	UNROLL for (int i=0; i<num_ranges; i++)
	{
		float min_value = low_triangle_count;//range_and_index[i].x;
		float max_value = high_triangle_count;//range_and_index[i].y;
		//int   index 	= (int)range_and_index[i].z;
		
		if (num_triangles>=min_value && num_triangles<=max_value)
		{
			float alpha  = (num_triangles - min_value) / (max_value - min_value);
			//float3 color = lerp(colors[index], colors[index+1], alpha);
			float3 color = lerp(low_color, high_color, alpha);
			return float4(color, 0);
		}
	}
	
	return 1;
}






