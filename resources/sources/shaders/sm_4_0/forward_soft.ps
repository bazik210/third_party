////////////////////////////////////////////////////////////////////////////
//	Created		: 14.04.2011
//	Author		: Nikolay Partas
//	Copyright (C) GSC Game World - 2011
////////////////////////////////////////////////////////////////////////////

/*	$DEFINES$:
		GLOBAL_USE_BRANCHING,
		CONFIG_TTRANSPARENCY,
		CONFIG_EMISSIVE,
		CONFIG_VERTEX_INPUT_TYPE,
*/

#include "common.h"
#include "material.h"
#include "vertex_input.h"
#include "gbuffer.h"

Texture2D t_transparency;
float 	  solid_transparency;
float	  soft_distance;

uniform float4 screen_res;

float4 	main			(in vertex_output_struct input): SV_TARGET0
{
	material_parameters parameters = get_material_parameters(input);
	fill_material_parameters(parameters);
	
	float4 final_color			= 	solid_color_specular;
	if( CONFIG_EMISSIVE==2)
		final_color.rgb  	   *= t_base.Sample( s_base, parameters.tc ).rgb;
	
	final_color.a				= solid_transparency;
	if (CONFIG_TTRANSPARENCY)
		final_color.a 			*= t_transparency.Sample( s_linear, parameters.tc ).a;
	
	final_color				*= parameters.color;
	
	float pixel_depth 		= parameters.world_view_position.z;
	float frame_depth		= gbuffer_read_frame_depth(input.homogeneous_position.xy / screen_res.xy);
	final_color.a			*= saturate((frame_depth - pixel_depth) / soft_distance);
	
	return final_color;
}










