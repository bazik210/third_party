////////////////////////////////////////////////////////////////////////////
//	Created		: 05.12.2010
//	Author		: Nikolay Partas
//	Copyright (C) GSC Game World - 2010
////////////////////////////////////////////////////////////////////////////

/*	$DEFINES$:
		GLOBAL_USE_BRANCHING,
		CONFIG_TDIFFUSE,
		CONFIG_TNORMAL,
		CONFIG_TSPECULAR_INTENSITY,
		
		CONFIG_USE_AO_TEXTURE,
		CONFIG_VERTEX_INPUT_TYPE,
		CONFIG_USE_ORGANIC_SCATTERING_AMOUNT_MASK,
		CONFIG_USE_ORGANIC_BACK_ILLUMINATION_TEXTURE,
		CONFIG_USE_ORGANIC_SUBDERMAL_TEXTURE,	
*/

#include "common.h"
#include "material.h"
#include "vertex_input.h"
#include "gbuffer.h"
#include "gamma_correction.h"
#include "psf_normal.h"
#include "psf_tspecular_intensity.h"

Texture2D t_transparency;
float 	  solid_transparency;

float4 far_fog_color_and_distance;
float near_fog_distance;

Texture2D t_frame_color;
uniform float4 screen_res;

Texture2D t_skin_scattering;
Texture2D t_skin_scattering_blurred_0;
Texture2D t_skin_scattering_blurred_1;
Texture2D t_skin_scattering_blurred_2;
Texture2D t_skin_scattering_blurred_3;
Texture2D t_skin_scattering_blurred_4;

Texture2D t_sss_amount;
Texture2D t_back_color;
Texture2D t_subdermal;
Texture2D t_ao;

// x - color multiplier
// y - weight
float4 subdermal_parameters;

float scattering_color_multiplier;
float subdermal_weight;

Texture2D t_specular_intensity;

float3 light_position;
float3 light_color;
float light_range;

float4 ambient_color;

float3 specular_color_parameter;

static const float3 blur_jittered_weights[13] = 
{ 
	{ 0.220441, 0.437000, 0.635000 }, 
	{ 0.076356, 0.064487, 0.039097 }, 
	{ 0.116515, 0.103222, 0.064912 }, 
	{ 0.064844, 0.086388, 0.062272 }, 
	{ 0.131798, 0.151695, 0.103676 }, 
	{ 0.025690, 0.042728, 0.033003 }, 
	{ 0.048593, 0.064740, 0.046131 }, 
	{ 0.048092, 0.003042, 0.000400 }, 
	{ 0.048845, 0.005406, 0.001222 }, 
	{ 0.051322, 0.006034, 0.001420 }, 
	{ 0.061428, 0.009152, 0.002511 }, 
	{ 0.030936, 0.002868, 0.000652 }, 
	{ 0.073580, 0.023239, 0.009703 }, 
}; 

static const float3 blur_weights[6] =
{
	{ .220, .437, .635 },
	{ .101, .355, .365 },
	{ .119, .208, .000 },
	{ .114, .000, .000 },
	{ .364, .000, .000 },
	{ .080, .000, .000 }
};

float4 	main			(in vertex_output_struct input): SV_TARGET0
{
	material_parameters parameters = get_material_parameters(input);
	fill_material_parameters(parameters);
	
	float2 screen_uv			= input.homogeneous_position.xy * screen_res.zw;
	
	float4 final_color			= 1.0f;
	
	final_color.rgb				= convert_to_linear_space(solid_color_specular.xyz);
	
	if (CONFIG_TDIFFUSE)
		final_color.rgb  	    *= t_base.Sample( s_base, parameters.tc ).rgb;
	
	final_color					*= parameters.color;
	
	float3 model_diffuse_color	= final_color.rgb;
	
	float ao_result				= 1.0f;
	
#if CONFIG_USE_AO_TEXTURE	
	ao_result					= t_ao.Sample(s_base, parameters.tc).r;
#endif // CONFIG_USE_AO_TEXTURE
	
	float3 diffuse_color		= 0.0f;
	float3 diffuse_point 		= light_color * ao_result * t_skin_scattering.Sample(s_base, parameters.tc).rgb;
	float light_map_amount 		= 1.0f;
	
#if CONFIG_USE_ORGANIC_SCATTERING_AMOUNT_MASK	
	light_map_amount			= saturate(1.0f * t_sss_amount.Sample(s_base, parameters.tc).r);
#endif // CONFIG_USE_ORGANIC_SCATTERING_AMOUNT_MASK
	
	float diffuse_to_subdermal	= 1.0f - saturate(t_skin_scattering_blurred_0.Sample(s_base, parameters.tc)).r;
	
	float3 subdermal_color		= t_subdermal.Sample(s_base, parameters.tc).rgb;
	
	float3 diffuse_blurred 		= 0;
	
	static const float scm		= scattering_color_multiplier;
	
	float3 blur0					= t_skin_scattering_blurred_0.Sample(s_base, parameters.tc).rgb;
	float3 blur1					= t_skin_scattering_blurred_1.Sample(s_base, parameters.tc).rgb;
	float3 blur2					= t_skin_scattering_blurred_2.Sample(s_base, parameters.tc).rgb;
	float3 blur3					= t_skin_scattering_blurred_3.Sample(s_base, parameters.tc).rgb;
	float3 blur4					= t_skin_scattering_blurred_4.Sample(s_base, parameters.tc).rgb;
	
	float3 max_b0					= max(blur0.x, max(blur0.y, blur0.z));
	float3 max_b1					= max(blur1.x, max(blur1.y, blur1.z));
	float3 max_b2					= max(blur2.x, max(blur2.y, blur2.z));
	float3 max_b3					= max(blur3.x, max(blur3.y, blur3.z));
	float3 max_b4					= max(blur4.x, max(blur4.y, blur4.z));

	float3 diff0					= blur0 * saturate(1 - blur0);
	float3 diff1					= blur1 * saturate(1 - blur1);
	float3 diff2					= blur2 * saturate(1 - blur2);
	float3 diff3					= blur3 * saturate(1 - blur3);
	float3 diff4					= blur4 * saturate(1 - blur4);
	
	float pp = 0;
	diffuse_color 					+= blur_jittered_weights[0] * diffuse_point;
	diffuse_blurred 				+= blur_weights[1] * (blur0 + pp*diff0);
	diffuse_blurred 				+= blur_weights[2] * (blur1 + pp*diff1);
	diffuse_blurred 				+= blur_weights[3] * (blur2 + pp*diff2);
	diffuse_blurred 				+= blur_weights[4] * (blur3 + pp*diff3);
	diffuse_blurred 				+= blur_weights[5] * (blur4 + pp*diff4);
	//diffuse_blurred				*= 5.0f * subdermal_color;
	
	float3 diffuseBlurredSubdermal = diffuse_blurred;
#if CONFIG_USE_ORGANIC_SUBDERMAL_TEXTURE
	//lerp(model_diffuse_color, subdermal_color.rgb, subdermal_weight);//
	//diffuse_blurred				*= lerp(1.0f, scm * subdermal_color.rgb, subdermal_weight * diffuse_to_subdermal);//lerp(
	//model_diffuse_color			= lerp(
	//	1.0f, 
	//	scm * subdermal_color.rgb, 
	//	saturate(subdermal_weight * diffuse_to_subdermal)
	//);
	model_diffuse_color			= lerp(model_diffuse_color, subdermal_color, diffuse_to_subdermal * subdermal_weight);
#endif // CONFIG_USE_ORGANIC_SUBDERMAL_TEXTURE	
	
	diffuse_blurred				*= scm;
	
	float3 normal				= 0.0f;
	if( CONFIG_TNORMAL)
	{
		normal				= psf_tnormal( t_normal, parameters.tangent_to_viewspace, parameters.tc, float3(1,1,1));
		//normal					= t_normal.Sample(s_normal, parameters.tc).xyz * 2.0f - 1.0f;
		//normal					= normalize(mul(m_V, float4(normal * float3(-1,1,1), 0.0f)).xyz);
	}
	else
		normal					= 	normalize( mul( parameters.tangent_to_viewspace, float3(0.0f,0.0f,1.0f)) );	
	
	float3 light_vector			= normalize(light_position - parameters.world_view_position.xyz);
	float diffuse 				= saturate(0.75+dot(light_vector, normal));
	
	//diffuse_blurred				*= ao_result;
	
	//diffuse_blurred *= diffuse;	
	
	diffuse_color 				= blur_jittered_weights[0] * diffuse_point + 
		lerp( (float3(1,1,1)-blur_jittered_weights[0]) * diffuse_point, diffuse_blurred, light_map_amount);
	
	float3 	specular_color 		= convert_to_linear_space(specular_color_parameter);
	if( CONFIG_TSPECULAR_INTENSITY)
		specular_color 			*= psf_tspecular_intensity(t_specular_intensity, parameters.tc);
	
	//float3 light_vector			= normalize(light_position - parameters.world_view_position.xyz);
	//float diffuse 				= saturate(dot(light_vector, normal));
	
	float specular 				= t_skin_scattering.Sample(s_base, parameters.tc).w;//diffuse_point.x * diffuse * KelemenSzirmayKalosSpec( -normalize(parameters.world_view_position.xyz), normal, light_vector, eccentricity, rolloff, weight );
	
	final_color.rgb 			= (diffuse_color * model_diffuse_color + light_color * specular * specular_color);
	
#if CONFIG_USE_ORGANIC_BACK_ILLUMINATION_TEXTURE
	float3 back_color			= t_back_color.Sample(s_base, parameters.tc).rgb;
	final_color.rgb				+= back_color.rgb * saturate(pow(dot(-light_vector, normal), 1.0f) - 0.0f);
#endif // CONFIG_USE_ORGANIC_BACK_ILLUMINATION_TEXTURE
	
	//const float epsilon			= 0.0f;
	//float2 stretch				= t_skin_scattering.Sample(s_material1, parameters.tc).gb / 1024.0f;
	//final_color.rgb				= t_skin_scattering.Sample(s_material1, clamp(parameters.tc, 0.0f + epsilon, 1.0f - epsilon)).rrr;
	//if (parameters.tc.x>=0.9f || parameters.tc.y>=0.9f || parameters.tc.x<0.01f || parameters.tc.y<0.01f)
	//if (parameters.tc.x<=0.03f || parameters.tc.y<=0.03f)
	//{
	//	return float4(1,0,0,1);
	//}
	//else
	//{
		//final_color.rgb			*= ao_result;
		return float4(/*convert_to_linear_space(0.25f * ambient_color.rgb).r * model_diffuse_color + */final_color.rgb, 1);
		//return float4(diffuse_blurred.rgb, 1);
	//}
}







